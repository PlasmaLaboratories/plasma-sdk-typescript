/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: genus/genus_rpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../models/address";
import * as dependency_2 from "./../models/block";
import * as dependency_3 from "./../models/common";
import * as dependency_4 from "./genus_models";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace co.topl.proto.genus {
    export class GetExistingTransactionIndexesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indexSpecs?: IndexSpecs;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indexSpecs" in data && data.indexSpecs != undefined) {
                    this.indexSpecs = data.indexSpecs;
                }
            }
        }
        get indexSpecs() {
            return pb_1.Message.getWrapperField(this, IndexSpecs, 1) as IndexSpecs;
        }
        set indexSpecs(value: IndexSpecs) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_indexSpecs() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            indexSpecs?: ReturnType<typeof IndexSpecs.prototype.toObject>;
        }): GetExistingTransactionIndexesResponse {
            const message = new GetExistingTransactionIndexesResponse({});
            if (data.indexSpecs != null) {
                message.indexSpecs = IndexSpecs.fromObject(data.indexSpecs);
            }
            return message;
        }
        toObject() {
            const data: {
                indexSpecs?: ReturnType<typeof IndexSpecs.prototype.toObject>;
            } = {};
            if (this.indexSpecs != null) {
                data.indexSpecs = this.indexSpecs.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_indexSpecs)
                writer.writeMessage(1, this.indexSpecs, () => this.indexSpecs.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExistingTransactionIndexesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExistingTransactionIndexesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.indexSpecs, () => message.indexSpecs = IndexSpecs.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetExistingTransactionIndexesResponse {
            return GetExistingTransactionIndexesResponse.deserialize(bytes);
        }
    }
    export class BlockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: dependency_2.co.topl.proto.models.FullBlock;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_2.co.topl.proto.models.FullBlock, 1) as dependency_2.co.topl.proto.models.FullBlock;
        }
        set block(value: dependency_2.co.topl.proto.models.FullBlock) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_2.co.topl.proto.models.FullBlock.prototype.toObject>;
        }): BlockResponse {
            const message = new BlockResponse({});
            if (data.block != null) {
                message.block = dependency_2.co.topl.proto.models.FullBlock.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_2.co.topl.proto.models.FullBlock.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_2.co.topl.proto.models.FullBlock.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockResponse {
            return BlockResponse.deserialize(bytes);
        }
    }
    export class TransactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactionReceipt?: dependency_4.co.topl.proto.genus.TransactionReceipt;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactionReceipt" in data && data.transactionReceipt != undefined) {
                    this.transactionReceipt = data.transactionReceipt;
                }
            }
        }
        get transactionReceipt() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.TransactionReceipt, 1) as dependency_4.co.topl.proto.genus.TransactionReceipt;
        }
        set transactionReceipt(value: dependency_4.co.topl.proto.genus.TransactionReceipt) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transactionReceipt() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            transactionReceipt?: ReturnType<typeof dependency_4.co.topl.proto.genus.TransactionReceipt.prototype.toObject>;
        }): TransactionResponse {
            const message = new TransactionResponse({});
            if (data.transactionReceipt != null) {
                message.transactionReceipt = dependency_4.co.topl.proto.genus.TransactionReceipt.fromObject(data.transactionReceipt);
            }
            return message;
        }
        toObject() {
            const data: {
                transactionReceipt?: ReturnType<typeof dependency_4.co.topl.proto.genus.TransactionReceipt.prototype.toObject>;
            } = {};
            if (this.transactionReceipt != null) {
                data.transactionReceipt = this.transactionReceipt.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transactionReceipt)
                writer.writeMessage(1, this.transactionReceipt, () => this.transactionReceipt.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactionReceipt, () => message.transactionReceipt = dependency_4.co.topl.proto.genus.TransactionReceipt.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionResponse {
            return TransactionResponse.deserialize(bytes);
        }
    }
    export class TxoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txo?: dependency_4.co.topl.proto.genus.Txo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txo" in data && data.txo != undefined) {
                    this.txo = data.txo;
                }
            }
        }
        get txo() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.Txo, 1) as dependency_4.co.topl.proto.genus.Txo;
        }
        set txo(value: dependency_4.co.topl.proto.genus.Txo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_txo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            txo?: ReturnType<typeof dependency_4.co.topl.proto.genus.Txo.prototype.toObject>;
        }): TxoResponse {
            const message = new TxoResponse({});
            if (data.txo != null) {
                message.txo = dependency_4.co.topl.proto.genus.Txo.fromObject(data.txo);
            }
            return message;
        }
        toObject() {
            const data: {
                txo?: ReturnType<typeof dependency_4.co.topl.proto.genus.Txo.prototype.toObject>;
            } = {};
            if (this.txo != null) {
                data.txo = this.txo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_txo)
                writer.writeMessage(1, this.txo, () => this.txo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TxoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.txo, () => message.txo = dependency_4.co.topl.proto.genus.Txo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TxoResponse {
            return TxoResponse.deserialize(bytes);
        }
    }
    export class GetBlockByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blockId?: dependency_3.co.topl.proto.models.BlockId;
            confidenceFactor?: dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blockId" in data && data.blockId != undefined) {
                    this.blockId = data.blockId;
                }
                if ("confidenceFactor" in data && data.confidenceFactor != undefined) {
                    this.confidenceFactor = data.confidenceFactor;
                }
            }
        }
        get blockId() {
            return pb_1.Message.getWrapperField(this, dependency_3.co.topl.proto.models.BlockId, 1) as dependency_3.co.topl.proto.models.BlockId;
        }
        set blockId(value: dependency_3.co.topl.proto.models.BlockId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_blockId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get confidenceFactor() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.ConfidenceFactor, 2) as dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }
        set confidenceFactor(value: dependency_4.co.topl.proto.genus.ConfidenceFactor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_confidenceFactor() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            blockId?: ReturnType<typeof dependency_3.co.topl.proto.models.BlockId.prototype.toObject>;
            confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
        }): GetBlockByIdRequest {
            const message = new GetBlockByIdRequest({});
            if (data.blockId != null) {
                message.blockId = dependency_3.co.topl.proto.models.BlockId.fromObject(data.blockId);
            }
            if (data.confidenceFactor != null) {
                message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.fromObject(data.confidenceFactor);
            }
            return message;
        }
        toObject() {
            const data: {
                blockId?: ReturnType<typeof dependency_3.co.topl.proto.models.BlockId.prototype.toObject>;
                confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
            } = {};
            if (this.blockId != null) {
                data.blockId = this.blockId.toObject();
            }
            if (this.confidenceFactor != null) {
                data.confidenceFactor = this.confidenceFactor.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_blockId)
                writer.writeMessage(1, this.blockId, () => this.blockId.serialize(writer));
            if (this.has_confidenceFactor)
                writer.writeMessage(2, this.confidenceFactor, () => this.confidenceFactor.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.blockId, () => message.blockId = dependency_3.co.topl.proto.models.BlockId.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.confidenceFactor, () => message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByIdRequest {
            return GetBlockByIdRequest.deserialize(bytes);
        }
    }
    export class GetBlockByHeightRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: dependency_4.co.topl.proto.genus.ChainDistance;
            confidenceFactor?: dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("confidenceFactor" in data && data.confidenceFactor != undefined) {
                    this.confidenceFactor = data.confidenceFactor;
                }
            }
        }
        get height() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.ChainDistance, 1) as dependency_4.co.topl.proto.genus.ChainDistance;
        }
        set height(value: dependency_4.co.topl.proto.genus.ChainDistance) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_height() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get confidenceFactor() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.ConfidenceFactor, 2) as dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }
        set confidenceFactor(value: dependency_4.co.topl.proto.genus.ConfidenceFactor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_confidenceFactor() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            height?: ReturnType<typeof dependency_4.co.topl.proto.genus.ChainDistance.prototype.toObject>;
            confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
        }): GetBlockByHeightRequest {
            const message = new GetBlockByHeightRequest({});
            if (data.height != null) {
                message.height = dependency_4.co.topl.proto.genus.ChainDistance.fromObject(data.height);
            }
            if (data.confidenceFactor != null) {
                message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.fromObject(data.confidenceFactor);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: ReturnType<typeof dependency_4.co.topl.proto.genus.ChainDistance.prototype.toObject>;
                confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height.toObject();
            }
            if (this.confidenceFactor != null) {
                data.confidenceFactor = this.confidenceFactor.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_height)
                writer.writeMessage(1, this.height, () => this.height.serialize(writer));
            if (this.has_confidenceFactor)
                writer.writeMessage(2, this.confidenceFactor, () => this.confidenceFactor.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.height, () => message.height = dependency_4.co.topl.proto.genus.ChainDistance.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.confidenceFactor, () => message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByHeightRequest {
            return GetBlockByHeightRequest.deserialize(bytes);
        }
    }
    export class GetBlockByDepthRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            depth?: dependency_4.co.topl.proto.genus.ChainDistance;
            confidenceFactor?: dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("depth" in data && data.depth != undefined) {
                    this.depth = data.depth;
                }
                if ("confidenceFactor" in data && data.confidenceFactor != undefined) {
                    this.confidenceFactor = data.confidenceFactor;
                }
            }
        }
        get depth() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.ChainDistance, 1) as dependency_4.co.topl.proto.genus.ChainDistance;
        }
        set depth(value: dependency_4.co.topl.proto.genus.ChainDistance) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_depth() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get confidenceFactor() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.ConfidenceFactor, 2) as dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }
        set confidenceFactor(value: dependency_4.co.topl.proto.genus.ConfidenceFactor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_confidenceFactor() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            depth?: ReturnType<typeof dependency_4.co.topl.proto.genus.ChainDistance.prototype.toObject>;
            confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
        }): GetBlockByDepthRequest {
            const message = new GetBlockByDepthRequest({});
            if (data.depth != null) {
                message.depth = dependency_4.co.topl.proto.genus.ChainDistance.fromObject(data.depth);
            }
            if (data.confidenceFactor != null) {
                message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.fromObject(data.confidenceFactor);
            }
            return message;
        }
        toObject() {
            const data: {
                depth?: ReturnType<typeof dependency_4.co.topl.proto.genus.ChainDistance.prototype.toObject>;
                confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
            } = {};
            if (this.depth != null) {
                data.depth = this.depth.toObject();
            }
            if (this.confidenceFactor != null) {
                data.confidenceFactor = this.confidenceFactor.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_depth)
                writer.writeMessage(1, this.depth, () => this.depth.serialize(writer));
            if (this.has_confidenceFactor)
                writer.writeMessage(2, this.confidenceFactor, () => this.confidenceFactor.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByDepthRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByDepthRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.depth, () => message.depth = dependency_4.co.topl.proto.genus.ChainDistance.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.confidenceFactor, () => message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByDepthRequest {
            return GetBlockByDepthRequest.deserialize(bytes);
        }
    }
    export class GetTransactionByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactionId?: dependency_3.co.topl.proto.models.TransactionId;
            confidenceFactor?: dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactionId" in data && data.transactionId != undefined) {
                    this.transactionId = data.transactionId;
                }
                if ("confidenceFactor" in data && data.confidenceFactor != undefined) {
                    this.confidenceFactor = data.confidenceFactor;
                }
            }
        }
        get transactionId() {
            return pb_1.Message.getWrapperField(this, dependency_3.co.topl.proto.models.TransactionId, 1) as dependency_3.co.topl.proto.models.TransactionId;
        }
        set transactionId(value: dependency_3.co.topl.proto.models.TransactionId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transactionId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get confidenceFactor() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.ConfidenceFactor, 2) as dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }
        set confidenceFactor(value: dependency_4.co.topl.proto.genus.ConfidenceFactor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_confidenceFactor() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            transactionId?: ReturnType<typeof dependency_3.co.topl.proto.models.TransactionId.prototype.toObject>;
            confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
        }): GetTransactionByIdRequest {
            const message = new GetTransactionByIdRequest({});
            if (data.transactionId != null) {
                message.transactionId = dependency_3.co.topl.proto.models.TransactionId.fromObject(data.transactionId);
            }
            if (data.confidenceFactor != null) {
                message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.fromObject(data.confidenceFactor);
            }
            return message;
        }
        toObject() {
            const data: {
                transactionId?: ReturnType<typeof dependency_3.co.topl.proto.models.TransactionId.prototype.toObject>;
                confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
            } = {};
            if (this.transactionId != null) {
                data.transactionId = this.transactionId.toObject();
            }
            if (this.confidenceFactor != null) {
                data.confidenceFactor = this.confidenceFactor.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transactionId)
                writer.writeMessage(1, this.transactionId, () => this.transactionId.serialize(writer));
            if (this.has_confidenceFactor)
                writer.writeMessage(2, this.confidenceFactor, () => this.confidenceFactor.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactionId, () => message.transactionId = dependency_3.co.topl.proto.models.TransactionId.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.confidenceFactor, () => message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionByIdRequest {
            return GetTransactionByIdRequest.deserialize(bytes);
        }
    }
    export class CreateOnChainTransactionIndexResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ok?: boolean;
        }): CreateOnChainTransactionIndexResponse {
            const message = new CreateOnChainTransactionIndexResponse({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOnChainTransactionIndexResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOnChainTransactionIndexResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOnChainTransactionIndexResponse {
            return CreateOnChainTransactionIndexResponse.deserialize(bytes);
        }
    }
    export class QueryByAddressRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            addresses?: dependency_1.co.topl.proto.models.SpendingAddress[];
            confidenceFactor?: dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("addresses" in data && data.addresses != undefined) {
                    this.addresses = data.addresses;
                }
                if ("confidenceFactor" in data && data.confidenceFactor != undefined) {
                    this.confidenceFactor = data.confidenceFactor;
                }
            }
        }
        get addresses() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.co.topl.proto.models.SpendingAddress, 1) as dependency_1.co.topl.proto.models.SpendingAddress[];
        }
        set addresses(value: dependency_1.co.topl.proto.models.SpendingAddress[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get confidenceFactor() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.ConfidenceFactor, 2) as dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }
        set confidenceFactor(value: dependency_4.co.topl.proto.genus.ConfidenceFactor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_confidenceFactor() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            addresses?: ReturnType<typeof dependency_1.co.topl.proto.models.SpendingAddress.prototype.toObject>[];
            confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
        }): QueryByAddressRequest {
            const message = new QueryByAddressRequest({});
            if (data.addresses != null) {
                message.addresses = data.addresses.map(item => dependency_1.co.topl.proto.models.SpendingAddress.fromObject(item));
            }
            if (data.confidenceFactor != null) {
                message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.fromObject(data.confidenceFactor);
            }
            return message;
        }
        toObject() {
            const data: {
                addresses?: ReturnType<typeof dependency_1.co.topl.proto.models.SpendingAddress.prototype.toObject>[];
                confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
            } = {};
            if (this.addresses != null) {
                data.addresses = this.addresses.map((item: dependency_1.co.topl.proto.models.SpendingAddress) => item.toObject());
            }
            if (this.confidenceFactor != null) {
                data.confidenceFactor = this.confidenceFactor.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.addresses.length)
                writer.writeRepeatedMessage(1, this.addresses, (item: dependency_1.co.topl.proto.models.SpendingAddress) => item.serialize(writer));
            if (this.has_confidenceFactor)
                writer.writeMessage(2, this.confidenceFactor, () => this.confidenceFactor.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryByAddressRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryByAddressRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.addresses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.co.topl.proto.models.SpendingAddress.deserialize(reader), dependency_1.co.topl.proto.models.SpendingAddress));
                        break;
                    case 2:
                        reader.readMessage(message.confidenceFactor, () => message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryByAddressRequest {
            return QueryByAddressRequest.deserialize(bytes);
        }
    }
    export class QueryByAssetLabelRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assetLabel?: dependency_4.co.topl.proto.genus.AssetLabel;
            confidenceFactor?: dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assetLabel" in data && data.assetLabel != undefined) {
                    this.assetLabel = data.assetLabel;
                }
                if ("confidenceFactor" in data && data.confidenceFactor != undefined) {
                    this.confidenceFactor = data.confidenceFactor;
                }
            }
        }
        get assetLabel() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.AssetLabel, 1) as dependency_4.co.topl.proto.genus.AssetLabel;
        }
        set assetLabel(value: dependency_4.co.topl.proto.genus.AssetLabel) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_assetLabel() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get confidenceFactor() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.ConfidenceFactor, 2) as dependency_4.co.topl.proto.genus.ConfidenceFactor;
        }
        set confidenceFactor(value: dependency_4.co.topl.proto.genus.ConfidenceFactor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_confidenceFactor() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            assetLabel?: ReturnType<typeof dependency_4.co.topl.proto.genus.AssetLabel.prototype.toObject>;
            confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
        }): QueryByAssetLabelRequest {
            const message = new QueryByAssetLabelRequest({});
            if (data.assetLabel != null) {
                message.assetLabel = dependency_4.co.topl.proto.genus.AssetLabel.fromObject(data.assetLabel);
            }
            if (data.confidenceFactor != null) {
                message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.fromObject(data.confidenceFactor);
            }
            return message;
        }
        toObject() {
            const data: {
                assetLabel?: ReturnType<typeof dependency_4.co.topl.proto.genus.AssetLabel.prototype.toObject>;
                confidenceFactor?: ReturnType<typeof dependency_4.co.topl.proto.genus.ConfidenceFactor.prototype.toObject>;
            } = {};
            if (this.assetLabel != null) {
                data.assetLabel = this.assetLabel.toObject();
            }
            if (this.confidenceFactor != null) {
                data.confidenceFactor = this.confidenceFactor.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_assetLabel)
                writer.writeMessage(1, this.assetLabel, () => this.assetLabel.serialize(writer));
            if (this.has_confidenceFactor)
                writer.writeMessage(2, this.confidenceFactor, () => this.confidenceFactor.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryByAssetLabelRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryByAssetLabelRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.assetLabel, () => message.assetLabel = dependency_4.co.topl.proto.genus.AssetLabel.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.confidenceFactor, () => message.confidenceFactor = dependency_4.co.topl.proto.genus.ConfidenceFactor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryByAssetLabelRequest {
            return QueryByAssetLabelRequest.deserialize(bytes);
        }
    }
    export class TxoAddressResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            addressesToTxos?: Map<string, dependency_4.co.topl.proto.genus.Txo>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("addressesToTxos" in data && data.addressesToTxos != undefined) {
                    this.addressesToTxos = data.addressesToTxos;
                }
            }
            if (!this.addressesToTxos)
                this.addressesToTxos = new Map();
        }
        get addressesToTxos() {
            return pb_1.Message.getField(this, 1) as any as Map<string, dependency_4.co.topl.proto.genus.Txo>;
        }
        set addressesToTxos(value: Map<string, dependency_4.co.topl.proto.genus.Txo>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            addressesToTxos?: {
                [key: string]: ReturnType<typeof dependency_4.co.topl.proto.genus.Txo.prototype.toObject>;
            };
        }): TxoAddressResponse {
            const message = new TxoAddressResponse({});
            if (typeof data.addressesToTxos == "object") {
                message.addressesToTxos = new Map(Object.entries(data.addressesToTxos).map(([key, value]) => [key, dependency_4.co.topl.proto.genus.Txo.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                addressesToTxos?: {
                    [key: string]: ReturnType<typeof dependency_4.co.topl.proto.genus.Txo.prototype.toObject>;
                };
            } = {};
            if (this.addressesToTxos != null) {
                data.addressesToTxos = (Object.fromEntries)((Array.from)(this.addressesToTxos).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.addressesToTxos) {
                writer.writeMessage(1, this.addressesToTxos, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TxoAddressResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxoAddressResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.addressesToTxos as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_4.co.topl.proto.genus.Txo.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TxoAddressResponse {
            return TxoAddressResponse.deserialize(bytes);
        }
    }
    export namespace TxoAddressResponse {
        export class Txos extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                txo?: dependency_4.co.topl.proto.genus.Txo[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("txo" in data && data.txo != undefined) {
                        this.txo = data.txo;
                    }
                }
            }
            get txo() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_4.co.topl.proto.genus.Txo, 1) as dependency_4.co.topl.proto.genus.Txo[];
            }
            set txo(value: dependency_4.co.topl.proto.genus.Txo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                txo?: ReturnType<typeof dependency_4.co.topl.proto.genus.Txo.prototype.toObject>[];
            }): Txos {
                const message = new Txos({});
                if (data.txo != null) {
                    message.txo = data.txo.map(item => dependency_4.co.topl.proto.genus.Txo.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    txo?: ReturnType<typeof dependency_4.co.topl.proto.genus.Txo.prototype.toObject>[];
                } = {};
                if (this.txo != null) {
                    data.txo = this.txo.map((item: dependency_4.co.topl.proto.genus.Txo) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.txo.length)
                    writer.writeRepeatedMessage(1, this.txo, (item: dependency_4.co.topl.proto.genus.Txo) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Txos {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Txos();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.txo, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.co.topl.proto.genus.Txo.deserialize(reader), dependency_4.co.topl.proto.genus.Txo));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Txos {
                return Txos.deserialize(bytes);
            }
        }
    }
    export class CreateOnChainTransactionIndexRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indexSpec?: dependency_4.co.topl.proto.genus.IndexSpec;
            populate?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indexSpec" in data && data.indexSpec != undefined) {
                    this.indexSpec = data.indexSpec;
                }
                if ("populate" in data && data.populate != undefined) {
                    this.populate = data.populate;
                }
            }
        }
        get indexSpec() {
            return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.genus.IndexSpec, 1) as dependency_4.co.topl.proto.genus.IndexSpec;
        }
        set indexSpec(value: dependency_4.co.topl.proto.genus.IndexSpec) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_indexSpec() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get populate() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set populate(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            indexSpec?: ReturnType<typeof dependency_4.co.topl.proto.genus.IndexSpec.prototype.toObject>;
            populate?: boolean;
        }): CreateOnChainTransactionIndexRequest {
            const message = new CreateOnChainTransactionIndexRequest({});
            if (data.indexSpec != null) {
                message.indexSpec = dependency_4.co.topl.proto.genus.IndexSpec.fromObject(data.indexSpec);
            }
            if (data.populate != null) {
                message.populate = data.populate;
            }
            return message;
        }
        toObject() {
            const data: {
                indexSpec?: ReturnType<typeof dependency_4.co.topl.proto.genus.IndexSpec.prototype.toObject>;
                populate?: boolean;
            } = {};
            if (this.indexSpec != null) {
                data.indexSpec = this.indexSpec.toObject();
            }
            if (this.populate != null) {
                data.populate = this.populate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_indexSpec)
                writer.writeMessage(1, this.indexSpec, () => this.indexSpec.serialize(writer));
            if (this.populate != false)
                writer.writeBool(2, this.populate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOnChainTransactionIndexRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOnChainTransactionIndexRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.indexSpec, () => message.indexSpec = dependency_4.co.topl.proto.genus.IndexSpec.deserialize(reader));
                        break;
                    case 2:
                        message.populate = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOnChainTransactionIndexRequest {
            return CreateOnChainTransactionIndexRequest.deserialize(bytes);
        }
    }
    export class IndexSpecs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indexSpec?: dependency_4.co.topl.proto.genus.IndexSpec[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indexSpec" in data && data.indexSpec != undefined) {
                    this.indexSpec = data.indexSpec;
                }
            }
        }
        get indexSpec() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.co.topl.proto.genus.IndexSpec, 1) as dependency_4.co.topl.proto.genus.IndexSpec[];
        }
        set indexSpec(value: dependency_4.co.topl.proto.genus.IndexSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            indexSpec?: ReturnType<typeof dependency_4.co.topl.proto.genus.IndexSpec.prototype.toObject>[];
        }): IndexSpecs {
            const message = new IndexSpecs({});
            if (data.indexSpec != null) {
                message.indexSpec = data.indexSpec.map(item => dependency_4.co.topl.proto.genus.IndexSpec.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                indexSpec?: ReturnType<typeof dependency_4.co.topl.proto.genus.IndexSpec.prototype.toObject>[];
            } = {};
            if (this.indexSpec != null) {
                data.indexSpec = this.indexSpec.map((item: dependency_4.co.topl.proto.genus.IndexSpec) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.indexSpec.length)
                writer.writeRepeatedMessage(1, this.indexSpec, (item: dependency_4.co.topl.proto.genus.IndexSpec) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexSpecs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexSpecs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.indexSpec, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.co.topl.proto.genus.IndexSpec.deserialize(reader), dependency_4.co.topl.proto.genus.IndexSpec));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexSpecs {
            return IndexSpecs.deserialize(bytes);
        }
    }
    export class IndexDef extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            onChain?: CreateOnChainTransactionIndexRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onChain" in data && data.onChain != undefined) {
                    this.onChain = data.onChain;
                }
            }
        }
        get onChain() {
            return pb_1.Message.getWrapperField(this, CreateOnChainTransactionIndexRequest, 1) as CreateOnChainTransactionIndexRequest;
        }
        set onChain(value: CreateOnChainTransactionIndexRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_onChain() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get xdev() {
            const cases: {
                [index: number]: "none" | "onChain";
            } = {
                0: "none",
                1: "onChain"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            onChain?: ReturnType<typeof CreateOnChainTransactionIndexRequest.prototype.toObject>;
        }): IndexDef {
            const message = new IndexDef({});
            if (data.onChain != null) {
                message.onChain = CreateOnChainTransactionIndexRequest.fromObject(data.onChain);
            }
            return message;
        }
        toObject() {
            const data: {
                onChain?: ReturnType<typeof CreateOnChainTransactionIndexRequest.prototype.toObject>;
            } = {};
            if (this.onChain != null) {
                data.onChain = this.onChain.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_onChain)
                writer.writeMessage(1, this.onChain, () => this.onChain.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexDef {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexDef();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.onChain, () => message.onChain = CreateOnChainTransactionIndexRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexDef {
            return IndexDef.deserialize(bytes);
        }
    }
    export class GetExistingTransactionIndexesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetExistingTransactionIndexesRequest {
            const message = new GetExistingTransactionIndexesRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExistingTransactionIndexesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExistingTransactionIndexesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetExistingTransactionIndexesRequest {
            return GetExistingTransactionIndexesRequest.deserialize(bytes);
        }
    }
    export class DropIndexRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indexName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indexName" in data && data.indexName != undefined) {
                    this.indexName = data.indexName;
                }
            }
        }
        get indexName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set indexName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            indexName?: string;
        }): DropIndexRequest {
            const message = new DropIndexRequest({});
            if (data.indexName != null) {
                message.indexName = data.indexName;
            }
            return message;
        }
        toObject() {
            const data: {
                indexName?: string;
            } = {};
            if (this.indexName != null) {
                data.indexName = this.indexName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.indexName.length)
                writer.writeString(1, this.indexName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropIndexRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropIndexRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.indexName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropIndexRequest {
            return DropIndexRequest.deserialize(bytes);
        }
    }
    export class DropIndexResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dropped?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dropped" in data && data.dropped != undefined) {
                    this.dropped = data.dropped;
                }
            }
        }
        get dropped() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set dropped(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            dropped?: boolean;
        }): DropIndexResponse {
            const message = new DropIndexResponse({});
            if (data.dropped != null) {
                message.dropped = data.dropped;
            }
            return message;
        }
        toObject() {
            const data: {
                dropped?: boolean;
            } = {};
            if (this.dropped != null) {
                data.dropped = this.dropped;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dropped != false)
                writer.writeBool(1, this.dropped);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropIndexResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropIndexResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dropped = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropIndexResponse {
            return DropIndexResponse.deserialize(bytes);
        }
    }
    export class GetIndexedTransactionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indexName?: string;
            value?: IndexMatchValue[];
            maxResults?: number;
            skipResults?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indexName" in data && data.indexName != undefined) {
                    this.indexName = data.indexName;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("maxResults" in data && data.maxResults != undefined) {
                    this.maxResults = data.maxResults;
                }
                if ("skipResults" in data && data.skipResults != undefined) {
                    this.skipResults = data.skipResults;
                }
            }
        }
        get indexName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set indexName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getRepeatedWrapperField(this, IndexMatchValue, 2) as IndexMatchValue[];
        }
        set value(value: IndexMatchValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get maxResults() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set maxResults(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get skipResults() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set skipResults(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            indexName?: string;
            value?: ReturnType<typeof IndexMatchValue.prototype.toObject>[];
            maxResults?: number;
            skipResults?: number;
        }): GetIndexedTransactionsRequest {
            const message = new GetIndexedTransactionsRequest({});
            if (data.indexName != null) {
                message.indexName = data.indexName;
            }
            if (data.value != null) {
                message.value = data.value.map(item => IndexMatchValue.fromObject(item));
            }
            if (data.maxResults != null) {
                message.maxResults = data.maxResults;
            }
            if (data.skipResults != null) {
                message.skipResults = data.skipResults;
            }
            return message;
        }
        toObject() {
            const data: {
                indexName?: string;
                value?: ReturnType<typeof IndexMatchValue.prototype.toObject>[];
                maxResults?: number;
                skipResults?: number;
            } = {};
            if (this.indexName != null) {
                data.indexName = this.indexName;
            }
            if (this.value != null) {
                data.value = this.value.map((item: IndexMatchValue) => item.toObject());
            }
            if (this.maxResults != null) {
                data.maxResults = this.maxResults;
            }
            if (this.skipResults != null) {
                data.skipResults = this.skipResults;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.indexName.length)
                writer.writeString(1, this.indexName);
            if (this.value.length)
                writer.writeRepeatedMessage(2, this.value, (item: IndexMatchValue) => item.serialize(writer));
            if (this.maxResults != 0)
                writer.writeUint32(3, this.maxResults);
            if (this.skipResults != 0)
                writer.writeUint64(4, this.skipResults);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetIndexedTransactionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetIndexedTransactionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.indexName = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.value, () => pb_1.Message.addToRepeatedWrapperField(message, 2, IndexMatchValue.deserialize(reader), IndexMatchValue));
                        break;
                    case 3:
                        message.maxResults = reader.readUint32();
                        break;
                    case 4:
                        message.skipResults = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetIndexedTransactionsRequest {
            return GetIndexedTransactionsRequest.deserialize(bytes);
        }
    }
    export class IndexMatchValue extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({
            fieldName?: string;
        } & (({
            stringValue?: string;
            intValue?: never;
            uintValue?: never;
        } | {
            stringValue?: never;
            intValue?: number;
            uintValue?: never;
        } | {
            stringValue?: never;
            intValue?: never;
            uintValue?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stringValue" in data && data.stringValue != undefined) {
                    this.stringValue = data.stringValue;
                }
                if ("intValue" in data && data.intValue != undefined) {
                    this.intValue = data.intValue;
                }
                if ("uintValue" in data && data.uintValue != undefined) {
                    this.uintValue = data.uintValue;
                }
                if ("fieldName" in data && data.fieldName != undefined) {
                    this.fieldName = data.fieldName;
                }
            }
        }
        get stringValue() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stringValue(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_stringValue() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get intValue() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set intValue(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_intValue() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get uintValue() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uintValue(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_uintValue() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get fieldName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set fieldName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get value() {
            const cases: {
                [index: number]: "none" | "stringValue" | "intValue" | "uintValue";
            } = {
                0: "none",
                1: "stringValue",
                2: "intValue",
                3: "uintValue"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            stringValue?: string;
            intValue?: number;
            uintValue?: number;
            fieldName?: string;
        }): IndexMatchValue {
            const message = new IndexMatchValue({});
            if (data.stringValue != null) {
                message.stringValue = data.stringValue;
            }
            if (data.intValue != null) {
                message.intValue = data.intValue;
            }
            if (data.uintValue != null) {
                message.uintValue = data.uintValue;
            }
            if (data.fieldName != null) {
                message.fieldName = data.fieldName;
            }
            return message;
        }
        toObject() {
            const data: {
                stringValue?: string;
                intValue?: number;
                uintValue?: number;
                fieldName?: string;
            } = {};
            if (this.stringValue != null) {
                data.stringValue = this.stringValue;
            }
            if (this.intValue != null) {
                data.intValue = this.intValue;
            }
            if (this.uintValue != null) {
                data.uintValue = this.uintValue;
            }
            if (this.fieldName != null) {
                data.fieldName = this.fieldName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stringValue)
                writer.writeString(1, this.stringValue);
            if (this.has_intValue)
                writer.writeInt64(2, this.intValue);
            if (this.has_uintValue)
                writer.writeUint64(3, this.uintValue);
            if (this.fieldName.length)
                writer.writeString(4, this.fieldName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexMatchValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexMatchValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stringValue = reader.readString();
                        break;
                    case 2:
                        message.intValue = reader.readInt64();
                        break;
                    case 3:
                        message.uintValue = reader.readUint64();
                        break;
                    case 4:
                        message.fieldName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexMatchValue {
            return IndexMatchValue.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGenusFullBlockServiceService {
        static definition = {
            getBlockById: {
                path: "/co.topl.proto.genus.GenusFullBlockService/getBlockById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockResponse.deserialize(new Uint8Array(bytes))
            },
            getBlockByHeight: {
                path: "/co.topl.proto.genus.GenusFullBlockService/getBlockByHeight",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockByHeightRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockByHeightRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockResponse.deserialize(new Uint8Array(bytes))
            },
            getBlockByDepth: {
                path: "/co.topl.proto.genus.GenusFullBlockService/getBlockByDepth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockByDepthRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockByDepthRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getBlockById(call: grpc_1.ServerUnaryCall<GetBlockByIdRequest, BlockResponse>, callback: grpc_1.sendUnaryData<BlockResponse>): void;
        abstract getBlockByHeight(call: grpc_1.ServerUnaryCall<GetBlockByHeightRequest, BlockResponse>, callback: grpc_1.sendUnaryData<BlockResponse>): void;
        abstract getBlockByDepth(call: grpc_1.ServerUnaryCall<GetBlockByDepthRequest, BlockResponse>, callback: grpc_1.sendUnaryData<BlockResponse>): void;
    }
    export class GenusFullBlockServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGenusFullBlockServiceService.definition, "GenusFullBlockService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getBlockById: GrpcUnaryServiceInterface<GetBlockByIdRequest, BlockResponse> = (message: GetBlockByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, callback?: grpc_1.requestCallback<BlockResponse>): grpc_1.ClientUnaryCall => {
            return super.getBlockById(message, metadata, options, callback);
        };
        getBlockByHeight: GrpcUnaryServiceInterface<GetBlockByHeightRequest, BlockResponse> = (message: GetBlockByHeightRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, callback?: grpc_1.requestCallback<BlockResponse>): grpc_1.ClientUnaryCall => {
            return super.getBlockByHeight(message, metadata, options, callback);
        };
        getBlockByDepth: GrpcUnaryServiceInterface<GetBlockByDepthRequest, BlockResponse> = (message: GetBlockByDepthRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, callback?: grpc_1.requestCallback<BlockResponse>): grpc_1.ClientUnaryCall => {
            return super.getBlockByDepth(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedTransactionServiceService {
        static definition = {
            getTransactionById: {
                path: "/co.topl.proto.genus.TransactionService/getTransactionById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionResponse.deserialize(new Uint8Array(bytes))
            },
            getTransactionByAddressStream: {
                path: "/co.topl.proto.genus.TransactionService/getTransactionByAddressStream",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: QueryByAddressRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryByAddressRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionResponse.deserialize(new Uint8Array(bytes))
            },
            getTxosByAddress: {
                path: "/co.topl.proto.genus.TransactionService/getTxosByAddress",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryByAddressRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryByAddressRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TxoAddressResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TxoAddressResponse.deserialize(new Uint8Array(bytes))
            },
            getTxosByAddressStream: {
                path: "/co.topl.proto.genus.TransactionService/getTxosByAddressStream",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: QueryByAddressRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryByAddressRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TxoAddressResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TxoAddressResponse.deserialize(new Uint8Array(bytes))
            },
            getTxosByAssetLabel: {
                path: "/co.topl.proto.genus.TransactionService/getTxosByAssetLabel",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: QueryByAssetLabelRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryByAssetLabelRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TxoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TxoResponse.deserialize(new Uint8Array(bytes))
            },
            createOnChainTransactionIndex: {
                path: "/co.topl.proto.genus.TransactionService/createOnChainTransactionIndex",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateOnChainTransactionIndexRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateOnChainTransactionIndexRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateOnChainTransactionIndexResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateOnChainTransactionIndexResponse.deserialize(new Uint8Array(bytes))
            },
            getExistingTransactionIndexes: {
                path: "/co.topl.proto.genus.TransactionService/getExistingTransactionIndexes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetExistingTransactionIndexesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetExistingTransactionIndexesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetExistingTransactionIndexesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetExistingTransactionIndexesResponse.deserialize(new Uint8Array(bytes))
            },
            getIndexedTransactions: {
                path: "/co.topl.proto.genus.TransactionService/getIndexedTransactions",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetIndexedTransactionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetIndexedTransactionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionResponse.deserialize(new Uint8Array(bytes))
            },
            dropIndex: {
                path: "/co.topl.proto.genus.TransactionService/dropIndex",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DropIndexRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DropIndexRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DropIndexResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DropIndexResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getTransactionById(call: grpc_1.ServerUnaryCall<GetTransactionByIdRequest, TransactionResponse>, callback: grpc_1.sendUnaryData<TransactionResponse>): void;
        abstract getTransactionByAddressStream(call: grpc_1.ServerWritableStream<QueryByAddressRequest, TransactionResponse>): void;
        abstract getTxosByAddress(call: grpc_1.ServerUnaryCall<QueryByAddressRequest, TxoAddressResponse>, callback: grpc_1.sendUnaryData<TxoAddressResponse>): void;
        abstract getTxosByAddressStream(call: grpc_1.ServerWritableStream<QueryByAddressRequest, TxoAddressResponse>): void;
        abstract getTxosByAssetLabel(call: grpc_1.ServerWritableStream<QueryByAssetLabelRequest, TxoResponse>): void;
        abstract createOnChainTransactionIndex(call: grpc_1.ServerUnaryCall<CreateOnChainTransactionIndexRequest, CreateOnChainTransactionIndexResponse>, callback: grpc_1.sendUnaryData<CreateOnChainTransactionIndexResponse>): void;
        abstract getExistingTransactionIndexes(call: grpc_1.ServerUnaryCall<GetExistingTransactionIndexesRequest, GetExistingTransactionIndexesResponse>, callback: grpc_1.sendUnaryData<GetExistingTransactionIndexesResponse>): void;
        abstract getIndexedTransactions(call: grpc_1.ServerWritableStream<GetIndexedTransactionsRequest, TransactionResponse>): void;
        abstract dropIndex(call: grpc_1.ServerUnaryCall<DropIndexRequest, DropIndexResponse>, callback: grpc_1.sendUnaryData<DropIndexResponse>): void;
    }
    export class TransactionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTransactionServiceService.definition, "TransactionService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getTransactionById: GrpcUnaryServiceInterface<GetTransactionByIdRequest, TransactionResponse> = (message: GetTransactionByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionResponse>, callback?: grpc_1.requestCallback<TransactionResponse>): grpc_1.ClientUnaryCall => {
            return super.getTransactionById(message, metadata, options, callback);
        };
        getTransactionByAddressStream: GrpcStreamServiceInterface<QueryByAddressRequest, QueryByAddressRequest> = (message: QueryByAddressRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<QueryByAddressRequest> => {
            return super.getTransactionByAddressStream(message, metadata, options);
        };
        getTxosByAddress: GrpcUnaryServiceInterface<QueryByAddressRequest, TxoAddressResponse> = (message: QueryByAddressRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TxoAddressResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TxoAddressResponse>, callback?: grpc_1.requestCallback<TxoAddressResponse>): grpc_1.ClientUnaryCall => {
            return super.getTxosByAddress(message, metadata, options, callback);
        };
        getTxosByAddressStream: GrpcStreamServiceInterface<QueryByAddressRequest, QueryByAddressRequest> = (message: QueryByAddressRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<QueryByAddressRequest> => {
            return super.getTxosByAddressStream(message, metadata, options);
        };
        getTxosByAssetLabel: GrpcStreamServiceInterface<QueryByAssetLabelRequest, QueryByAssetLabelRequest> = (message: QueryByAssetLabelRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<QueryByAssetLabelRequest> => {
            return super.getTxosByAssetLabel(message, metadata, options);
        };
        createOnChainTransactionIndex: GrpcUnaryServiceInterface<CreateOnChainTransactionIndexRequest, CreateOnChainTransactionIndexResponse> = (message: CreateOnChainTransactionIndexRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateOnChainTransactionIndexResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateOnChainTransactionIndexResponse>, callback?: grpc_1.requestCallback<CreateOnChainTransactionIndexResponse>): grpc_1.ClientUnaryCall => {
            return super.createOnChainTransactionIndex(message, metadata, options, callback);
        };
        getExistingTransactionIndexes: GrpcUnaryServiceInterface<GetExistingTransactionIndexesRequest, GetExistingTransactionIndexesResponse> = (message: GetExistingTransactionIndexesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetExistingTransactionIndexesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetExistingTransactionIndexesResponse>, callback?: grpc_1.requestCallback<GetExistingTransactionIndexesResponse>): grpc_1.ClientUnaryCall => {
            return super.getExistingTransactionIndexes(message, metadata, options, callback);
        };
        getIndexedTransactions: GrpcStreamServiceInterface<GetIndexedTransactionsRequest, GetIndexedTransactionsRequest> = (message: GetIndexedTransactionsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GetIndexedTransactionsRequest> => {
            return super.getIndexedTransactions(message, metadata, options);
        };
        dropIndex: GrpcUnaryServiceInterface<DropIndexRequest, DropIndexResponse> = (message: DropIndexRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DropIndexResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DropIndexResponse>, callback?: grpc_1.requestCallback<DropIndexResponse>): grpc_1.ClientUnaryCall => {
            return super.dropIndex(message, metadata, options, callback);
        };
    }
}
