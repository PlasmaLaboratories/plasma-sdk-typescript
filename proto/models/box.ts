/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: models/box.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as dependency_2 from "./address";
import * as dependency_3 from "./proof";
import * as pb_1 from "google-protobuf";
export namespace co.topl.proto.models {
    export class Box extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            evidence?: dependency_1.co.topl.proto.models.TypedEvidence;
            value?: BoxValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("evidence" in data && data.evidence != undefined) {
                    this.evidence = data.evidence;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get evidence() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.TypedEvidence, 1) as dependency_1.co.topl.proto.models.TypedEvidence;
        }
        set evidence(value: dependency_1.co.topl.proto.models.TypedEvidence) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_evidence() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value() {
            return pb_1.Message.getWrapperField(this, BoxValue, 2) as BoxValue;
        }
        set value(value: BoxValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            evidence?: ReturnType<typeof dependency_1.co.topl.proto.models.TypedEvidence.prototype.toObject>;
            value?: ReturnType<typeof BoxValue.prototype.toObject>;
        }): Box {
            const message = new Box({});
            if (data.evidence != null) {
                message.evidence = dependency_1.co.topl.proto.models.TypedEvidence.fromObject(data.evidence);
            }
            if (data.value != null) {
                message.value = BoxValue.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                evidence?: ReturnType<typeof dependency_1.co.topl.proto.models.TypedEvidence.prototype.toObject>;
                value?: ReturnType<typeof BoxValue.prototype.toObject>;
            } = {};
            if (this.evidence != null) {
                data.evidence = this.evidence.toObject();
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_evidence)
                writer.writeMessage(1, this.evidence, () => this.evidence.serialize(writer));
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Box {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Box();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.evidence, () => message.evidence = dependency_1.co.topl.proto.models.TypedEvidence.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = BoxValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Box {
            return Box.deserialize(bytes);
        }
    }
    export namespace Box {
        export class Id extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                transactionId?: dependency_1.co.topl.proto.models.TransactionId;
                transactionOutputIndex?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("transactionId" in data && data.transactionId != undefined) {
                        this.transactionId = data.transactionId;
                    }
                    if ("transactionOutputIndex" in data && data.transactionOutputIndex != undefined) {
                        this.transactionOutputIndex = data.transactionOutputIndex;
                    }
                }
            }
            get transactionId() {
                return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.TransactionId, 1) as dependency_1.co.topl.proto.models.TransactionId;
            }
            set transactionId(value: dependency_1.co.topl.proto.models.TransactionId) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_transactionId() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get transactionOutputIndex() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set transactionOutputIndex(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                transactionId?: ReturnType<typeof dependency_1.co.topl.proto.models.TransactionId.prototype.toObject>;
                transactionOutputIndex?: number;
            }): Id {
                const message = new Id({});
                if (data.transactionId != null) {
                    message.transactionId = dependency_1.co.topl.proto.models.TransactionId.fromObject(data.transactionId);
                }
                if (data.transactionOutputIndex != null) {
                    message.transactionOutputIndex = data.transactionOutputIndex;
                }
                return message;
            }
            toObject() {
                const data: {
                    transactionId?: ReturnType<typeof dependency_1.co.topl.proto.models.TransactionId.prototype.toObject>;
                    transactionOutputIndex?: number;
                } = {};
                if (this.transactionId != null) {
                    data.transactionId = this.transactionId.toObject();
                }
                if (this.transactionOutputIndex != null) {
                    data.transactionOutputIndex = this.transactionOutputIndex;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_transactionId)
                    writer.writeMessage(1, this.transactionId, () => this.transactionId.serialize(writer));
                if (this.transactionOutputIndex != 0)
                    writer.writeInt32(2, this.transactionOutputIndex);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Id {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Id();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.transactionId, () => message.transactionId = dependency_1.co.topl.proto.models.TransactionId.deserialize(reader));
                            break;
                        case 2:
                            message.transactionOutputIndex = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Id {
                return Id.deserialize(bytes);
            }
        }
    }
    export class BoxValue extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            empty?: EmptyBoxValue;
            poly?: never;
            arbit?: never;
            assetV1?: never;
            operatorRegistration?: never;
        } | {
            empty?: never;
            poly?: PolyBoxValue;
            arbit?: never;
            assetV1?: never;
            operatorRegistration?: never;
        } | {
            empty?: never;
            poly?: never;
            arbit?: ArbitBoxValue;
            assetV1?: never;
            operatorRegistration?: never;
        } | {
            empty?: never;
            poly?: never;
            arbit?: never;
            assetV1?: AssetV1BoxValue;
            operatorRegistration?: never;
        } | {
            empty?: never;
            poly?: never;
            arbit?: never;
            assetV1?: never;
            operatorRegistration?: OperatorRegistrationBoxValue;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("empty" in data && data.empty != undefined) {
                    this.empty = data.empty;
                }
                if ("poly" in data && data.poly != undefined) {
                    this.poly = data.poly;
                }
                if ("arbit" in data && data.arbit != undefined) {
                    this.arbit = data.arbit;
                }
                if ("assetV1" in data && data.assetV1 != undefined) {
                    this.assetV1 = data.assetV1;
                }
                if ("operatorRegistration" in data && data.operatorRegistration != undefined) {
                    this.operatorRegistration = data.operatorRegistration;
                }
            }
        }
        get empty() {
            return pb_1.Message.getWrapperField(this, EmptyBoxValue, 1) as EmptyBoxValue;
        }
        set empty(value: EmptyBoxValue) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_empty() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get poly() {
            return pb_1.Message.getWrapperField(this, PolyBoxValue, 2) as PolyBoxValue;
        }
        set poly(value: PolyBoxValue) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_poly() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get arbit() {
            return pb_1.Message.getWrapperField(this, ArbitBoxValue, 3) as ArbitBoxValue;
        }
        set arbit(value: ArbitBoxValue) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_arbit() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get assetV1() {
            return pb_1.Message.getWrapperField(this, AssetV1BoxValue, 4) as AssetV1BoxValue;
        }
        set assetV1(value: AssetV1BoxValue) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_assetV1() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get operatorRegistration() {
            return pb_1.Message.getWrapperField(this, OperatorRegistrationBoxValue, 5) as OperatorRegistrationBoxValue;
        }
        set operatorRegistration(value: OperatorRegistrationBoxValue) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_operatorRegistration() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get sealed_value() {
            const cases: {
                [index: number]: "none" | "empty" | "poly" | "arbit" | "assetV1" | "operatorRegistration";
            } = {
                0: "none",
                1: "empty",
                2: "poly",
                3: "arbit",
                4: "assetV1",
                5: "operatorRegistration"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            empty?: ReturnType<typeof EmptyBoxValue.prototype.toObject>;
            poly?: ReturnType<typeof PolyBoxValue.prototype.toObject>;
            arbit?: ReturnType<typeof ArbitBoxValue.prototype.toObject>;
            assetV1?: ReturnType<typeof AssetV1BoxValue.prototype.toObject>;
            operatorRegistration?: ReturnType<typeof OperatorRegistrationBoxValue.prototype.toObject>;
        }): BoxValue {
            const message = new BoxValue({});
            if (data.empty != null) {
                message.empty = EmptyBoxValue.fromObject(data.empty);
            }
            if (data.poly != null) {
                message.poly = PolyBoxValue.fromObject(data.poly);
            }
            if (data.arbit != null) {
                message.arbit = ArbitBoxValue.fromObject(data.arbit);
            }
            if (data.assetV1 != null) {
                message.assetV1 = AssetV1BoxValue.fromObject(data.assetV1);
            }
            if (data.operatorRegistration != null) {
                message.operatorRegistration = OperatorRegistrationBoxValue.fromObject(data.operatorRegistration);
            }
            return message;
        }
        toObject() {
            const data: {
                empty?: ReturnType<typeof EmptyBoxValue.prototype.toObject>;
                poly?: ReturnType<typeof PolyBoxValue.prototype.toObject>;
                arbit?: ReturnType<typeof ArbitBoxValue.prototype.toObject>;
                assetV1?: ReturnType<typeof AssetV1BoxValue.prototype.toObject>;
                operatorRegistration?: ReturnType<typeof OperatorRegistrationBoxValue.prototype.toObject>;
            } = {};
            if (this.empty != null) {
                data.empty = this.empty.toObject();
            }
            if (this.poly != null) {
                data.poly = this.poly.toObject();
            }
            if (this.arbit != null) {
                data.arbit = this.arbit.toObject();
            }
            if (this.assetV1 != null) {
                data.assetV1 = this.assetV1.toObject();
            }
            if (this.operatorRegistration != null) {
                data.operatorRegistration = this.operatorRegistration.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_empty)
                writer.writeMessage(1, this.empty, () => this.empty.serialize(writer));
            if (this.has_poly)
                writer.writeMessage(2, this.poly, () => this.poly.serialize(writer));
            if (this.has_arbit)
                writer.writeMessage(3, this.arbit, () => this.arbit.serialize(writer));
            if (this.has_assetV1)
                writer.writeMessage(4, this.assetV1, () => this.assetV1.serialize(writer));
            if (this.has_operatorRegistration)
                writer.writeMessage(5, this.operatorRegistration, () => this.operatorRegistration.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoxValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoxValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.empty, () => message.empty = EmptyBoxValue.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.poly, () => message.poly = PolyBoxValue.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.arbit, () => message.arbit = ArbitBoxValue.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.assetV1, () => message.assetV1 = AssetV1BoxValue.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.operatorRegistration, () => message.operatorRegistration = OperatorRegistrationBoxValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoxValue {
            return BoxValue.deserialize(bytes);
        }
    }
    export class EmptyBoxValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): EmptyBoxValue {
            const message = new EmptyBoxValue({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmptyBoxValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmptyBoxValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmptyBoxValue {
            return EmptyBoxValue.deserialize(bytes);
        }
    }
    export class PolyBoxValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quantity?: dependency_1.co.topl.proto.models.Int128;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
            }
        }
        get quantity() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.Int128, 1) as dependency_1.co.topl.proto.models.Int128;
        }
        set quantity(value: dependency_1.co.topl.proto.models.Int128) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_quantity() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            quantity?: ReturnType<typeof dependency_1.co.topl.proto.models.Int128.prototype.toObject>;
        }): PolyBoxValue {
            const message = new PolyBoxValue({});
            if (data.quantity != null) {
                message.quantity = dependency_1.co.topl.proto.models.Int128.fromObject(data.quantity);
            }
            return message;
        }
        toObject() {
            const data: {
                quantity?: ReturnType<typeof dependency_1.co.topl.proto.models.Int128.prototype.toObject>;
            } = {};
            if (this.quantity != null) {
                data.quantity = this.quantity.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_quantity)
                writer.writeMessage(1, this.quantity, () => this.quantity.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PolyBoxValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PolyBoxValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quantity, () => message.quantity = dependency_1.co.topl.proto.models.Int128.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PolyBoxValue {
            return PolyBoxValue.deserialize(bytes);
        }
    }
    export class ArbitBoxValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quantity?: dependency_1.co.topl.proto.models.Int128;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
            }
        }
        get quantity() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.Int128, 1) as dependency_1.co.topl.proto.models.Int128;
        }
        set quantity(value: dependency_1.co.topl.proto.models.Int128) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_quantity() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            quantity?: ReturnType<typeof dependency_1.co.topl.proto.models.Int128.prototype.toObject>;
        }): ArbitBoxValue {
            const message = new ArbitBoxValue({});
            if (data.quantity != null) {
                message.quantity = dependency_1.co.topl.proto.models.Int128.fromObject(data.quantity);
            }
            return message;
        }
        toObject() {
            const data: {
                quantity?: ReturnType<typeof dependency_1.co.topl.proto.models.Int128.prototype.toObject>;
            } = {};
            if (this.quantity != null) {
                data.quantity = this.quantity.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_quantity)
                writer.writeMessage(1, this.quantity, () => this.quantity.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArbitBoxValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArbitBoxValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quantity, () => message.quantity = dependency_1.co.topl.proto.models.Int128.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArbitBoxValue {
            return ArbitBoxValue.deserialize(bytes);
        }
    }
    export class AssetV1BoxValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quantity?: dependency_1.co.topl.proto.models.Int128;
            assetCode?: AssetV1BoxValue.Code;
            securityRoot?: Uint8Array;
            metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("assetCode" in data && data.assetCode != undefined) {
                    this.assetCode = data.assetCode;
                }
                if ("securityRoot" in data && data.securityRoot != undefined) {
                    this.securityRoot = data.securityRoot;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get quantity() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.Int128, 1) as dependency_1.co.topl.proto.models.Int128;
        }
        set quantity(value: dependency_1.co.topl.proto.models.Int128) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_quantity() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get assetCode() {
            return pb_1.Message.getWrapperField(this, AssetV1BoxValue.Code, 2) as AssetV1BoxValue.Code;
        }
        set assetCode(value: AssetV1BoxValue.Code) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_assetCode() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get securityRoot() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set securityRoot(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            quantity?: ReturnType<typeof dependency_1.co.topl.proto.models.Int128.prototype.toObject>;
            assetCode?: ReturnType<typeof AssetV1BoxValue.Code.prototype.toObject>;
            securityRoot?: Uint8Array;
            metadata?: Uint8Array;
        }): AssetV1BoxValue {
            const message = new AssetV1BoxValue({});
            if (data.quantity != null) {
                message.quantity = dependency_1.co.topl.proto.models.Int128.fromObject(data.quantity);
            }
            if (data.assetCode != null) {
                message.assetCode = AssetV1BoxValue.Code.fromObject(data.assetCode);
            }
            if (data.securityRoot != null) {
                message.securityRoot = data.securityRoot;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                quantity?: ReturnType<typeof dependency_1.co.topl.proto.models.Int128.prototype.toObject>;
                assetCode?: ReturnType<typeof AssetV1BoxValue.Code.prototype.toObject>;
                securityRoot?: Uint8Array;
                metadata?: Uint8Array;
            } = {};
            if (this.quantity != null) {
                data.quantity = this.quantity.toObject();
            }
            if (this.assetCode != null) {
                data.assetCode = this.assetCode.toObject();
            }
            if (this.securityRoot != null) {
                data.securityRoot = this.securityRoot;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_quantity)
                writer.writeMessage(1, this.quantity, () => this.quantity.serialize(writer));
            if (this.has_assetCode)
                writer.writeMessage(2, this.assetCode, () => this.assetCode.serialize(writer));
            if (this.securityRoot.length)
                writer.writeBytes(3, this.securityRoot);
            if (this.metadata.length)
                writer.writeBytes(4, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetV1BoxValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetV1BoxValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quantity, () => message.quantity = dependency_1.co.topl.proto.models.Int128.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.assetCode, () => message.assetCode = AssetV1BoxValue.Code.deserialize(reader));
                        break;
                    case 3:
                        message.securityRoot = reader.readBytes();
                        break;
                    case 4:
                        message.metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetV1BoxValue {
            return AssetV1BoxValue.deserialize(bytes);
        }
    }
    export namespace AssetV1BoxValue {
        export class Code extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                issuerAddress?: dependency_2.co.topl.proto.models.SpendingAddress;
                shortName?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("issuerAddress" in data && data.issuerAddress != undefined) {
                        this.issuerAddress = data.issuerAddress;
                    }
                    if ("shortName" in data && data.shortName != undefined) {
                        this.shortName = data.shortName;
                    }
                }
            }
            get issuerAddress() {
                return pb_1.Message.getWrapperField(this, dependency_2.co.topl.proto.models.SpendingAddress, 1) as dependency_2.co.topl.proto.models.SpendingAddress;
            }
            set issuerAddress(value: dependency_2.co.topl.proto.models.SpendingAddress) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_issuerAddress() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get shortName() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set shortName(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                issuerAddress?: ReturnType<typeof dependency_2.co.topl.proto.models.SpendingAddress.prototype.toObject>;
                shortName?: Uint8Array;
            }): Code {
                const message = new Code({});
                if (data.issuerAddress != null) {
                    message.issuerAddress = dependency_2.co.topl.proto.models.SpendingAddress.fromObject(data.issuerAddress);
                }
                if (data.shortName != null) {
                    message.shortName = data.shortName;
                }
                return message;
            }
            toObject() {
                const data: {
                    issuerAddress?: ReturnType<typeof dependency_2.co.topl.proto.models.SpendingAddress.prototype.toObject>;
                    shortName?: Uint8Array;
                } = {};
                if (this.issuerAddress != null) {
                    data.issuerAddress = this.issuerAddress.toObject();
                }
                if (this.shortName != null) {
                    data.shortName = this.shortName;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_issuerAddress)
                    writer.writeMessage(1, this.issuerAddress, () => this.issuerAddress.serialize(writer));
                if (this.shortName.length)
                    writer.writeBytes(2, this.shortName);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Code {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Code();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.issuerAddress, () => message.issuerAddress = dependency_2.co.topl.proto.models.SpendingAddress.deserialize(reader));
                            break;
                        case 2:
                            message.shortName = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Code {
                return Code.deserialize(bytes);
            }
        }
    }
    export class OperatorRegistrationBoxValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vrfCommitment?: dependency_3.co.topl.proto.models.ProofKnowledgeKesProduct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vrfCommitment" in data && data.vrfCommitment != undefined) {
                    this.vrfCommitment = data.vrfCommitment;
                }
            }
        }
        get vrfCommitment() {
            return pb_1.Message.getWrapperField(this, dependency_3.co.topl.proto.models.ProofKnowledgeKesProduct, 1) as dependency_3.co.topl.proto.models.ProofKnowledgeKesProduct;
        }
        set vrfCommitment(value: dependency_3.co.topl.proto.models.ProofKnowledgeKesProduct) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_vrfCommitment() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            vrfCommitment?: ReturnType<typeof dependency_3.co.topl.proto.models.ProofKnowledgeKesProduct.prototype.toObject>;
        }): OperatorRegistrationBoxValue {
            const message = new OperatorRegistrationBoxValue({});
            if (data.vrfCommitment != null) {
                message.vrfCommitment = dependency_3.co.topl.proto.models.ProofKnowledgeKesProduct.fromObject(data.vrfCommitment);
            }
            return message;
        }
        toObject() {
            const data: {
                vrfCommitment?: ReturnType<typeof dependency_3.co.topl.proto.models.ProofKnowledgeKesProduct.prototype.toObject>;
            } = {};
            if (this.vrfCommitment != null) {
                data.vrfCommitment = this.vrfCommitment.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_vrfCommitment)
                writer.writeMessage(1, this.vrfCommitment, () => this.vrfCommitment.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperatorRegistrationBoxValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperatorRegistrationBoxValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vrfCommitment, () => message.vrfCommitment = dependency_3.co.topl.proto.models.ProofKnowledgeKesProduct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperatorRegistrationBoxValue {
            return OperatorRegistrationBoxValue.deserialize(bytes);
        }
    }
}
