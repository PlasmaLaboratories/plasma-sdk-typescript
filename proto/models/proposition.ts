/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: models/proposition.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./verification_key";
import * as dependency_2 from "./box";
import * as pb_1 from "google-protobuf";
export namespace co.topl.proto.models {
    export class Proposition extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]];
        constructor(data?: any[] | ({} & (({
            permanentlyLocked?: PropositionPermanentlyLocked;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: PropositionKnowledgeCurve25519;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: PropositionKnowledgeEd25519;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: PropositionKnowledgeExtendedEd25519;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: PropositionKnowledgeHashLock;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: PropositionCompositionalThreshold;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: PropositionCompositionalAnd;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: PropositionCompositionalOr;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: PropositionCompositionalNot;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: PropositionContextualHeightLock;
            contextualTransactionIO?: never;
        } | {
            permanentlyLocked?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeExtendedEd25519?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: PropositionContextualRequiredTransactionIO;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("permanentlyLocked" in data && data.permanentlyLocked != undefined) {
                    this.permanentlyLocked = data.permanentlyLocked;
                }
                if ("knowledgeCurve25519" in data && data.knowledgeCurve25519 != undefined) {
                    this.knowledgeCurve25519 = data.knowledgeCurve25519;
                }
                if ("knowledgeEd25519" in data && data.knowledgeEd25519 != undefined) {
                    this.knowledgeEd25519 = data.knowledgeEd25519;
                }
                if ("knowledgeExtendedEd25519" in data && data.knowledgeExtendedEd25519 != undefined) {
                    this.knowledgeExtendedEd25519 = data.knowledgeExtendedEd25519;
                }
                if ("knowledgeHashLock" in data && data.knowledgeHashLock != undefined) {
                    this.knowledgeHashLock = data.knowledgeHashLock;
                }
                if ("compositionalThreshold" in data && data.compositionalThreshold != undefined) {
                    this.compositionalThreshold = data.compositionalThreshold;
                }
                if ("compositionalAnd" in data && data.compositionalAnd != undefined) {
                    this.compositionalAnd = data.compositionalAnd;
                }
                if ("compositionalOr" in data && data.compositionalOr != undefined) {
                    this.compositionalOr = data.compositionalOr;
                }
                if ("compositionalNot" in data && data.compositionalNot != undefined) {
                    this.compositionalNot = data.compositionalNot;
                }
                if ("contextualHeightLock" in data && data.contextualHeightLock != undefined) {
                    this.contextualHeightLock = data.contextualHeightLock;
                }
                if ("contextualTransactionIO" in data && data.contextualTransactionIO != undefined) {
                    this.contextualTransactionIO = data.contextualTransactionIO;
                }
            }
        }
        get permanentlyLocked() {
            return pb_1.Message.getWrapperField(this, PropositionPermanentlyLocked, 1) as PropositionPermanentlyLocked;
        }
        set permanentlyLocked(value: PropositionPermanentlyLocked) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_permanentlyLocked() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get knowledgeCurve25519() {
            return pb_1.Message.getWrapperField(this, PropositionKnowledgeCurve25519, 3) as PropositionKnowledgeCurve25519;
        }
        set knowledgeCurve25519(value: PropositionKnowledgeCurve25519) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_knowledgeCurve25519() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get knowledgeEd25519() {
            return pb_1.Message.getWrapperField(this, PropositionKnowledgeEd25519, 4) as PropositionKnowledgeEd25519;
        }
        set knowledgeEd25519(value: PropositionKnowledgeEd25519) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_knowledgeEd25519() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get knowledgeExtendedEd25519() {
            return pb_1.Message.getWrapperField(this, PropositionKnowledgeExtendedEd25519, 5) as PropositionKnowledgeExtendedEd25519;
        }
        set knowledgeExtendedEd25519(value: PropositionKnowledgeExtendedEd25519) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_knowledgeExtendedEd25519() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get knowledgeHashLock() {
            return pb_1.Message.getWrapperField(this, PropositionKnowledgeHashLock, 6) as PropositionKnowledgeHashLock;
        }
        set knowledgeHashLock(value: PropositionKnowledgeHashLock) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_knowledgeHashLock() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get compositionalThreshold() {
            return pb_1.Message.getWrapperField(this, PropositionCompositionalThreshold, 7) as PropositionCompositionalThreshold;
        }
        set compositionalThreshold(value: PropositionCompositionalThreshold) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_compositionalThreshold() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get compositionalAnd() {
            return pb_1.Message.getWrapperField(this, PropositionCompositionalAnd, 8) as PropositionCompositionalAnd;
        }
        set compositionalAnd(value: PropositionCompositionalAnd) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_compositionalAnd() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get compositionalOr() {
            return pb_1.Message.getWrapperField(this, PropositionCompositionalOr, 9) as PropositionCompositionalOr;
        }
        set compositionalOr(value: PropositionCompositionalOr) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_compositionalOr() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get compositionalNot() {
            return pb_1.Message.getWrapperField(this, PropositionCompositionalNot, 10) as PropositionCompositionalNot;
        }
        set compositionalNot(value: PropositionCompositionalNot) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_compositionalNot() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get contextualHeightLock() {
            return pb_1.Message.getWrapperField(this, PropositionContextualHeightLock, 11) as PropositionContextualHeightLock;
        }
        set contextualHeightLock(value: PropositionContextualHeightLock) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_contextualHeightLock() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get contextualTransactionIO() {
            return pb_1.Message.getWrapperField(this, PropositionContextualRequiredTransactionIO, 12) as PropositionContextualRequiredTransactionIO;
        }
        set contextualTransactionIO(value: PropositionContextualRequiredTransactionIO) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_contextualTransactionIO() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get sealed_value() {
            const cases: {
                [index: number]: "none" | "permanentlyLocked" | "knowledgeCurve25519" | "knowledgeEd25519" | "knowledgeExtendedEd25519" | "knowledgeHashLock" | "compositionalThreshold" | "compositionalAnd" | "compositionalOr" | "compositionalNot" | "contextualHeightLock" | "contextualTransactionIO";
            } = {
                0: "none",
                1: "permanentlyLocked",
                3: "knowledgeCurve25519",
                4: "knowledgeEd25519",
                5: "knowledgeExtendedEd25519",
                6: "knowledgeHashLock",
                7: "compositionalThreshold",
                8: "compositionalAnd",
                9: "compositionalOr",
                10: "compositionalNot",
                11: "contextualHeightLock",
                12: "contextualTransactionIO"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])];
        }
        static fromObject(data: {
            permanentlyLocked?: ReturnType<typeof PropositionPermanentlyLocked.prototype.toObject>;
            knowledgeCurve25519?: ReturnType<typeof PropositionKnowledgeCurve25519.prototype.toObject>;
            knowledgeEd25519?: ReturnType<typeof PropositionKnowledgeEd25519.prototype.toObject>;
            knowledgeExtendedEd25519?: ReturnType<typeof PropositionKnowledgeExtendedEd25519.prototype.toObject>;
            knowledgeHashLock?: ReturnType<typeof PropositionKnowledgeHashLock.prototype.toObject>;
            compositionalThreshold?: ReturnType<typeof PropositionCompositionalThreshold.prototype.toObject>;
            compositionalAnd?: ReturnType<typeof PropositionCompositionalAnd.prototype.toObject>;
            compositionalOr?: ReturnType<typeof PropositionCompositionalOr.prototype.toObject>;
            compositionalNot?: ReturnType<typeof PropositionCompositionalNot.prototype.toObject>;
            contextualHeightLock?: ReturnType<typeof PropositionContextualHeightLock.prototype.toObject>;
            contextualTransactionIO?: ReturnType<typeof PropositionContextualRequiredTransactionIO.prototype.toObject>;
        }): Proposition {
            const message = new Proposition({});
            if (data.permanentlyLocked != null) {
                message.permanentlyLocked = PropositionPermanentlyLocked.fromObject(data.permanentlyLocked);
            }
            if (data.knowledgeCurve25519 != null) {
                message.knowledgeCurve25519 = PropositionKnowledgeCurve25519.fromObject(data.knowledgeCurve25519);
            }
            if (data.knowledgeEd25519 != null) {
                message.knowledgeEd25519 = PropositionKnowledgeEd25519.fromObject(data.knowledgeEd25519);
            }
            if (data.knowledgeExtendedEd25519 != null) {
                message.knowledgeExtendedEd25519 = PropositionKnowledgeExtendedEd25519.fromObject(data.knowledgeExtendedEd25519);
            }
            if (data.knowledgeHashLock != null) {
                message.knowledgeHashLock = PropositionKnowledgeHashLock.fromObject(data.knowledgeHashLock);
            }
            if (data.compositionalThreshold != null) {
                message.compositionalThreshold = PropositionCompositionalThreshold.fromObject(data.compositionalThreshold);
            }
            if (data.compositionalAnd != null) {
                message.compositionalAnd = PropositionCompositionalAnd.fromObject(data.compositionalAnd);
            }
            if (data.compositionalOr != null) {
                message.compositionalOr = PropositionCompositionalOr.fromObject(data.compositionalOr);
            }
            if (data.compositionalNot != null) {
                message.compositionalNot = PropositionCompositionalNot.fromObject(data.compositionalNot);
            }
            if (data.contextualHeightLock != null) {
                message.contextualHeightLock = PropositionContextualHeightLock.fromObject(data.contextualHeightLock);
            }
            if (data.contextualTransactionIO != null) {
                message.contextualTransactionIO = PropositionContextualRequiredTransactionIO.fromObject(data.contextualTransactionIO);
            }
            return message;
        }
        toObject() {
            const data: {
                permanentlyLocked?: ReturnType<typeof PropositionPermanentlyLocked.prototype.toObject>;
                knowledgeCurve25519?: ReturnType<typeof PropositionKnowledgeCurve25519.prototype.toObject>;
                knowledgeEd25519?: ReturnType<typeof PropositionKnowledgeEd25519.prototype.toObject>;
                knowledgeExtendedEd25519?: ReturnType<typeof PropositionKnowledgeExtendedEd25519.prototype.toObject>;
                knowledgeHashLock?: ReturnType<typeof PropositionKnowledgeHashLock.prototype.toObject>;
                compositionalThreshold?: ReturnType<typeof PropositionCompositionalThreshold.prototype.toObject>;
                compositionalAnd?: ReturnType<typeof PropositionCompositionalAnd.prototype.toObject>;
                compositionalOr?: ReturnType<typeof PropositionCompositionalOr.prototype.toObject>;
                compositionalNot?: ReturnType<typeof PropositionCompositionalNot.prototype.toObject>;
                contextualHeightLock?: ReturnType<typeof PropositionContextualHeightLock.prototype.toObject>;
                contextualTransactionIO?: ReturnType<typeof PropositionContextualRequiredTransactionIO.prototype.toObject>;
            } = {};
            if (this.permanentlyLocked != null) {
                data.permanentlyLocked = this.permanentlyLocked.toObject();
            }
            if (this.knowledgeCurve25519 != null) {
                data.knowledgeCurve25519 = this.knowledgeCurve25519.toObject();
            }
            if (this.knowledgeEd25519 != null) {
                data.knowledgeEd25519 = this.knowledgeEd25519.toObject();
            }
            if (this.knowledgeExtendedEd25519 != null) {
                data.knowledgeExtendedEd25519 = this.knowledgeExtendedEd25519.toObject();
            }
            if (this.knowledgeHashLock != null) {
                data.knowledgeHashLock = this.knowledgeHashLock.toObject();
            }
            if (this.compositionalThreshold != null) {
                data.compositionalThreshold = this.compositionalThreshold.toObject();
            }
            if (this.compositionalAnd != null) {
                data.compositionalAnd = this.compositionalAnd.toObject();
            }
            if (this.compositionalOr != null) {
                data.compositionalOr = this.compositionalOr.toObject();
            }
            if (this.compositionalNot != null) {
                data.compositionalNot = this.compositionalNot.toObject();
            }
            if (this.contextualHeightLock != null) {
                data.contextualHeightLock = this.contextualHeightLock.toObject();
            }
            if (this.contextualTransactionIO != null) {
                data.contextualTransactionIO = this.contextualTransactionIO.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_permanentlyLocked)
                writer.writeMessage(1, this.permanentlyLocked, () => this.permanentlyLocked.serialize(writer));
            if (this.has_knowledgeCurve25519)
                writer.writeMessage(3, this.knowledgeCurve25519, () => this.knowledgeCurve25519.serialize(writer));
            if (this.has_knowledgeEd25519)
                writer.writeMessage(4, this.knowledgeEd25519, () => this.knowledgeEd25519.serialize(writer));
            if (this.has_knowledgeExtendedEd25519)
                writer.writeMessage(5, this.knowledgeExtendedEd25519, () => this.knowledgeExtendedEd25519.serialize(writer));
            if (this.has_knowledgeHashLock)
                writer.writeMessage(6, this.knowledgeHashLock, () => this.knowledgeHashLock.serialize(writer));
            if (this.has_compositionalThreshold)
                writer.writeMessage(7, this.compositionalThreshold, () => this.compositionalThreshold.serialize(writer));
            if (this.has_compositionalAnd)
                writer.writeMessage(8, this.compositionalAnd, () => this.compositionalAnd.serialize(writer));
            if (this.has_compositionalOr)
                writer.writeMessage(9, this.compositionalOr, () => this.compositionalOr.serialize(writer));
            if (this.has_compositionalNot)
                writer.writeMessage(10, this.compositionalNot, () => this.compositionalNot.serialize(writer));
            if (this.has_contextualHeightLock)
                writer.writeMessage(11, this.contextualHeightLock, () => this.contextualHeightLock.serialize(writer));
            if (this.has_contextualTransactionIO)
                writer.writeMessage(12, this.contextualTransactionIO, () => this.contextualTransactionIO.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Proposition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proposition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.permanentlyLocked, () => message.permanentlyLocked = PropositionPermanentlyLocked.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.knowledgeCurve25519, () => message.knowledgeCurve25519 = PropositionKnowledgeCurve25519.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.knowledgeEd25519, () => message.knowledgeEd25519 = PropositionKnowledgeEd25519.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.knowledgeExtendedEd25519, () => message.knowledgeExtendedEd25519 = PropositionKnowledgeExtendedEd25519.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.knowledgeHashLock, () => message.knowledgeHashLock = PropositionKnowledgeHashLock.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.compositionalThreshold, () => message.compositionalThreshold = PropositionCompositionalThreshold.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.compositionalAnd, () => message.compositionalAnd = PropositionCompositionalAnd.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.compositionalOr, () => message.compositionalOr = PropositionCompositionalOr.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.compositionalNot, () => message.compositionalNot = PropositionCompositionalNot.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.contextualHeightLock, () => message.contextualHeightLock = PropositionContextualHeightLock.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.contextualTransactionIO, () => message.contextualTransactionIO = PropositionContextualRequiredTransactionIO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Proposition {
            return Proposition.deserialize(bytes);
        }
    }
    export class PropositionPermanentlyLocked extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PropositionPermanentlyLocked {
            const message = new PropositionPermanentlyLocked({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionPermanentlyLocked {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionPermanentlyLocked();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionPermanentlyLocked {
            return PropositionPermanentlyLocked.deserialize(bytes);
        }
    }
    export class PropositionKnowledgeCurve25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: dependency_1.co.topl.proto.models.VerificationKeyCurve25519;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.VerificationKeyCurve25519, 1) as dependency_1.co.topl.proto.models.VerificationKeyCurve25519;
        }
        set key(value: dependency_1.co.topl.proto.models.VerificationKeyCurve25519) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            key?: ReturnType<typeof dependency_1.co.topl.proto.models.VerificationKeyCurve25519.prototype.toObject>;
        }): PropositionKnowledgeCurve25519 {
            const message = new PropositionKnowledgeCurve25519({});
            if (data.key != null) {
                message.key = dependency_1.co.topl.proto.models.VerificationKeyCurve25519.fromObject(data.key);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: ReturnType<typeof dependency_1.co.topl.proto.models.VerificationKeyCurve25519.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionKnowledgeCurve25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionKnowledgeCurve25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key, () => message.key = dependency_1.co.topl.proto.models.VerificationKeyCurve25519.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionKnowledgeCurve25519 {
            return PropositionKnowledgeCurve25519.deserialize(bytes);
        }
    }
    export class PropositionKnowledgeEd25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: dependency_1.co.topl.proto.models.VerificationKeyEd25519;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.VerificationKeyEd25519, 1) as dependency_1.co.topl.proto.models.VerificationKeyEd25519;
        }
        set key(value: dependency_1.co.topl.proto.models.VerificationKeyEd25519) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            key?: ReturnType<typeof dependency_1.co.topl.proto.models.VerificationKeyEd25519.prototype.toObject>;
        }): PropositionKnowledgeEd25519 {
            const message = new PropositionKnowledgeEd25519({});
            if (data.key != null) {
                message.key = dependency_1.co.topl.proto.models.VerificationKeyEd25519.fromObject(data.key);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: ReturnType<typeof dependency_1.co.topl.proto.models.VerificationKeyEd25519.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionKnowledgeEd25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionKnowledgeEd25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key, () => message.key = dependency_1.co.topl.proto.models.VerificationKeyEd25519.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionKnowledgeEd25519 {
            return PropositionKnowledgeEd25519.deserialize(bytes);
        }
    }
    export class PropositionKnowledgeExtendedEd25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: dependency_1.co.topl.proto.models.VerificationKeyExtendedEd25519;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.VerificationKeyExtendedEd25519, 1) as dependency_1.co.topl.proto.models.VerificationKeyExtendedEd25519;
        }
        set key(value: dependency_1.co.topl.proto.models.VerificationKeyExtendedEd25519) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            key?: ReturnType<typeof dependency_1.co.topl.proto.models.VerificationKeyExtendedEd25519.prototype.toObject>;
        }): PropositionKnowledgeExtendedEd25519 {
            const message = new PropositionKnowledgeExtendedEd25519({});
            if (data.key != null) {
                message.key = dependency_1.co.topl.proto.models.VerificationKeyExtendedEd25519.fromObject(data.key);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: ReturnType<typeof dependency_1.co.topl.proto.models.VerificationKeyExtendedEd25519.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionKnowledgeExtendedEd25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionKnowledgeExtendedEd25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key, () => message.key = dependency_1.co.topl.proto.models.VerificationKeyExtendedEd25519.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionKnowledgeExtendedEd25519 {
            return PropositionKnowledgeExtendedEd25519.deserialize(bytes);
        }
    }
    export class PropositionKnowledgeHashLock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valueDigest?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valueDigest" in data && data.valueDigest != undefined) {
                    this.valueDigest = data.valueDigest;
                }
            }
        }
        get valueDigest() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set valueDigest(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            valueDigest?: Uint8Array;
        }): PropositionKnowledgeHashLock {
            const message = new PropositionKnowledgeHashLock({});
            if (data.valueDigest != null) {
                message.valueDigest = data.valueDigest;
            }
            return message;
        }
        toObject() {
            const data: {
                valueDigest?: Uint8Array;
            } = {};
            if (this.valueDigest != null) {
                data.valueDigest = this.valueDigest;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.valueDigest.length)
                writer.writeBytes(1, this.valueDigest);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionKnowledgeHashLock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionKnowledgeHashLock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.valueDigest = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionKnowledgeHashLock {
            return PropositionKnowledgeHashLock.deserialize(bytes);
        }
    }
    export class PropositionCompositionalThreshold extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            threshold?: number;
            propositions?: Proposition[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("threshold" in data && data.threshold != undefined) {
                    this.threshold = data.threshold;
                }
                if ("propositions" in data && data.propositions != undefined) {
                    this.propositions = data.propositions;
                }
            }
        }
        get threshold() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set threshold(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get propositions() {
            return pb_1.Message.getRepeatedWrapperField(this, Proposition, 2) as Proposition[];
        }
        set propositions(value: Proposition[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            threshold?: number;
            propositions?: ReturnType<typeof Proposition.prototype.toObject>[];
        }): PropositionCompositionalThreshold {
            const message = new PropositionCompositionalThreshold({});
            if (data.threshold != null) {
                message.threshold = data.threshold;
            }
            if (data.propositions != null) {
                message.propositions = data.propositions.map(item => Proposition.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                threshold?: number;
                propositions?: ReturnType<typeof Proposition.prototype.toObject>[];
            } = {};
            if (this.threshold != null) {
                data.threshold = this.threshold;
            }
            if (this.propositions != null) {
                data.propositions = this.propositions.map((item: Proposition) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.threshold != 0)
                writer.writeUint32(1, this.threshold);
            if (this.propositions.length)
                writer.writeRepeatedMessage(2, this.propositions, (item: Proposition) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionCompositionalThreshold {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionCompositionalThreshold();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.threshold = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.propositions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Proposition.deserialize(reader), Proposition));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionCompositionalThreshold {
            return PropositionCompositionalThreshold.deserialize(bytes);
        }
    }
    export class PropositionCompositionalAnd extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            a?: Proposition;
            b?: Proposition;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("a" in data && data.a != undefined) {
                    this.a = data.a;
                }
                if ("b" in data && data.b != undefined) {
                    this.b = data.b;
                }
            }
        }
        get a() {
            return pb_1.Message.getWrapperField(this, Proposition, 1) as Proposition;
        }
        set a(value: Proposition) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_a() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get b() {
            return pb_1.Message.getWrapperField(this, Proposition, 2) as Proposition;
        }
        set b(value: Proposition) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_b() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            a?: ReturnType<typeof Proposition.prototype.toObject>;
            b?: ReturnType<typeof Proposition.prototype.toObject>;
        }): PropositionCompositionalAnd {
            const message = new PropositionCompositionalAnd({});
            if (data.a != null) {
                message.a = Proposition.fromObject(data.a);
            }
            if (data.b != null) {
                message.b = Proposition.fromObject(data.b);
            }
            return message;
        }
        toObject() {
            const data: {
                a?: ReturnType<typeof Proposition.prototype.toObject>;
                b?: ReturnType<typeof Proposition.prototype.toObject>;
            } = {};
            if (this.a != null) {
                data.a = this.a.toObject();
            }
            if (this.b != null) {
                data.b = this.b.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_a)
                writer.writeMessage(1, this.a, () => this.a.serialize(writer));
            if (this.has_b)
                writer.writeMessage(2, this.b, () => this.b.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionCompositionalAnd {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionCompositionalAnd();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.a, () => message.a = Proposition.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.b, () => message.b = Proposition.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionCompositionalAnd {
            return PropositionCompositionalAnd.deserialize(bytes);
        }
    }
    export class PropositionCompositionalOr extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            a?: Proposition;
            b?: Proposition;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("a" in data && data.a != undefined) {
                    this.a = data.a;
                }
                if ("b" in data && data.b != undefined) {
                    this.b = data.b;
                }
            }
        }
        get a() {
            return pb_1.Message.getWrapperField(this, Proposition, 1) as Proposition;
        }
        set a(value: Proposition) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_a() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get b() {
            return pb_1.Message.getWrapperField(this, Proposition, 2) as Proposition;
        }
        set b(value: Proposition) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_b() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            a?: ReturnType<typeof Proposition.prototype.toObject>;
            b?: ReturnType<typeof Proposition.prototype.toObject>;
        }): PropositionCompositionalOr {
            const message = new PropositionCompositionalOr({});
            if (data.a != null) {
                message.a = Proposition.fromObject(data.a);
            }
            if (data.b != null) {
                message.b = Proposition.fromObject(data.b);
            }
            return message;
        }
        toObject() {
            const data: {
                a?: ReturnType<typeof Proposition.prototype.toObject>;
                b?: ReturnType<typeof Proposition.prototype.toObject>;
            } = {};
            if (this.a != null) {
                data.a = this.a.toObject();
            }
            if (this.b != null) {
                data.b = this.b.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_a)
                writer.writeMessage(1, this.a, () => this.a.serialize(writer));
            if (this.has_b)
                writer.writeMessage(2, this.b, () => this.b.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionCompositionalOr {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionCompositionalOr();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.a, () => message.a = Proposition.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.b, () => message.b = Proposition.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionCompositionalOr {
            return PropositionCompositionalOr.deserialize(bytes);
        }
    }
    export class PropositionCompositionalNot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            a?: Proposition;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("a" in data && data.a != undefined) {
                    this.a = data.a;
                }
            }
        }
        get a() {
            return pb_1.Message.getWrapperField(this, Proposition, 1) as Proposition;
        }
        set a(value: Proposition) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_a() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            a?: ReturnType<typeof Proposition.prototype.toObject>;
        }): PropositionCompositionalNot {
            const message = new PropositionCompositionalNot({});
            if (data.a != null) {
                message.a = Proposition.fromObject(data.a);
            }
            return message;
        }
        toObject() {
            const data: {
                a?: ReturnType<typeof Proposition.prototype.toObject>;
            } = {};
            if (this.a != null) {
                data.a = this.a.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_a)
                writer.writeMessage(1, this.a, () => this.a.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionCompositionalNot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionCompositionalNot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.a, () => message.a = Proposition.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionCompositionalNot {
            return PropositionCompositionalNot.deserialize(bytes);
        }
    }
    export class PropositionContextualHeightLock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }): PropositionContextualHeightLock {
            const message = new PropositionContextualHeightLock({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeUint64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionContextualHeightLock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionContextualHeightLock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionContextualHeightLock {
            return PropositionContextualHeightLock.deserialize(bytes);
        }
    }
    export class PropositionContextualRequiredTransactionIO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requirements?: PropositionContextualRequiredTransactionIO.Requirement[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requirements" in data && data.requirements != undefined) {
                    this.requirements = data.requirements;
                }
            }
        }
        get requirements() {
            return pb_1.Message.getRepeatedWrapperField(this, PropositionContextualRequiredTransactionIO.Requirement, 1) as PropositionContextualRequiredTransactionIO.Requirement[];
        }
        set requirements(value: PropositionContextualRequiredTransactionIO.Requirement[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            requirements?: ReturnType<typeof PropositionContextualRequiredTransactionIO.Requirement.prototype.toObject>[];
        }): PropositionContextualRequiredTransactionIO {
            const message = new PropositionContextualRequiredTransactionIO({});
            if (data.requirements != null) {
                message.requirements = data.requirements.map(item => PropositionContextualRequiredTransactionIO.Requirement.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requirements?: ReturnType<typeof PropositionContextualRequiredTransactionIO.Requirement.prototype.toObject>[];
            } = {};
            if (this.requirements != null) {
                data.requirements = this.requirements.map((item: PropositionContextualRequiredTransactionIO.Requirement) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requirements.length)
                writer.writeRepeatedMessage(1, this.requirements, (item: PropositionContextualRequiredTransactionIO.Requirement) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropositionContextualRequiredTransactionIO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropositionContextualRequiredTransactionIO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.requirements, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PropositionContextualRequiredTransactionIO.Requirement.deserialize(reader), PropositionContextualRequiredTransactionIO.Requirement));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropositionContextualRequiredTransactionIO {
            return PropositionContextualRequiredTransactionIO.deserialize(bytes);
        }
    }
    export namespace PropositionContextualRequiredTransactionIO {
        export class Requirement extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                box?: dependency_2.co.topl.proto.models.Box;
                location?: BoxLocation;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("box" in data && data.box != undefined) {
                        this.box = data.box;
                    }
                    if ("location" in data && data.location != undefined) {
                        this.location = data.location;
                    }
                }
            }
            get box() {
                return pb_1.Message.getWrapperField(this, dependency_2.co.topl.proto.models.Box, 1) as dependency_2.co.topl.proto.models.Box;
            }
            set box(value: dependency_2.co.topl.proto.models.Box) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_box() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get location() {
                return pb_1.Message.getWrapperField(this, BoxLocation, 2) as BoxLocation;
            }
            set location(value: BoxLocation) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_location() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                box?: ReturnType<typeof dependency_2.co.topl.proto.models.Box.prototype.toObject>;
                location?: ReturnType<typeof BoxLocation.prototype.toObject>;
            }): Requirement {
                const message = new Requirement({});
                if (data.box != null) {
                    message.box = dependency_2.co.topl.proto.models.Box.fromObject(data.box);
                }
                if (data.location != null) {
                    message.location = BoxLocation.fromObject(data.location);
                }
                return message;
            }
            toObject() {
                const data: {
                    box?: ReturnType<typeof dependency_2.co.topl.proto.models.Box.prototype.toObject>;
                    location?: ReturnType<typeof BoxLocation.prototype.toObject>;
                } = {};
                if (this.box != null) {
                    data.box = this.box.toObject();
                }
                if (this.location != null) {
                    data.location = this.location.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_box)
                    writer.writeMessage(1, this.box, () => this.box.serialize(writer));
                if (this.has_location)
                    writer.writeMessage(2, this.location, () => this.location.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Requirement {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Requirement();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.box, () => message.box = dependency_2.co.topl.proto.models.Box.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.location, () => message.location = BoxLocation.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Requirement {
                return Requirement.deserialize(bytes);
            }
        }
    }
    export class BoxLocation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
            location?: BoxLocation.IO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 2, BoxLocation.IO.INPUT) as BoxLocation.IO;
        }
        set location(value: BoxLocation.IO) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            index?: number;
            location?: BoxLocation.IO;
        }): BoxLocation {
            const message = new BoxLocation({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                location?: BoxLocation.IO;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeUint32(1, this.index);
            if (this.location != BoxLocation.IO.INPUT)
                writer.writeEnum(2, this.location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoxLocation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoxLocation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readUint32();
                        break;
                    case 2:
                        message.location = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoxLocation {
            return BoxLocation.deserialize(bytes);
        }
    }
    export namespace BoxLocation {
        export enum IO {
            INPUT = 0,
            OUTPUT = 1
        }
    }
}
