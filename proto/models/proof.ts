/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: models/proof.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./verification_key";
import * as pb_1 from "google-protobuf";
export namespace co.topl.proto.models {
    export class Proof extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]];
        constructor(data?: any[] | ({} & (({
            undefined?: ProofUndefined;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: ProofKnowledgeCurve25519;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: ProofKnowledgeEd25519;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: ProofKnowledgeVrfEd25519;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: ProofKnowledgeKesSum;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: ProofKnowledgeKesProduct;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: ProofKnowledgeHashLock;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: ProofCompositionalThreshold;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: ProofCompositionalAnd;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: ProofCompositionalOr;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: ProofCompositionalNot;
            contextualHeightLock?: never;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: ProofContextualHeightLock;
            contextualTransactionIO?: never;
        } | {
            undefined?: never;
            knowledgeCurve25519?: never;
            knowledgeEd25519?: never;
            knowledgeVrfEd25519?: never;
            knowledgeKesSum?: never;
            knowledgeKesProduct?: never;
            knowledgeHashLock?: never;
            compositionalThreshold?: never;
            compositionalAnd?: never;
            compositionalOr?: never;
            compositionalNot?: never;
            contextualHeightLock?: never;
            contextualTransactionIO?: ProofContextualRequiredTransactionIO;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("undefined" in data && data.undefined != undefined) {
                    this.undefined = data.undefined;
                }
                if ("knowledgeCurve25519" in data && data.knowledgeCurve25519 != undefined) {
                    this.knowledgeCurve25519 = data.knowledgeCurve25519;
                }
                if ("knowledgeEd25519" in data && data.knowledgeEd25519 != undefined) {
                    this.knowledgeEd25519 = data.knowledgeEd25519;
                }
                if ("knowledgeVrfEd25519" in data && data.knowledgeVrfEd25519 != undefined) {
                    this.knowledgeVrfEd25519 = data.knowledgeVrfEd25519;
                }
                if ("knowledgeKesSum" in data && data.knowledgeKesSum != undefined) {
                    this.knowledgeKesSum = data.knowledgeKesSum;
                }
                if ("knowledgeKesProduct" in data && data.knowledgeKesProduct != undefined) {
                    this.knowledgeKesProduct = data.knowledgeKesProduct;
                }
                if ("knowledgeHashLock" in data && data.knowledgeHashLock != undefined) {
                    this.knowledgeHashLock = data.knowledgeHashLock;
                }
                if ("compositionalThreshold" in data && data.compositionalThreshold != undefined) {
                    this.compositionalThreshold = data.compositionalThreshold;
                }
                if ("compositionalAnd" in data && data.compositionalAnd != undefined) {
                    this.compositionalAnd = data.compositionalAnd;
                }
                if ("compositionalOr" in data && data.compositionalOr != undefined) {
                    this.compositionalOr = data.compositionalOr;
                }
                if ("compositionalNot" in data && data.compositionalNot != undefined) {
                    this.compositionalNot = data.compositionalNot;
                }
                if ("contextualHeightLock" in data && data.contextualHeightLock != undefined) {
                    this.contextualHeightLock = data.contextualHeightLock;
                }
                if ("contextualTransactionIO" in data && data.contextualTransactionIO != undefined) {
                    this.contextualTransactionIO = data.contextualTransactionIO;
                }
            }
        }
        get undefined() {
            return pb_1.Message.getWrapperField(this, ProofUndefined, 1) as ProofUndefined;
        }
        set undefined(value: ProofUndefined) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_undefined() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get knowledgeCurve25519() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeCurve25519, 2) as ProofKnowledgeCurve25519;
        }
        set knowledgeCurve25519(value: ProofKnowledgeCurve25519) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_knowledgeCurve25519() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get knowledgeEd25519() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeEd25519, 3) as ProofKnowledgeEd25519;
        }
        set knowledgeEd25519(value: ProofKnowledgeEd25519) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_knowledgeEd25519() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get knowledgeVrfEd25519() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeVrfEd25519, 4) as ProofKnowledgeVrfEd25519;
        }
        set knowledgeVrfEd25519(value: ProofKnowledgeVrfEd25519) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_knowledgeVrfEd25519() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get knowledgeKesSum() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeKesSum, 5) as ProofKnowledgeKesSum;
        }
        set knowledgeKesSum(value: ProofKnowledgeKesSum) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_knowledgeKesSum() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get knowledgeKesProduct() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeKesProduct, 6) as ProofKnowledgeKesProduct;
        }
        set knowledgeKesProduct(value: ProofKnowledgeKesProduct) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_knowledgeKesProduct() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get knowledgeHashLock() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeHashLock, 7) as ProofKnowledgeHashLock;
        }
        set knowledgeHashLock(value: ProofKnowledgeHashLock) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_knowledgeHashLock() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get compositionalThreshold() {
            return pb_1.Message.getWrapperField(this, ProofCompositionalThreshold, 8) as ProofCompositionalThreshold;
        }
        set compositionalThreshold(value: ProofCompositionalThreshold) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_compositionalThreshold() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get compositionalAnd() {
            return pb_1.Message.getWrapperField(this, ProofCompositionalAnd, 9) as ProofCompositionalAnd;
        }
        set compositionalAnd(value: ProofCompositionalAnd) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_compositionalAnd() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get compositionalOr() {
            return pb_1.Message.getWrapperField(this, ProofCompositionalOr, 10) as ProofCompositionalOr;
        }
        set compositionalOr(value: ProofCompositionalOr) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_compositionalOr() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get compositionalNot() {
            return pb_1.Message.getWrapperField(this, ProofCompositionalNot, 11) as ProofCompositionalNot;
        }
        set compositionalNot(value: ProofCompositionalNot) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_compositionalNot() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get contextualHeightLock() {
            return pb_1.Message.getWrapperField(this, ProofContextualHeightLock, 12) as ProofContextualHeightLock;
        }
        set contextualHeightLock(value: ProofContextualHeightLock) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_contextualHeightLock() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get contextualTransactionIO() {
            return pb_1.Message.getWrapperField(this, ProofContextualRequiredTransactionIO, 13) as ProofContextualRequiredTransactionIO;
        }
        set contextualTransactionIO(value: ProofContextualRequiredTransactionIO) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_contextualTransactionIO() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get sealed_value() {
            const cases: {
                [index: number]: "none" | "undefined" | "knowledgeCurve25519" | "knowledgeEd25519" | "knowledgeVrfEd25519" | "knowledgeKesSum" | "knowledgeKesProduct" | "knowledgeHashLock" | "compositionalThreshold" | "compositionalAnd" | "compositionalOr" | "compositionalNot" | "contextualHeightLock" | "contextualTransactionIO";
            } = {
                0: "none",
                1: "undefined",
                2: "knowledgeCurve25519",
                3: "knowledgeEd25519",
                4: "knowledgeVrfEd25519",
                5: "knowledgeKesSum",
                6: "knowledgeKesProduct",
                7: "knowledgeHashLock",
                8: "compositionalThreshold",
                9: "compositionalAnd",
                10: "compositionalOr",
                11: "compositionalNot",
                12: "contextualHeightLock",
                13: "contextualTransactionIO"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])];
        }
        static fromObject(data: {
            undefined?: ReturnType<typeof ProofUndefined.prototype.toObject>;
            knowledgeCurve25519?: ReturnType<typeof ProofKnowledgeCurve25519.prototype.toObject>;
            knowledgeEd25519?: ReturnType<typeof ProofKnowledgeEd25519.prototype.toObject>;
            knowledgeVrfEd25519?: ReturnType<typeof ProofKnowledgeVrfEd25519.prototype.toObject>;
            knowledgeKesSum?: ReturnType<typeof ProofKnowledgeKesSum.prototype.toObject>;
            knowledgeKesProduct?: ReturnType<typeof ProofKnowledgeKesProduct.prototype.toObject>;
            knowledgeHashLock?: ReturnType<typeof ProofKnowledgeHashLock.prototype.toObject>;
            compositionalThreshold?: ReturnType<typeof ProofCompositionalThreshold.prototype.toObject>;
            compositionalAnd?: ReturnType<typeof ProofCompositionalAnd.prototype.toObject>;
            compositionalOr?: ReturnType<typeof ProofCompositionalOr.prototype.toObject>;
            compositionalNot?: ReturnType<typeof ProofCompositionalNot.prototype.toObject>;
            contextualHeightLock?: ReturnType<typeof ProofContextualHeightLock.prototype.toObject>;
            contextualTransactionIO?: ReturnType<typeof ProofContextualRequiredTransactionIO.prototype.toObject>;
        }): Proof {
            const message = new Proof({});
            if (data.undefined != null) {
                message.undefined = ProofUndefined.fromObject(data.undefined);
            }
            if (data.knowledgeCurve25519 != null) {
                message.knowledgeCurve25519 = ProofKnowledgeCurve25519.fromObject(data.knowledgeCurve25519);
            }
            if (data.knowledgeEd25519 != null) {
                message.knowledgeEd25519 = ProofKnowledgeEd25519.fromObject(data.knowledgeEd25519);
            }
            if (data.knowledgeVrfEd25519 != null) {
                message.knowledgeVrfEd25519 = ProofKnowledgeVrfEd25519.fromObject(data.knowledgeVrfEd25519);
            }
            if (data.knowledgeKesSum != null) {
                message.knowledgeKesSum = ProofKnowledgeKesSum.fromObject(data.knowledgeKesSum);
            }
            if (data.knowledgeKesProduct != null) {
                message.knowledgeKesProduct = ProofKnowledgeKesProduct.fromObject(data.knowledgeKesProduct);
            }
            if (data.knowledgeHashLock != null) {
                message.knowledgeHashLock = ProofKnowledgeHashLock.fromObject(data.knowledgeHashLock);
            }
            if (data.compositionalThreshold != null) {
                message.compositionalThreshold = ProofCompositionalThreshold.fromObject(data.compositionalThreshold);
            }
            if (data.compositionalAnd != null) {
                message.compositionalAnd = ProofCompositionalAnd.fromObject(data.compositionalAnd);
            }
            if (data.compositionalOr != null) {
                message.compositionalOr = ProofCompositionalOr.fromObject(data.compositionalOr);
            }
            if (data.compositionalNot != null) {
                message.compositionalNot = ProofCompositionalNot.fromObject(data.compositionalNot);
            }
            if (data.contextualHeightLock != null) {
                message.contextualHeightLock = ProofContextualHeightLock.fromObject(data.contextualHeightLock);
            }
            if (data.contextualTransactionIO != null) {
                message.contextualTransactionIO = ProofContextualRequiredTransactionIO.fromObject(data.contextualTransactionIO);
            }
            return message;
        }
        toObject() {
            const data: {
                undefined?: ReturnType<typeof ProofUndefined.prototype.toObject>;
                knowledgeCurve25519?: ReturnType<typeof ProofKnowledgeCurve25519.prototype.toObject>;
                knowledgeEd25519?: ReturnType<typeof ProofKnowledgeEd25519.prototype.toObject>;
                knowledgeVrfEd25519?: ReturnType<typeof ProofKnowledgeVrfEd25519.prototype.toObject>;
                knowledgeKesSum?: ReturnType<typeof ProofKnowledgeKesSum.prototype.toObject>;
                knowledgeKesProduct?: ReturnType<typeof ProofKnowledgeKesProduct.prototype.toObject>;
                knowledgeHashLock?: ReturnType<typeof ProofKnowledgeHashLock.prototype.toObject>;
                compositionalThreshold?: ReturnType<typeof ProofCompositionalThreshold.prototype.toObject>;
                compositionalAnd?: ReturnType<typeof ProofCompositionalAnd.prototype.toObject>;
                compositionalOr?: ReturnType<typeof ProofCompositionalOr.prototype.toObject>;
                compositionalNot?: ReturnType<typeof ProofCompositionalNot.prototype.toObject>;
                contextualHeightLock?: ReturnType<typeof ProofContextualHeightLock.prototype.toObject>;
                contextualTransactionIO?: ReturnType<typeof ProofContextualRequiredTransactionIO.prototype.toObject>;
            } = {};
            if (this.undefined != null) {
                data.undefined = this.undefined.toObject();
            }
            if (this.knowledgeCurve25519 != null) {
                data.knowledgeCurve25519 = this.knowledgeCurve25519.toObject();
            }
            if (this.knowledgeEd25519 != null) {
                data.knowledgeEd25519 = this.knowledgeEd25519.toObject();
            }
            if (this.knowledgeVrfEd25519 != null) {
                data.knowledgeVrfEd25519 = this.knowledgeVrfEd25519.toObject();
            }
            if (this.knowledgeKesSum != null) {
                data.knowledgeKesSum = this.knowledgeKesSum.toObject();
            }
            if (this.knowledgeKesProduct != null) {
                data.knowledgeKesProduct = this.knowledgeKesProduct.toObject();
            }
            if (this.knowledgeHashLock != null) {
                data.knowledgeHashLock = this.knowledgeHashLock.toObject();
            }
            if (this.compositionalThreshold != null) {
                data.compositionalThreshold = this.compositionalThreshold.toObject();
            }
            if (this.compositionalAnd != null) {
                data.compositionalAnd = this.compositionalAnd.toObject();
            }
            if (this.compositionalOr != null) {
                data.compositionalOr = this.compositionalOr.toObject();
            }
            if (this.compositionalNot != null) {
                data.compositionalNot = this.compositionalNot.toObject();
            }
            if (this.contextualHeightLock != null) {
                data.contextualHeightLock = this.contextualHeightLock.toObject();
            }
            if (this.contextualTransactionIO != null) {
                data.contextualTransactionIO = this.contextualTransactionIO.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_undefined)
                writer.writeMessage(1, this.undefined, () => this.undefined.serialize(writer));
            if (this.has_knowledgeCurve25519)
                writer.writeMessage(2, this.knowledgeCurve25519, () => this.knowledgeCurve25519.serialize(writer));
            if (this.has_knowledgeEd25519)
                writer.writeMessage(3, this.knowledgeEd25519, () => this.knowledgeEd25519.serialize(writer));
            if (this.has_knowledgeVrfEd25519)
                writer.writeMessage(4, this.knowledgeVrfEd25519, () => this.knowledgeVrfEd25519.serialize(writer));
            if (this.has_knowledgeKesSum)
                writer.writeMessage(5, this.knowledgeKesSum, () => this.knowledgeKesSum.serialize(writer));
            if (this.has_knowledgeKesProduct)
                writer.writeMessage(6, this.knowledgeKesProduct, () => this.knowledgeKesProduct.serialize(writer));
            if (this.has_knowledgeHashLock)
                writer.writeMessage(7, this.knowledgeHashLock, () => this.knowledgeHashLock.serialize(writer));
            if (this.has_compositionalThreshold)
                writer.writeMessage(8, this.compositionalThreshold, () => this.compositionalThreshold.serialize(writer));
            if (this.has_compositionalAnd)
                writer.writeMessage(9, this.compositionalAnd, () => this.compositionalAnd.serialize(writer));
            if (this.has_compositionalOr)
                writer.writeMessage(10, this.compositionalOr, () => this.compositionalOr.serialize(writer));
            if (this.has_compositionalNot)
                writer.writeMessage(11, this.compositionalNot, () => this.compositionalNot.serialize(writer));
            if (this.has_contextualHeightLock)
                writer.writeMessage(12, this.contextualHeightLock, () => this.contextualHeightLock.serialize(writer));
            if (this.has_contextualTransactionIO)
                writer.writeMessage(13, this.contextualTransactionIO, () => this.contextualTransactionIO.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Proof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.undefined, () => message.undefined = ProofUndefined.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.knowledgeCurve25519, () => message.knowledgeCurve25519 = ProofKnowledgeCurve25519.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.knowledgeEd25519, () => message.knowledgeEd25519 = ProofKnowledgeEd25519.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.knowledgeVrfEd25519, () => message.knowledgeVrfEd25519 = ProofKnowledgeVrfEd25519.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.knowledgeKesSum, () => message.knowledgeKesSum = ProofKnowledgeKesSum.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.knowledgeKesProduct, () => message.knowledgeKesProduct = ProofKnowledgeKesProduct.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.knowledgeHashLock, () => message.knowledgeHashLock = ProofKnowledgeHashLock.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.compositionalThreshold, () => message.compositionalThreshold = ProofCompositionalThreshold.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.compositionalAnd, () => message.compositionalAnd = ProofCompositionalAnd.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.compositionalOr, () => message.compositionalOr = ProofCompositionalOr.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.compositionalNot, () => message.compositionalNot = ProofCompositionalNot.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.contextualHeightLock, () => message.contextualHeightLock = ProofContextualHeightLock.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.contextualTransactionIO, () => message.contextualTransactionIO = ProofContextualRequiredTransactionIO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Proof {
            return Proof.deserialize(bytes);
        }
    }
    export class ProofUndefined extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ProofUndefined {
            const message = new ProofUndefined({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofUndefined {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofUndefined();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofUndefined {
            return ProofUndefined.deserialize(bytes);
        }
    }
    export class ProofKnowledgeCurve25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): ProofKnowledgeCurve25519 {
            const message = new ProofKnowledgeCurve25519({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofKnowledgeCurve25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofKnowledgeCurve25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofKnowledgeCurve25519 {
            return ProofKnowledgeCurve25519.deserialize(bytes);
        }
    }
    export class ProofKnowledgeEd25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): ProofKnowledgeEd25519 {
            const message = new ProofKnowledgeEd25519({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofKnowledgeEd25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofKnowledgeEd25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofKnowledgeEd25519 {
            return ProofKnowledgeEd25519.deserialize(bytes);
        }
    }
    export class ProofKnowledgeVrfEd25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): ProofKnowledgeVrfEd25519 {
            const message = new ProofKnowledgeVrfEd25519({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofKnowledgeVrfEd25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofKnowledgeVrfEd25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofKnowledgeVrfEd25519 {
            return ProofKnowledgeVrfEd25519.deserialize(bytes);
        }
    }
    export class ProofKnowledgeKesSum extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verificationKey?: dependency_1.co.topl.proto.models.VerificationKeyEd25519;
            signature?: ProofKnowledgeEd25519;
            witness?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verificationKey" in data && data.verificationKey != undefined) {
                    this.verificationKey = data.verificationKey;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("witness" in data && data.witness != undefined) {
                    this.witness = data.witness;
                }
            }
        }
        get verificationKey() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.VerificationKeyEd25519, 1) as dependency_1.co.topl.proto.models.VerificationKeyEd25519;
        }
        set verificationKey(value: dependency_1.co.topl.proto.models.VerificationKeyEd25519) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_verificationKey() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signature() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeEd25519, 2) as ProofKnowledgeEd25519;
        }
        set signature(value: ProofKnowledgeEd25519) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_signature() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get witness() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set witness(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            verificationKey?: ReturnType<typeof dependency_1.co.topl.proto.models.VerificationKeyEd25519.prototype.toObject>;
            signature?: ReturnType<typeof ProofKnowledgeEd25519.prototype.toObject>;
            witness?: Uint8Array[];
        }): ProofKnowledgeKesSum {
            const message = new ProofKnowledgeKesSum({});
            if (data.verificationKey != null) {
                message.verificationKey = dependency_1.co.topl.proto.models.VerificationKeyEd25519.fromObject(data.verificationKey);
            }
            if (data.signature != null) {
                message.signature = ProofKnowledgeEd25519.fromObject(data.signature);
            }
            if (data.witness != null) {
                message.witness = data.witness;
            }
            return message;
        }
        toObject() {
            const data: {
                verificationKey?: ReturnType<typeof dependency_1.co.topl.proto.models.VerificationKeyEd25519.prototype.toObject>;
                signature?: ReturnType<typeof ProofKnowledgeEd25519.prototype.toObject>;
                witness?: Uint8Array[];
            } = {};
            if (this.verificationKey != null) {
                data.verificationKey = this.verificationKey.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature.toObject();
            }
            if (this.witness != null) {
                data.witness = this.witness;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_verificationKey)
                writer.writeMessage(1, this.verificationKey, () => this.verificationKey.serialize(writer));
            if (this.has_signature)
                writer.writeMessage(2, this.signature, () => this.signature.serialize(writer));
            if (this.witness.length)
                writer.writeRepeatedBytes(3, this.witness);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofKnowledgeKesSum {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofKnowledgeKesSum();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.verificationKey, () => message.verificationKey = dependency_1.co.topl.proto.models.VerificationKeyEd25519.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.signature, () => message.signature = ProofKnowledgeEd25519.deserialize(reader));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofKnowledgeKesSum {
            return ProofKnowledgeKesSum.deserialize(bytes);
        }
    }
    export class ProofKnowledgeKesProduct extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            superSignature?: ProofKnowledgeKesSum;
            subSignature?: ProofKnowledgeKesSum;
            subRoot?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("superSignature" in data && data.superSignature != undefined) {
                    this.superSignature = data.superSignature;
                }
                if ("subSignature" in data && data.subSignature != undefined) {
                    this.subSignature = data.subSignature;
                }
                if ("subRoot" in data && data.subRoot != undefined) {
                    this.subRoot = data.subRoot;
                }
            }
        }
        get superSignature() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeKesSum, 1) as ProofKnowledgeKesSum;
        }
        set superSignature(value: ProofKnowledgeKesSum) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_superSignature() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get subSignature() {
            return pb_1.Message.getWrapperField(this, ProofKnowledgeKesSum, 2) as ProofKnowledgeKesSum;
        }
        set subSignature(value: ProofKnowledgeKesSum) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_subSignature() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get subRoot() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set subRoot(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            superSignature?: ReturnType<typeof ProofKnowledgeKesSum.prototype.toObject>;
            subSignature?: ReturnType<typeof ProofKnowledgeKesSum.prototype.toObject>;
            subRoot?: Uint8Array;
        }): ProofKnowledgeKesProduct {
            const message = new ProofKnowledgeKesProduct({});
            if (data.superSignature != null) {
                message.superSignature = ProofKnowledgeKesSum.fromObject(data.superSignature);
            }
            if (data.subSignature != null) {
                message.subSignature = ProofKnowledgeKesSum.fromObject(data.subSignature);
            }
            if (data.subRoot != null) {
                message.subRoot = data.subRoot;
            }
            return message;
        }
        toObject() {
            const data: {
                superSignature?: ReturnType<typeof ProofKnowledgeKesSum.prototype.toObject>;
                subSignature?: ReturnType<typeof ProofKnowledgeKesSum.prototype.toObject>;
                subRoot?: Uint8Array;
            } = {};
            if (this.superSignature != null) {
                data.superSignature = this.superSignature.toObject();
            }
            if (this.subSignature != null) {
                data.subSignature = this.subSignature.toObject();
            }
            if (this.subRoot != null) {
                data.subRoot = this.subRoot;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_superSignature)
                writer.writeMessage(1, this.superSignature, () => this.superSignature.serialize(writer));
            if (this.has_subSignature)
                writer.writeMessage(2, this.subSignature, () => this.subSignature.serialize(writer));
            if (this.subRoot.length)
                writer.writeBytes(3, this.subRoot);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofKnowledgeKesProduct {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofKnowledgeKesProduct();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.superSignature, () => message.superSignature = ProofKnowledgeKesSum.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.subSignature, () => message.subSignature = ProofKnowledgeKesSum.deserialize(reader));
                        break;
                    case 3:
                        message.subRoot = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofKnowledgeKesProduct {
            return ProofKnowledgeKesProduct.deserialize(bytes);
        }
    }
    export class ProofKnowledgeHashLock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): ProofKnowledgeHashLock {
            const message = new ProofKnowledgeHashLock({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofKnowledgeHashLock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofKnowledgeHashLock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofKnowledgeHashLock {
            return ProofKnowledgeHashLock.deserialize(bytes);
        }
    }
    export class ProofCompositionalThreshold extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proofs?: Proof[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proofs" in data && data.proofs != undefined) {
                    this.proofs = data.proofs;
                }
            }
        }
        get proofs() {
            return pb_1.Message.getRepeatedWrapperField(this, Proof, 1) as Proof[];
        }
        set proofs(value: Proof[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            proofs?: ReturnType<typeof Proof.prototype.toObject>[];
        }): ProofCompositionalThreshold {
            const message = new ProofCompositionalThreshold({});
            if (data.proofs != null) {
                message.proofs = data.proofs.map(item => Proof.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                proofs?: ReturnType<typeof Proof.prototype.toObject>[];
            } = {};
            if (this.proofs != null) {
                data.proofs = this.proofs.map((item: Proof) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proofs.length)
                writer.writeRepeatedMessage(1, this.proofs, (item: Proof) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofCompositionalThreshold {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofCompositionalThreshold();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proofs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Proof.deserialize(reader), Proof));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofCompositionalThreshold {
            return ProofCompositionalThreshold.deserialize(bytes);
        }
    }
    export class ProofCompositionalAnd extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            a?: Proof;
            b?: Proof;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("a" in data && data.a != undefined) {
                    this.a = data.a;
                }
                if ("b" in data && data.b != undefined) {
                    this.b = data.b;
                }
            }
        }
        get a() {
            return pb_1.Message.getWrapperField(this, Proof, 1) as Proof;
        }
        set a(value: Proof) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_a() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get b() {
            return pb_1.Message.getWrapperField(this, Proof, 2) as Proof;
        }
        set b(value: Proof) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_b() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            a?: ReturnType<typeof Proof.prototype.toObject>;
            b?: ReturnType<typeof Proof.prototype.toObject>;
        }): ProofCompositionalAnd {
            const message = new ProofCompositionalAnd({});
            if (data.a != null) {
                message.a = Proof.fromObject(data.a);
            }
            if (data.b != null) {
                message.b = Proof.fromObject(data.b);
            }
            return message;
        }
        toObject() {
            const data: {
                a?: ReturnType<typeof Proof.prototype.toObject>;
                b?: ReturnType<typeof Proof.prototype.toObject>;
            } = {};
            if (this.a != null) {
                data.a = this.a.toObject();
            }
            if (this.b != null) {
                data.b = this.b.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_a)
                writer.writeMessage(1, this.a, () => this.a.serialize(writer));
            if (this.has_b)
                writer.writeMessage(2, this.b, () => this.b.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofCompositionalAnd {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofCompositionalAnd();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.a, () => message.a = Proof.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.b, () => message.b = Proof.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofCompositionalAnd {
            return ProofCompositionalAnd.deserialize(bytes);
        }
    }
    export class ProofCompositionalOr extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            a?: Proof;
            b?: Proof;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("a" in data && data.a != undefined) {
                    this.a = data.a;
                }
                if ("b" in data && data.b != undefined) {
                    this.b = data.b;
                }
            }
        }
        get a() {
            return pb_1.Message.getWrapperField(this, Proof, 1) as Proof;
        }
        set a(value: Proof) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_a() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get b() {
            return pb_1.Message.getWrapperField(this, Proof, 2) as Proof;
        }
        set b(value: Proof) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_b() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            a?: ReturnType<typeof Proof.prototype.toObject>;
            b?: ReturnType<typeof Proof.prototype.toObject>;
        }): ProofCompositionalOr {
            const message = new ProofCompositionalOr({});
            if (data.a != null) {
                message.a = Proof.fromObject(data.a);
            }
            if (data.b != null) {
                message.b = Proof.fromObject(data.b);
            }
            return message;
        }
        toObject() {
            const data: {
                a?: ReturnType<typeof Proof.prototype.toObject>;
                b?: ReturnType<typeof Proof.prototype.toObject>;
            } = {};
            if (this.a != null) {
                data.a = this.a.toObject();
            }
            if (this.b != null) {
                data.b = this.b.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_a)
                writer.writeMessage(1, this.a, () => this.a.serialize(writer));
            if (this.has_b)
                writer.writeMessage(2, this.b, () => this.b.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofCompositionalOr {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofCompositionalOr();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.a, () => message.a = Proof.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.b, () => message.b = Proof.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofCompositionalOr {
            return ProofCompositionalOr.deserialize(bytes);
        }
    }
    export class ProofCompositionalNot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            a?: Proof;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("a" in data && data.a != undefined) {
                    this.a = data.a;
                }
            }
        }
        get a() {
            return pb_1.Message.getWrapperField(this, Proof, 1) as Proof;
        }
        set a(value: Proof) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_a() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            a?: ReturnType<typeof Proof.prototype.toObject>;
        }): ProofCompositionalNot {
            const message = new ProofCompositionalNot({});
            if (data.a != null) {
                message.a = Proof.fromObject(data.a);
            }
            return message;
        }
        toObject() {
            const data: {
                a?: ReturnType<typeof Proof.prototype.toObject>;
            } = {};
            if (this.a != null) {
                data.a = this.a.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_a)
                writer.writeMessage(1, this.a, () => this.a.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofCompositionalNot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofCompositionalNot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.a, () => message.a = Proof.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofCompositionalNot {
            return ProofCompositionalNot.deserialize(bytes);
        }
    }
    export class ProofContextualHeightLock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ProofContextualHeightLock {
            const message = new ProofContextualHeightLock({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofContextualHeightLock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofContextualHeightLock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofContextualHeightLock {
            return ProofContextualHeightLock.deserialize(bytes);
        }
    }
    export class ProofContextualRequiredTransactionIO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ProofContextualRequiredTransactionIO {
            const message = new ProofContextualRequiredTransactionIO({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofContextualRequiredTransactionIO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofContextualRequiredTransactionIO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofContextualRequiredTransactionIO {
            return ProofContextualRequiredTransactionIO.deserialize(bytes);
        }
    }
}
