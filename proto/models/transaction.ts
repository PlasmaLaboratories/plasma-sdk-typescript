/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: models/transaction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./address";
import * as dependency_2 from "./box";
import * as dependency_3 from "./proof";
import * as dependency_4 from "./proposition";
import * as pb_1 from "google-protobuf";
export namespace co.topl.proto.models {
    export class Transaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inputs?: Transaction.Input[];
            outputs?: Transaction.UnspentOutput[];
            schedule?: Transaction.Schedule;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inputs" in data && data.inputs != undefined) {
                    this.inputs = data.inputs;
                }
                if ("outputs" in data && data.outputs != undefined) {
                    this.outputs = data.outputs;
                }
                if ("schedule" in data && data.schedule != undefined) {
                    this.schedule = data.schedule;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get inputs() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction.Input, 1) as Transaction.Input[];
        }
        set inputs(value: Transaction.Input[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get outputs() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction.UnspentOutput, 2) as Transaction.UnspentOutput[];
        }
        set outputs(value: Transaction.UnspentOutput[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get schedule() {
            return pb_1.Message.getWrapperField(this, Transaction.Schedule, 3) as Transaction.Schedule;
        }
        set schedule(value: Transaction.Schedule) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_schedule() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            inputs?: ReturnType<typeof Transaction.Input.prototype.toObject>[];
            outputs?: ReturnType<typeof Transaction.UnspentOutput.prototype.toObject>[];
            schedule?: ReturnType<typeof Transaction.Schedule.prototype.toObject>;
            data?: Uint8Array;
        }): Transaction {
            const message = new Transaction({});
            if (data.inputs != null) {
                message.inputs = data.inputs.map(item => Transaction.Input.fromObject(item));
            }
            if (data.outputs != null) {
                message.outputs = data.outputs.map(item => Transaction.UnspentOutput.fromObject(item));
            }
            if (data.schedule != null) {
                message.schedule = Transaction.Schedule.fromObject(data.schedule);
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                inputs?: ReturnType<typeof Transaction.Input.prototype.toObject>[];
                outputs?: ReturnType<typeof Transaction.UnspentOutput.prototype.toObject>[];
                schedule?: ReturnType<typeof Transaction.Schedule.prototype.toObject>;
                data?: Uint8Array;
            } = {};
            if (this.inputs != null) {
                data.inputs = this.inputs.map((item: Transaction.Input) => item.toObject());
            }
            if (this.outputs != null) {
                data.outputs = this.outputs.map((item: Transaction.UnspentOutput) => item.toObject());
            }
            if (this.schedule != null) {
                data.schedule = this.schedule.toObject();
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inputs.length)
                writer.writeRepeatedMessage(1, this.inputs, (item: Transaction.Input) => item.serialize(writer));
            if (this.outputs.length)
                writer.writeRepeatedMessage(2, this.outputs, (item: Transaction.UnspentOutput) => item.serialize(writer));
            if (this.has_schedule)
                writer.writeMessage(3, this.schedule, () => this.schedule.serialize(writer));
            if (this.data.length)
                writer.writeBytes(4, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inputs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Transaction.Input.deserialize(reader), Transaction.Input));
                        break;
                    case 2:
                        reader.readMessage(message.outputs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Transaction.UnspentOutput.deserialize(reader), Transaction.UnspentOutput));
                        break;
                    case 3:
                        reader.readMessage(message.schedule, () => message.schedule = Transaction.Schedule.deserialize(reader));
                        break;
                    case 4:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
    export namespace Transaction {
        export class Input extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                boxId?: dependency_2.co.topl.proto.models.Box.Id;
                proposition?: dependency_4.co.topl.proto.models.Proposition;
                proof?: dependency_3.co.topl.proto.models.Proof;
                value?: dependency_2.co.topl.proto.models.BoxValue;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("boxId" in data && data.boxId != undefined) {
                        this.boxId = data.boxId;
                    }
                    if ("proposition" in data && data.proposition != undefined) {
                        this.proposition = data.proposition;
                    }
                    if ("proof" in data && data.proof != undefined) {
                        this.proof = data.proof;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                }
            }
            get boxId() {
                return pb_1.Message.getWrapperField(this, dependency_2.co.topl.proto.models.Box.Id, 1) as dependency_2.co.topl.proto.models.Box.Id;
            }
            set boxId(value: dependency_2.co.topl.proto.models.Box.Id) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_boxId() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get proposition() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.proto.models.Proposition, 2) as dependency_4.co.topl.proto.models.Proposition;
            }
            set proposition(value: dependency_4.co.topl.proto.models.Proposition) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_proposition() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get proof() {
                return pb_1.Message.getWrapperField(this, dependency_3.co.topl.proto.models.Proof, 3) as dependency_3.co.topl.proto.models.Proof;
            }
            set proof(value: dependency_3.co.topl.proto.models.Proof) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_proof() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get value() {
                return pb_1.Message.getWrapperField(this, dependency_2.co.topl.proto.models.BoxValue, 4) as dependency_2.co.topl.proto.models.BoxValue;
            }
            set value(value: dependency_2.co.topl.proto.models.BoxValue) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_value() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                boxId?: ReturnType<typeof dependency_2.co.topl.proto.models.Box.Id.prototype.toObject>;
                proposition?: ReturnType<typeof dependency_4.co.topl.proto.models.Proposition.prototype.toObject>;
                proof?: ReturnType<typeof dependency_3.co.topl.proto.models.Proof.prototype.toObject>;
                value?: ReturnType<typeof dependency_2.co.topl.proto.models.BoxValue.prototype.toObject>;
            }): Input {
                const message = new Input({});
                if (data.boxId != null) {
                    message.boxId = dependency_2.co.topl.proto.models.Box.Id.fromObject(data.boxId);
                }
                if (data.proposition != null) {
                    message.proposition = dependency_4.co.topl.proto.models.Proposition.fromObject(data.proposition);
                }
                if (data.proof != null) {
                    message.proof = dependency_3.co.topl.proto.models.Proof.fromObject(data.proof);
                }
                if (data.value != null) {
                    message.value = dependency_2.co.topl.proto.models.BoxValue.fromObject(data.value);
                }
                return message;
            }
            toObject() {
                const data: {
                    boxId?: ReturnType<typeof dependency_2.co.topl.proto.models.Box.Id.prototype.toObject>;
                    proposition?: ReturnType<typeof dependency_4.co.topl.proto.models.Proposition.prototype.toObject>;
                    proof?: ReturnType<typeof dependency_3.co.topl.proto.models.Proof.prototype.toObject>;
                    value?: ReturnType<typeof dependency_2.co.topl.proto.models.BoxValue.prototype.toObject>;
                } = {};
                if (this.boxId != null) {
                    data.boxId = this.boxId.toObject();
                }
                if (this.proposition != null) {
                    data.proposition = this.proposition.toObject();
                }
                if (this.proof != null) {
                    data.proof = this.proof.toObject();
                }
                if (this.value != null) {
                    data.value = this.value.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_boxId)
                    writer.writeMessage(1, this.boxId, () => this.boxId.serialize(writer));
                if (this.has_proposition)
                    writer.writeMessage(2, this.proposition, () => this.proposition.serialize(writer));
                if (this.has_proof)
                    writer.writeMessage(3, this.proof, () => this.proof.serialize(writer));
                if (this.has_value)
                    writer.writeMessage(4, this.value, () => this.value.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Input {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Input();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.boxId, () => message.boxId = dependency_2.co.topl.proto.models.Box.Id.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.proposition, () => message.proposition = dependency_4.co.topl.proto.models.Proposition.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.proof, () => message.proof = dependency_3.co.topl.proto.models.Proof.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.value, () => message.value = dependency_2.co.topl.proto.models.BoxValue.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Input {
                return Input.deserialize(bytes);
            }
        }
        export class UnspentOutput extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                address?: dependency_1.co.topl.proto.models.FullAddress;
                value?: dependency_2.co.topl.proto.models.BoxValue;
                minting?: boolean;
                metadata?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("address" in data && data.address != undefined) {
                        this.address = data.address;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                    if ("minting" in data && data.minting != undefined) {
                        this.minting = data.minting;
                    }
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
            }
            get address() {
                return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.FullAddress, 1) as dependency_1.co.topl.proto.models.FullAddress;
            }
            set address(value: dependency_1.co.topl.proto.models.FullAddress) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_address() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get value() {
                return pb_1.Message.getWrapperField(this, dependency_2.co.topl.proto.models.BoxValue, 2) as dependency_2.co.topl.proto.models.BoxValue;
            }
            set value(value: dependency_2.co.topl.proto.models.BoxValue) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_value() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get minting() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set minting(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            get metadata() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set metadata(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                address?: ReturnType<typeof dependency_1.co.topl.proto.models.FullAddress.prototype.toObject>;
                value?: ReturnType<typeof dependency_2.co.topl.proto.models.BoxValue.prototype.toObject>;
                minting?: boolean;
                metadata?: Uint8Array;
            }): UnspentOutput {
                const message = new UnspentOutput({});
                if (data.address != null) {
                    message.address = dependency_1.co.topl.proto.models.FullAddress.fromObject(data.address);
                }
                if (data.value != null) {
                    message.value = dependency_2.co.topl.proto.models.BoxValue.fromObject(data.value);
                }
                if (data.minting != null) {
                    message.minting = data.minting;
                }
                if (data.metadata != null) {
                    message.metadata = data.metadata;
                }
                return message;
            }
            toObject() {
                const data: {
                    address?: ReturnType<typeof dependency_1.co.topl.proto.models.FullAddress.prototype.toObject>;
                    value?: ReturnType<typeof dependency_2.co.topl.proto.models.BoxValue.prototype.toObject>;
                    minting?: boolean;
                    metadata?: Uint8Array;
                } = {};
                if (this.address != null) {
                    data.address = this.address.toObject();
                }
                if (this.value != null) {
                    data.value = this.value.toObject();
                }
                if (this.minting != null) {
                    data.minting = this.minting;
                }
                if (this.metadata != null) {
                    data.metadata = this.metadata;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_address)
                    writer.writeMessage(1, this.address, () => this.address.serialize(writer));
                if (this.has_value)
                    writer.writeMessage(2, this.value, () => this.value.serialize(writer));
                if (this.minting != false)
                    writer.writeBool(3, this.minting);
                if (this.metadata.length)
                    writer.writeBytes(4, this.metadata);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnspentOutput {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnspentOutput();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.address, () => message.address = dependency_1.co.topl.proto.models.FullAddress.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.value, () => message.value = dependency_2.co.topl.proto.models.BoxValue.deserialize(reader));
                            break;
                        case 3:
                            message.minting = reader.readBool();
                            break;
                        case 4:
                            message.metadata = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UnspentOutput {
                return UnspentOutput.deserialize(bytes);
            }
        }
        export class Schedule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                creation?: number;
                minimumSlot?: number;
                maximumSlot?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("creation" in data && data.creation != undefined) {
                        this.creation = data.creation;
                    }
                    if ("minimumSlot" in data && data.minimumSlot != undefined) {
                        this.minimumSlot = data.minimumSlot;
                    }
                    if ("maximumSlot" in data && data.maximumSlot != undefined) {
                        this.maximumSlot = data.maximumSlot;
                    }
                }
            }
            get creation() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set creation(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get minimumSlot() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set minimumSlot(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get maximumSlot() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set maximumSlot(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                creation?: number;
                minimumSlot?: number;
                maximumSlot?: number;
            }): Schedule {
                const message = new Schedule({});
                if (data.creation != null) {
                    message.creation = data.creation;
                }
                if (data.minimumSlot != null) {
                    message.minimumSlot = data.minimumSlot;
                }
                if (data.maximumSlot != null) {
                    message.maximumSlot = data.maximumSlot;
                }
                return message;
            }
            toObject() {
                const data: {
                    creation?: number;
                    minimumSlot?: number;
                    maximumSlot?: number;
                } = {};
                if (this.creation != null) {
                    data.creation = this.creation;
                }
                if (this.minimumSlot != null) {
                    data.minimumSlot = this.minimumSlot;
                }
                if (this.maximumSlot != null) {
                    data.maximumSlot = this.maximumSlot;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.creation != 0)
                    writer.writeUint64(1, this.creation);
                if (this.minimumSlot != 0)
                    writer.writeUint64(2, this.minimumSlot);
                if (this.maximumSlot != 0)
                    writer.writeUint64(3, this.maximumSlot);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Schedule {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Schedule();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.creation = reader.readUint64();
                            break;
                        case 2:
                            message.minimumSlot = reader.readUint64();
                            break;
                        case 3:
                            message.maximumSlot = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Schedule {
                return Schedule.deserialize(bytes);
            }
        }
    }
}
