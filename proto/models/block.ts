/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: models/block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as dependency_2 from "./address";
import * as dependency_3 from "./certificate";
import * as dependency_4 from "./transaction";
import * as pb_1 from "google-protobuf";
export namespace co.topl.proto.models {
    export class BlockHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parentHeaderId?: dependency_1.co.topl.proto.models.BlockId;
            parentSlot?: number;
            txRoot?: Uint8Array;
            bloomFilter?: Uint8Array;
            timestamp?: number;
            height?: number;
            slot?: number;
            eligibilityCertificate?: dependency_3.co.topl.proto.models.EligibilityCertificate;
            operationalCertificate?: dependency_3.co.topl.proto.models.OperationalCertificate;
            metadata?: Uint8Array;
            address?: dependency_2.co.topl.proto.models.StakingAddressOperator;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parentHeaderId" in data && data.parentHeaderId != undefined) {
                    this.parentHeaderId = data.parentHeaderId;
                }
                if ("parentSlot" in data && data.parentSlot != undefined) {
                    this.parentSlot = data.parentSlot;
                }
                if ("txRoot" in data && data.txRoot != undefined) {
                    this.txRoot = data.txRoot;
                }
                if ("bloomFilter" in data && data.bloomFilter != undefined) {
                    this.bloomFilter = data.bloomFilter;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("slot" in data && data.slot != undefined) {
                    this.slot = data.slot;
                }
                if ("eligibilityCertificate" in data && data.eligibilityCertificate != undefined) {
                    this.eligibilityCertificate = data.eligibilityCertificate;
                }
                if ("operationalCertificate" in data && data.operationalCertificate != undefined) {
                    this.operationalCertificate = data.operationalCertificate;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get parentHeaderId() {
            return pb_1.Message.getWrapperField(this, dependency_1.co.topl.proto.models.BlockId, 1) as dependency_1.co.topl.proto.models.BlockId;
        }
        set parentHeaderId(value: dependency_1.co.topl.proto.models.BlockId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_parentHeaderId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get parentSlot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set parentSlot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get txRoot() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set txRoot(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get bloomFilter() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set bloomFilter(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get slot() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set slot(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get eligibilityCertificate() {
            return pb_1.Message.getWrapperField(this, dependency_3.co.topl.proto.models.EligibilityCertificate, 8) as dependency_3.co.topl.proto.models.EligibilityCertificate;
        }
        set eligibilityCertificate(value: dependency_3.co.topl.proto.models.EligibilityCertificate) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_eligibilityCertificate() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get operationalCertificate() {
            return pb_1.Message.getWrapperField(this, dependency_3.co.topl.proto.models.OperationalCertificate, 9) as dependency_3.co.topl.proto.models.OperationalCertificate;
        }
        set operationalCertificate(value: dependency_3.co.topl.proto.models.OperationalCertificate) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_operationalCertificate() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 10, value);
        }
        get address() {
            return pb_1.Message.getWrapperField(this, dependency_2.co.topl.proto.models.StakingAddressOperator, 11) as dependency_2.co.topl.proto.models.StakingAddressOperator;
        }
        set address(value: dependency_2.co.topl.proto.models.StakingAddressOperator) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            parentHeaderId?: ReturnType<typeof dependency_1.co.topl.proto.models.BlockId.prototype.toObject>;
            parentSlot?: number;
            txRoot?: Uint8Array;
            bloomFilter?: Uint8Array;
            timestamp?: number;
            height?: number;
            slot?: number;
            eligibilityCertificate?: ReturnType<typeof dependency_3.co.topl.proto.models.EligibilityCertificate.prototype.toObject>;
            operationalCertificate?: ReturnType<typeof dependency_3.co.topl.proto.models.OperationalCertificate.prototype.toObject>;
            metadata?: Uint8Array;
            address?: ReturnType<typeof dependency_2.co.topl.proto.models.StakingAddressOperator.prototype.toObject>;
        }): BlockHeader {
            const message = new BlockHeader({});
            if (data.parentHeaderId != null) {
                message.parentHeaderId = dependency_1.co.topl.proto.models.BlockId.fromObject(data.parentHeaderId);
            }
            if (data.parentSlot != null) {
                message.parentSlot = data.parentSlot;
            }
            if (data.txRoot != null) {
                message.txRoot = data.txRoot;
            }
            if (data.bloomFilter != null) {
                message.bloomFilter = data.bloomFilter;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.slot != null) {
                message.slot = data.slot;
            }
            if (data.eligibilityCertificate != null) {
                message.eligibilityCertificate = dependency_3.co.topl.proto.models.EligibilityCertificate.fromObject(data.eligibilityCertificate);
            }
            if (data.operationalCertificate != null) {
                message.operationalCertificate = dependency_3.co.topl.proto.models.OperationalCertificate.fromObject(data.operationalCertificate);
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.address != null) {
                message.address = dependency_2.co.topl.proto.models.StakingAddressOperator.fromObject(data.address);
            }
            return message;
        }
        toObject() {
            const data: {
                parentHeaderId?: ReturnType<typeof dependency_1.co.topl.proto.models.BlockId.prototype.toObject>;
                parentSlot?: number;
                txRoot?: Uint8Array;
                bloomFilter?: Uint8Array;
                timestamp?: number;
                height?: number;
                slot?: number;
                eligibilityCertificate?: ReturnType<typeof dependency_3.co.topl.proto.models.EligibilityCertificate.prototype.toObject>;
                operationalCertificate?: ReturnType<typeof dependency_3.co.topl.proto.models.OperationalCertificate.prototype.toObject>;
                metadata?: Uint8Array;
                address?: ReturnType<typeof dependency_2.co.topl.proto.models.StakingAddressOperator.prototype.toObject>;
            } = {};
            if (this.parentHeaderId != null) {
                data.parentHeaderId = this.parentHeaderId.toObject();
            }
            if (this.parentSlot != null) {
                data.parentSlot = this.parentSlot;
            }
            if (this.txRoot != null) {
                data.txRoot = this.txRoot;
            }
            if (this.bloomFilter != null) {
                data.bloomFilter = this.bloomFilter;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.slot != null) {
                data.slot = this.slot;
            }
            if (this.eligibilityCertificate != null) {
                data.eligibilityCertificate = this.eligibilityCertificate.toObject();
            }
            if (this.operationalCertificate != null) {
                data.operationalCertificate = this.operationalCertificate.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.address != null) {
                data.address = this.address.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_parentHeaderId)
                writer.writeMessage(1, this.parentHeaderId, () => this.parentHeaderId.serialize(writer));
            if (this.parentSlot != 0)
                writer.writeUint64(2, this.parentSlot);
            if (this.txRoot.length)
                writer.writeBytes(3, this.txRoot);
            if (this.bloomFilter.length)
                writer.writeBytes(4, this.bloomFilter);
            if (this.timestamp != 0)
                writer.writeUint64(5, this.timestamp);
            if (this.height != 0)
                writer.writeUint64(6, this.height);
            if (this.slot != 0)
                writer.writeUint64(7, this.slot);
            if (this.has_eligibilityCertificate)
                writer.writeMessage(8, this.eligibilityCertificate, () => this.eligibilityCertificate.serialize(writer));
            if (this.has_operationalCertificate)
                writer.writeMessage(9, this.operationalCertificate, () => this.operationalCertificate.serialize(writer));
            if (this.metadata.length)
                writer.writeBytes(10, this.metadata);
            if (this.has_address)
                writer.writeMessage(11, this.address, () => this.address.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.parentHeaderId, () => message.parentHeaderId = dependency_1.co.topl.proto.models.BlockId.deserialize(reader));
                        break;
                    case 2:
                        message.parentSlot = reader.readUint64();
                        break;
                    case 3:
                        message.txRoot = reader.readBytes();
                        break;
                    case 4:
                        message.bloomFilter = reader.readBytes();
                        break;
                    case 5:
                        message.timestamp = reader.readUint64();
                        break;
                    case 6:
                        message.height = reader.readUint64();
                        break;
                    case 7:
                        message.slot = reader.readUint64();
                        break;
                    case 8:
                        reader.readMessage(message.eligibilityCertificate, () => message.eligibilityCertificate = dependency_3.co.topl.proto.models.EligibilityCertificate.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.operationalCertificate, () => message.operationalCertificate = dependency_3.co.topl.proto.models.OperationalCertificate.deserialize(reader));
                        break;
                    case 10:
                        message.metadata = reader.readBytes();
                        break;
                    case 11:
                        reader.readMessage(message.address, () => message.address = dependency_2.co.topl.proto.models.StakingAddressOperator.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockHeader {
            return BlockHeader.deserialize(bytes);
        }
    }
    export class BlockBody extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactionIds?: dependency_1.co.topl.proto.models.TransactionId[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactionIds" in data && data.transactionIds != undefined) {
                    this.transactionIds = data.transactionIds;
                }
            }
        }
        get transactionIds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.co.topl.proto.models.TransactionId, 1) as dependency_1.co.topl.proto.models.TransactionId[];
        }
        set transactionIds(value: dependency_1.co.topl.proto.models.TransactionId[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transactionIds?: ReturnType<typeof dependency_1.co.topl.proto.models.TransactionId.prototype.toObject>[];
        }): BlockBody {
            const message = new BlockBody({});
            if (data.transactionIds != null) {
                message.transactionIds = data.transactionIds.map(item => dependency_1.co.topl.proto.models.TransactionId.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transactionIds?: ReturnType<typeof dependency_1.co.topl.proto.models.TransactionId.prototype.toObject>[];
            } = {};
            if (this.transactionIds != null) {
                data.transactionIds = this.transactionIds.map((item: dependency_1.co.topl.proto.models.TransactionId) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactionIds.length)
                writer.writeRepeatedMessage(1, this.transactionIds, (item: dependency_1.co.topl.proto.models.TransactionId) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockBody {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockBody();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactionIds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.co.topl.proto.models.TransactionId.deserialize(reader), dependency_1.co.topl.proto.models.TransactionId));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockBody {
            return BlockBody.deserialize(bytes);
        }
    }
    export class FullBlockBody extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: dependency_4.co.topl.proto.models.Transaction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.co.topl.proto.models.Transaction, 1) as dependency_4.co.topl.proto.models.Transaction[];
        }
        set transaction(value: dependency_4.co.topl.proto.models.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof dependency_4.co.topl.proto.models.Transaction.prototype.toObject>[];
        }): FullBlockBody {
            const message = new FullBlockBody({});
            if (data.transaction != null) {
                message.transaction = data.transaction.map(item => dependency_4.co.topl.proto.models.Transaction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof dependency_4.co.topl.proto.models.Transaction.prototype.toObject>[];
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.map((item: dependency_4.co.topl.proto.models.Transaction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction.length)
                writer.writeRepeatedMessage(1, this.transaction, (item: dependency_4.co.topl.proto.models.Transaction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FullBlockBody {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FullBlockBody();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.co.topl.proto.models.Transaction.deserialize(reader), dependency_4.co.topl.proto.models.Transaction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FullBlockBody {
            return FullBlockBody.deserialize(bytes);
        }
    }
    export class FullBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: BlockHeader;
            fullBody?: FullBlockBody;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("fullBody" in data && data.fullBody != undefined) {
                    this.fullBody = data.fullBody;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, BlockHeader, 1) as BlockHeader;
        }
        set header(value: BlockHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get fullBody() {
            return pb_1.Message.getWrapperField(this, FullBlockBody, 2) as FullBlockBody;
        }
        set fullBody(value: FullBlockBody) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_fullBody() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof BlockHeader.prototype.toObject>;
            fullBody?: ReturnType<typeof FullBlockBody.prototype.toObject>;
        }): FullBlock {
            const message = new FullBlock({});
            if (data.header != null) {
                message.header = BlockHeader.fromObject(data.header);
            }
            if (data.fullBody != null) {
                message.fullBody = FullBlockBody.fromObject(data.fullBody);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof BlockHeader.prototype.toObject>;
                fullBody?: ReturnType<typeof FullBlockBody.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.fullBody != null) {
                data.fullBody = this.fullBody.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_fullBody)
                writer.writeMessage(2, this.fullBody, () => this.fullBody.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FullBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FullBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = BlockHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.fullBody, () => message.fullBody = FullBlockBody.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FullBlock {
            return FullBlock.deserialize(bytes);
        }
    }
}
