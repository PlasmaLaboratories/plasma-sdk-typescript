/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: consensus/models/operational_certificate.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../scalapb/scalapb";
import * as dependency_3 from "./../../scalapb/validate";
import * as pb_1 from "google-protobuf";
export namespace co.topl.consensus.models {
    export class OperationalCertificate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parentVK?: VerificationKeyKesProduct;
            parentSignature?: SignatureKesProduct;
            childVK?: VerificationKeyEd25519;
            childSignature?: SignatureEd25519;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parentVK" in data && data.parentVK != undefined) {
                    this.parentVK = data.parentVK;
                }
                if ("parentSignature" in data && data.parentSignature != undefined) {
                    this.parentSignature = data.parentSignature;
                }
                if ("childVK" in data && data.childVK != undefined) {
                    this.childVK = data.childVK;
                }
                if ("childSignature" in data && data.childSignature != undefined) {
                    this.childSignature = data.childSignature;
                }
            }
        }
        get parentVK() {
            return pb_1.Message.getWrapperField(this, VerificationKeyKesProduct, 1) as VerificationKeyKesProduct;
        }
        set parentVK(value: VerificationKeyKesProduct) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_parentVK() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get parentSignature() {
            return pb_1.Message.getWrapperField(this, SignatureKesProduct, 2) as SignatureKesProduct;
        }
        set parentSignature(value: SignatureKesProduct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_parentSignature() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get childVK() {
            return pb_1.Message.getWrapperField(this, VerificationKeyEd25519, 3) as VerificationKeyEd25519;
        }
        set childVK(value: VerificationKeyEd25519) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_childVK() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get childSignature() {
            return pb_1.Message.getWrapperField(this, SignatureEd25519, 4) as SignatureEd25519;
        }
        set childSignature(value: SignatureEd25519) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_childSignature() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            parentVK?: ReturnType<typeof VerificationKeyKesProduct.prototype.toObject>;
            parentSignature?: ReturnType<typeof SignatureKesProduct.prototype.toObject>;
            childVK?: ReturnType<typeof VerificationKeyEd25519.prototype.toObject>;
            childSignature?: ReturnType<typeof SignatureEd25519.prototype.toObject>;
        }): OperationalCertificate {
            const message = new OperationalCertificate({});
            if (data.parentVK != null) {
                message.parentVK = VerificationKeyKesProduct.fromObject(data.parentVK);
            }
            if (data.parentSignature != null) {
                message.parentSignature = SignatureKesProduct.fromObject(data.parentSignature);
            }
            if (data.childVK != null) {
                message.childVK = VerificationKeyEd25519.fromObject(data.childVK);
            }
            if (data.childSignature != null) {
                message.childSignature = SignatureEd25519.fromObject(data.childSignature);
            }
            return message;
        }
        toObject() {
            const data: {
                parentVK?: ReturnType<typeof VerificationKeyKesProduct.prototype.toObject>;
                parentSignature?: ReturnType<typeof SignatureKesProduct.prototype.toObject>;
                childVK?: ReturnType<typeof VerificationKeyEd25519.prototype.toObject>;
                childSignature?: ReturnType<typeof SignatureEd25519.prototype.toObject>;
            } = {};
            if (this.parentVK != null) {
                data.parentVK = this.parentVK.toObject();
            }
            if (this.parentSignature != null) {
                data.parentSignature = this.parentSignature.toObject();
            }
            if (this.childVK != null) {
                data.childVK = this.childVK.toObject();
            }
            if (this.childSignature != null) {
                data.childSignature = this.childSignature.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_parentVK)
                writer.writeMessage(1, this.parentVK, () => this.parentVK.serialize(writer));
            if (this.has_parentSignature)
                writer.writeMessage(2, this.parentSignature, () => this.parentSignature.serialize(writer));
            if (this.has_childVK)
                writer.writeMessage(3, this.childVK, () => this.childVK.serialize(writer));
            if (this.has_childSignature)
                writer.writeMessage(4, this.childSignature, () => this.childSignature.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperationalCertificate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperationalCertificate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.parentVK, () => message.parentVK = VerificationKeyKesProduct.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.parentSignature, () => message.parentSignature = SignatureKesProduct.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.childVK, () => message.childVK = VerificationKeyEd25519.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.childSignature, () => message.childSignature = SignatureEd25519.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperationalCertificate {
            return OperationalCertificate.deserialize(bytes);
        }
    }
    export class VerificationKeyKesProduct extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
            step?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("step" in data && data.step != undefined) {
                    this.step = data.step;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get step() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set step(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
            step?: number;
        }): VerificationKeyKesProduct {
            const message = new VerificationKeyKesProduct({});
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.step != null) {
                message.step = data.step;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
                step?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.step != null) {
                data.step = this.step;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (this.step != 0)
                writer.writeUint32(2, this.step);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerificationKeyKesProduct {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerificationKeyKesProduct();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    case 2:
                        message.step = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerificationKeyKesProduct {
            return VerificationKeyKesProduct.deserialize(bytes);
        }
    }
    export class SignatureKesSum extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verificationKey?: VerificationKeyEd25519;
            signature?: SignatureEd25519;
            witness?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verificationKey" in data && data.verificationKey != undefined) {
                    this.verificationKey = data.verificationKey;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("witness" in data && data.witness != undefined) {
                    this.witness = data.witness;
                }
            }
        }
        get verificationKey() {
            return pb_1.Message.getWrapperField(this, VerificationKeyEd25519, 1) as VerificationKeyEd25519;
        }
        set verificationKey(value: VerificationKeyEd25519) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_verificationKey() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signature() {
            return pb_1.Message.getWrapperField(this, SignatureEd25519, 2) as SignatureEd25519;
        }
        set signature(value: SignatureEd25519) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_signature() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get witness() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set witness(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            verificationKey?: ReturnType<typeof VerificationKeyEd25519.prototype.toObject>;
            signature?: ReturnType<typeof SignatureEd25519.prototype.toObject>;
            witness?: Uint8Array[];
        }): SignatureKesSum {
            const message = new SignatureKesSum({});
            if (data.verificationKey != null) {
                message.verificationKey = VerificationKeyEd25519.fromObject(data.verificationKey);
            }
            if (data.signature != null) {
                message.signature = SignatureEd25519.fromObject(data.signature);
            }
            if (data.witness != null) {
                message.witness = data.witness;
            }
            return message;
        }
        toObject() {
            const data: {
                verificationKey?: ReturnType<typeof VerificationKeyEd25519.prototype.toObject>;
                signature?: ReturnType<typeof SignatureEd25519.prototype.toObject>;
                witness?: Uint8Array[];
            } = {};
            if (this.verificationKey != null) {
                data.verificationKey = this.verificationKey.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature.toObject();
            }
            if (this.witness != null) {
                data.witness = this.witness;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_verificationKey)
                writer.writeMessage(1, this.verificationKey, () => this.verificationKey.serialize(writer));
            if (this.has_signature)
                writer.writeMessage(2, this.signature, () => this.signature.serialize(writer));
            if (this.witness.length)
                writer.writeRepeatedBytes(3, this.witness);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignatureKesSum {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignatureKesSum();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.verificationKey, () => message.verificationKey = VerificationKeyEd25519.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.signature, () => message.signature = SignatureEd25519.deserialize(reader));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignatureKesSum {
            return SignatureKesSum.deserialize(bytes);
        }
    }
    export class SignatureKesProduct extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            superSignature?: SignatureKesSum;
            subSignature?: SignatureKesSum;
            subRoot?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("superSignature" in data && data.superSignature != undefined) {
                    this.superSignature = data.superSignature;
                }
                if ("subSignature" in data && data.subSignature != undefined) {
                    this.subSignature = data.subSignature;
                }
                if ("subRoot" in data && data.subRoot != undefined) {
                    this.subRoot = data.subRoot;
                }
            }
        }
        get superSignature() {
            return pb_1.Message.getWrapperField(this, SignatureKesSum, 1) as SignatureKesSum;
        }
        set superSignature(value: SignatureKesSum) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_superSignature() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get subSignature() {
            return pb_1.Message.getWrapperField(this, SignatureKesSum, 2) as SignatureKesSum;
        }
        set subSignature(value: SignatureKesSum) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_subSignature() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get subRoot() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set subRoot(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            superSignature?: ReturnType<typeof SignatureKesSum.prototype.toObject>;
            subSignature?: ReturnType<typeof SignatureKesSum.prototype.toObject>;
            subRoot?: Uint8Array;
        }): SignatureKesProduct {
            const message = new SignatureKesProduct({});
            if (data.superSignature != null) {
                message.superSignature = SignatureKesSum.fromObject(data.superSignature);
            }
            if (data.subSignature != null) {
                message.subSignature = SignatureKesSum.fromObject(data.subSignature);
            }
            if (data.subRoot != null) {
                message.subRoot = data.subRoot;
            }
            return message;
        }
        toObject() {
            const data: {
                superSignature?: ReturnType<typeof SignatureKesSum.prototype.toObject>;
                subSignature?: ReturnType<typeof SignatureKesSum.prototype.toObject>;
                subRoot?: Uint8Array;
            } = {};
            if (this.superSignature != null) {
                data.superSignature = this.superSignature.toObject();
            }
            if (this.subSignature != null) {
                data.subSignature = this.subSignature.toObject();
            }
            if (this.subRoot != null) {
                data.subRoot = this.subRoot;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_superSignature)
                writer.writeMessage(1, this.superSignature, () => this.superSignature.serialize(writer));
            if (this.has_subSignature)
                writer.writeMessage(2, this.subSignature, () => this.subSignature.serialize(writer));
            if (this.subRoot.length)
                writer.writeBytes(3, this.subRoot);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignatureKesProduct {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignatureKesProduct();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.superSignature, () => message.superSignature = SignatureKesSum.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.subSignature, () => message.subSignature = SignatureKesSum.deserialize(reader));
                        break;
                    case 3:
                        message.subRoot = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignatureKesProduct {
            return SignatureKesProduct.deserialize(bytes);
        }
    }
    export class VerificationKeyEd25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): VerificationKeyEd25519 {
            const message = new VerificationKeyEd25519({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerificationKeyEd25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerificationKeyEd25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerificationKeyEd25519 {
            return VerificationKeyEd25519.deserialize(bytes);
        }
    }
    export class SecretKeyEd25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): SecretKeyEd25519 {
            const message = new SecretKeyEd25519({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecretKeyEd25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecretKeyEd25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecretKeyEd25519 {
            return SecretKeyEd25519.deserialize(bytes);
        }
    }
    export class SignatureEd25519 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): SignatureEd25519 {
            const message = new SignatureEd25519({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignatureEd25519 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignatureEd25519();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignatureEd25519 {
            return SignatureEd25519.deserialize(bytes);
        }
    }
}
