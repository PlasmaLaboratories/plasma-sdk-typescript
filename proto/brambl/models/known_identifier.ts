/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/known_identifier.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../scalapb/scalapb";
import * as dependency_3 from "./../../scalapb/validate";
import * as dependency_4 from "./identifier";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models {
    export class KnownIdentifier extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            transactionOutput32?: KnownIdentifier.TransactionOutput32;
            transactionOutput64?: never;
        } | {
            transactionOutput32?: never;
            transactionOutput64?: KnownIdentifier.TransactionOutput64;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactionOutput32" in data && data.transactionOutput32 != undefined) {
                    this.transactionOutput32 = data.transactionOutput32;
                }
                if ("transactionOutput64" in data && data.transactionOutput64 != undefined) {
                    this.transactionOutput64 = data.transactionOutput64;
                }
            }
        }
        get transactionOutput32() {
            return pb_1.Message.getWrapperField(this, KnownIdentifier.TransactionOutput32, 1) as KnownIdentifier.TransactionOutput32;
        }
        set transactionOutput32(value: KnownIdentifier.TransactionOutput32) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_transactionOutput32() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get transactionOutput64() {
            return pb_1.Message.getWrapperField(this, KnownIdentifier.TransactionOutput64, 2) as KnownIdentifier.TransactionOutput64;
        }
        set transactionOutput64(value: KnownIdentifier.TransactionOutput64) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_transactionOutput64() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "transactionOutput32" | "transactionOutput64";
            } = {
                0: "none",
                1: "transactionOutput32",
                2: "transactionOutput64"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            transactionOutput32?: ReturnType<typeof KnownIdentifier.TransactionOutput32.prototype.toObject>;
            transactionOutput64?: ReturnType<typeof KnownIdentifier.TransactionOutput64.prototype.toObject>;
        }): KnownIdentifier {
            const message = new KnownIdentifier({});
            if (data.transactionOutput32 != null) {
                message.transactionOutput32 = KnownIdentifier.TransactionOutput32.fromObject(data.transactionOutput32);
            }
            if (data.transactionOutput64 != null) {
                message.transactionOutput64 = KnownIdentifier.TransactionOutput64.fromObject(data.transactionOutput64);
            }
            return message;
        }
        toObject() {
            const data: {
                transactionOutput32?: ReturnType<typeof KnownIdentifier.TransactionOutput32.prototype.toObject>;
                transactionOutput64?: ReturnType<typeof KnownIdentifier.TransactionOutput64.prototype.toObject>;
            } = {};
            if (this.transactionOutput32 != null) {
                data.transactionOutput32 = this.transactionOutput32.toObject();
            }
            if (this.transactionOutput64 != null) {
                data.transactionOutput64 = this.transactionOutput64.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transactionOutput32)
                writer.writeMessage(1, this.transactionOutput32, () => this.transactionOutput32.serialize(writer));
            if (this.has_transactionOutput64)
                writer.writeMessage(2, this.transactionOutput64, () => this.transactionOutput64.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnownIdentifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnownIdentifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactionOutput32, () => message.transactionOutput32 = KnownIdentifier.TransactionOutput32.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.transactionOutput64, () => message.transactionOutput64 = KnownIdentifier.TransactionOutput64.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnownIdentifier {
            return KnownIdentifier.deserialize(bytes);
        }
    }
    export namespace KnownIdentifier {
        export class TransactionOutput32 extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                network?: number;
                ledger?: number;
                index?: number;
                id?: dependency_4.co.topl.brambl.models.Identifier.IoTransaction32;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("network" in data && data.network != undefined) {
                        this.network = data.network;
                    }
                    if ("ledger" in data && data.ledger != undefined) {
                        this.ledger = data.ledger;
                    }
                    if ("index" in data && data.index != undefined) {
                        this.index = data.index;
                    }
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                }
            }
            get network() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set network(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get ledger() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set ledger(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get index() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set index(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get id() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Identifier.IoTransaction32, 4) as dependency_4.co.topl.brambl.models.Identifier.IoTransaction32;
            }
            set id(value: dependency_4.co.topl.brambl.models.Identifier.IoTransaction32) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                network?: number;
                ledger?: number;
                index?: number;
                id?: ReturnType<typeof dependency_4.co.topl.brambl.models.Identifier.IoTransaction32.prototype.toObject>;
            }): TransactionOutput32 {
                const message = new TransactionOutput32({});
                if (data.network != null) {
                    message.network = data.network;
                }
                if (data.ledger != null) {
                    message.ledger = data.ledger;
                }
                if (data.index != null) {
                    message.index = data.index;
                }
                if (data.id != null) {
                    message.id = dependency_4.co.topl.brambl.models.Identifier.IoTransaction32.fromObject(data.id);
                }
                return message;
            }
            toObject() {
                const data: {
                    network?: number;
                    ledger?: number;
                    index?: number;
                    id?: ReturnType<typeof dependency_4.co.topl.brambl.models.Identifier.IoTransaction32.prototype.toObject>;
                } = {};
                if (this.network != null) {
                    data.network = this.network;
                }
                if (this.ledger != null) {
                    data.ledger = this.ledger;
                }
                if (this.index != null) {
                    data.index = this.index;
                }
                if (this.id != null) {
                    data.id = this.id.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.network != 0)
                    writer.writeUint32(1, this.network);
                if (this.ledger != 0)
                    writer.writeUint32(2, this.ledger);
                if (this.index != 0)
                    writer.writeUint32(3, this.index);
                if (this.has_id)
                    writer.writeMessage(4, this.id, () => this.id.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionOutput32 {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionOutput32();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.network = reader.readUint32();
                            break;
                        case 2:
                            message.ledger = reader.readUint32();
                            break;
                        case 3:
                            message.index = reader.readUint32();
                            break;
                        case 4:
                            reader.readMessage(message.id, () => message.id = dependency_4.co.topl.brambl.models.Identifier.IoTransaction32.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TransactionOutput32 {
                return TransactionOutput32.deserialize(bytes);
            }
        }
        export class TransactionOutput64 extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                network?: number;
                ledger?: number;
                index?: number;
                id?: dependency_4.co.topl.brambl.models.Identifier.IoTransaction64;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("network" in data && data.network != undefined) {
                        this.network = data.network;
                    }
                    if ("ledger" in data && data.ledger != undefined) {
                        this.ledger = data.ledger;
                    }
                    if ("index" in data && data.index != undefined) {
                        this.index = data.index;
                    }
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                }
            }
            get network() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set network(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get ledger() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set ledger(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get index() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set index(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get id() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Identifier.IoTransaction64, 4) as dependency_4.co.topl.brambl.models.Identifier.IoTransaction64;
            }
            set id(value: dependency_4.co.topl.brambl.models.Identifier.IoTransaction64) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                network?: number;
                ledger?: number;
                index?: number;
                id?: ReturnType<typeof dependency_4.co.topl.brambl.models.Identifier.IoTransaction64.prototype.toObject>;
            }): TransactionOutput64 {
                const message = new TransactionOutput64({});
                if (data.network != null) {
                    message.network = data.network;
                }
                if (data.ledger != null) {
                    message.ledger = data.ledger;
                }
                if (data.index != null) {
                    message.index = data.index;
                }
                if (data.id != null) {
                    message.id = dependency_4.co.topl.brambl.models.Identifier.IoTransaction64.fromObject(data.id);
                }
                return message;
            }
            toObject() {
                const data: {
                    network?: number;
                    ledger?: number;
                    index?: number;
                    id?: ReturnType<typeof dependency_4.co.topl.brambl.models.Identifier.IoTransaction64.prototype.toObject>;
                } = {};
                if (this.network != null) {
                    data.network = this.network;
                }
                if (this.ledger != null) {
                    data.ledger = this.ledger;
                }
                if (this.index != null) {
                    data.index = this.index;
                }
                if (this.id != null) {
                    data.id = this.id.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.network != 0)
                    writer.writeUint32(1, this.network);
                if (this.ledger != 0)
                    writer.writeUint32(2, this.ledger);
                if (this.index != 0)
                    writer.writeUint32(3, this.index);
                if (this.has_id)
                    writer.writeMessage(4, this.id, () => this.id.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionOutput64 {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionOutput64();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.network = reader.readUint32();
                            break;
                        case 2:
                            message.ledger = reader.readUint32();
                            break;
                        case 3:
                            message.index = reader.readUint32();
                            break;
                        case 4:
                            reader.readMessage(message.id, () => message.id = dependency_4.co.topl.brambl.models.Identifier.IoTransaction64.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TransactionOutput64 {
                return TransactionOutput64.deserialize(bytes);
            }
        }
    }
}
