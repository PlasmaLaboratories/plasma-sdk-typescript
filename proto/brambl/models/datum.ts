/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/datum.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../scalapb/scalapb";
import * as dependency_3 from "./../../scalapb/validate";
import * as dependency_4 from "./event";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models {
    export class Datum extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8]];
        constructor(data?: any[] | ({} & (({
            eon?: Datum.Eon;
            era?: never;
            epoch?: never;
            header?: never;
            root?: never;
            ioTransaction?: never;
            spentOutput?: never;
            unspentOutput?: never;
        } | {
            eon?: never;
            era?: Datum.Era;
            epoch?: never;
            header?: never;
            root?: never;
            ioTransaction?: never;
            spentOutput?: never;
            unspentOutput?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: Datum.Epoch;
            header?: never;
            root?: never;
            ioTransaction?: never;
            spentOutput?: never;
            unspentOutput?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: Datum.Header;
            root?: never;
            ioTransaction?: never;
            spentOutput?: never;
            unspentOutput?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            root?: Datum.Root;
            ioTransaction?: never;
            spentOutput?: never;
            unspentOutput?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            root?: never;
            ioTransaction?: Datum.IoTransaction;
            spentOutput?: never;
            unspentOutput?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            root?: never;
            ioTransaction?: never;
            spentOutput?: Datum.SpentOutput;
            unspentOutput?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            root?: never;
            ioTransaction?: never;
            spentOutput?: never;
            unspentOutput?: Datum.UnspentOutput;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eon" in data && data.eon != undefined) {
                    this.eon = data.eon;
                }
                if ("era" in data && data.era != undefined) {
                    this.era = data.era;
                }
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("root" in data && data.root != undefined) {
                    this.root = data.root;
                }
                if ("ioTransaction" in data && data.ioTransaction != undefined) {
                    this.ioTransaction = data.ioTransaction;
                }
                if ("spentOutput" in data && data.spentOutput != undefined) {
                    this.spentOutput = data.spentOutput;
                }
                if ("unspentOutput" in data && data.unspentOutput != undefined) {
                    this.unspentOutput = data.unspentOutput;
                }
            }
        }
        get eon() {
            return pb_1.Message.getWrapperField(this, Datum.Eon, 1) as Datum.Eon;
        }
        set eon(value: Datum.Eon) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_eon() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get era() {
            return pb_1.Message.getWrapperField(this, Datum.Era, 2) as Datum.Era;
        }
        set era(value: Datum.Era) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_era() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get epoch() {
            return pb_1.Message.getWrapperField(this, Datum.Epoch, 3) as Datum.Epoch;
        }
        set epoch(value: Datum.Epoch) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_epoch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get header() {
            return pb_1.Message.getWrapperField(this, Datum.Header, 4) as Datum.Header;
        }
        set header(value: Datum.Header) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get root() {
            return pb_1.Message.getWrapperField(this, Datum.Root, 5) as Datum.Root;
        }
        set root(value: Datum.Root) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_root() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ioTransaction() {
            return pb_1.Message.getWrapperField(this, Datum.IoTransaction, 6) as Datum.IoTransaction;
        }
        set ioTransaction(value: Datum.IoTransaction) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_ioTransaction() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get spentOutput() {
            return pb_1.Message.getWrapperField(this, Datum.SpentOutput, 7) as Datum.SpentOutput;
        }
        set spentOutput(value: Datum.SpentOutput) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_spentOutput() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get unspentOutput() {
            return pb_1.Message.getWrapperField(this, Datum.UnspentOutput, 8) as Datum.UnspentOutput;
        }
        set unspentOutput(value: Datum.UnspentOutput) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_unspentOutput() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "eon" | "era" | "epoch" | "header" | "root" | "ioTransaction" | "spentOutput" | "unspentOutput";
            } = {
                0: "none",
                1: "eon",
                2: "era",
                3: "epoch",
                4: "header",
                5: "root",
                6: "ioTransaction",
                7: "spentOutput",
                8: "unspentOutput"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8])];
        }
        static fromObject(data: {
            eon?: ReturnType<typeof Datum.Eon.prototype.toObject>;
            era?: ReturnType<typeof Datum.Era.prototype.toObject>;
            epoch?: ReturnType<typeof Datum.Epoch.prototype.toObject>;
            header?: ReturnType<typeof Datum.Header.prototype.toObject>;
            root?: ReturnType<typeof Datum.Root.prototype.toObject>;
            ioTransaction?: ReturnType<typeof Datum.IoTransaction.prototype.toObject>;
            spentOutput?: ReturnType<typeof Datum.SpentOutput.prototype.toObject>;
            unspentOutput?: ReturnType<typeof Datum.UnspentOutput.prototype.toObject>;
        }): Datum {
            const message = new Datum({});
            if (data.eon != null) {
                message.eon = Datum.Eon.fromObject(data.eon);
            }
            if (data.era != null) {
                message.era = Datum.Era.fromObject(data.era);
            }
            if (data.epoch != null) {
                message.epoch = Datum.Epoch.fromObject(data.epoch);
            }
            if (data.header != null) {
                message.header = Datum.Header.fromObject(data.header);
            }
            if (data.root != null) {
                message.root = Datum.Root.fromObject(data.root);
            }
            if (data.ioTransaction != null) {
                message.ioTransaction = Datum.IoTransaction.fromObject(data.ioTransaction);
            }
            if (data.spentOutput != null) {
                message.spentOutput = Datum.SpentOutput.fromObject(data.spentOutput);
            }
            if (data.unspentOutput != null) {
                message.unspentOutput = Datum.UnspentOutput.fromObject(data.unspentOutput);
            }
            return message;
        }
        toObject() {
            const data: {
                eon?: ReturnType<typeof Datum.Eon.prototype.toObject>;
                era?: ReturnType<typeof Datum.Era.prototype.toObject>;
                epoch?: ReturnType<typeof Datum.Epoch.prototype.toObject>;
                header?: ReturnType<typeof Datum.Header.prototype.toObject>;
                root?: ReturnType<typeof Datum.Root.prototype.toObject>;
                ioTransaction?: ReturnType<typeof Datum.IoTransaction.prototype.toObject>;
                spentOutput?: ReturnType<typeof Datum.SpentOutput.prototype.toObject>;
                unspentOutput?: ReturnType<typeof Datum.UnspentOutput.prototype.toObject>;
            } = {};
            if (this.eon != null) {
                data.eon = this.eon.toObject();
            }
            if (this.era != null) {
                data.era = this.era.toObject();
            }
            if (this.epoch != null) {
                data.epoch = this.epoch.toObject();
            }
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.root != null) {
                data.root = this.root.toObject();
            }
            if (this.ioTransaction != null) {
                data.ioTransaction = this.ioTransaction.toObject();
            }
            if (this.spentOutput != null) {
                data.spentOutput = this.spentOutput.toObject();
            }
            if (this.unspentOutput != null) {
                data.unspentOutput = this.unspentOutput.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_eon)
                writer.writeMessage(1, this.eon, () => this.eon.serialize(writer));
            if (this.has_era)
                writer.writeMessage(2, this.era, () => this.era.serialize(writer));
            if (this.has_epoch)
                writer.writeMessage(3, this.epoch, () => this.epoch.serialize(writer));
            if (this.has_header)
                writer.writeMessage(4, this.header, () => this.header.serialize(writer));
            if (this.has_root)
                writer.writeMessage(5, this.root, () => this.root.serialize(writer));
            if (this.has_ioTransaction)
                writer.writeMessage(6, this.ioTransaction, () => this.ioTransaction.serialize(writer));
            if (this.has_spentOutput)
                writer.writeMessage(7, this.spentOutput, () => this.spentOutput.serialize(writer));
            if (this.has_unspentOutput)
                writer.writeMessage(8, this.unspentOutput, () => this.unspentOutput.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Datum {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Datum();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.eon, () => message.eon = Datum.Eon.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.era, () => message.era = Datum.Era.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.epoch, () => message.epoch = Datum.Epoch.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.header, () => message.header = Datum.Header.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.root, () => message.root = Datum.Root.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.ioTransaction, () => message.ioTransaction = Datum.IoTransaction.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.spentOutput, () => message.spentOutput = Datum.SpentOutput.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.unspentOutput, () => message.unspentOutput = Datum.UnspentOutput.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Datum {
            return Datum.deserialize(bytes);
        }
    }
    export namespace Datum {
        export class Eon extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                event?: dependency_4.co.topl.brambl.models.Event.Eon;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Event.Eon, 1) as dependency_4.co.topl.brambl.models.Event.Eon;
            }
            set event(value: dependency_4.co.topl.brambl.models.Event.Eon) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_event() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Eon.prototype.toObject>;
            }): Eon {
                const message = new Eon({});
                if (data.event != null) {
                    message.event = dependency_4.co.topl.brambl.models.Event.Eon.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Eon.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_event)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Eon {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Eon();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_4.co.topl.brambl.models.Event.Eon.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Eon {
                return Eon.deserialize(bytes);
            }
        }
        export class Era extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                event?: dependency_4.co.topl.brambl.models.Event.Era;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Event.Era, 1) as dependency_4.co.topl.brambl.models.Event.Era;
            }
            set event(value: dependency_4.co.topl.brambl.models.Event.Era) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_event() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Era.prototype.toObject>;
            }): Era {
                const message = new Era({});
                if (data.event != null) {
                    message.event = dependency_4.co.topl.brambl.models.Event.Era.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Era.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_event)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Era {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Era();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_4.co.topl.brambl.models.Event.Era.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Era {
                return Era.deserialize(bytes);
            }
        }
        export class Epoch extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                event?: dependency_4.co.topl.brambl.models.Event.Epoch;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Event.Epoch, 1) as dependency_4.co.topl.brambl.models.Event.Epoch;
            }
            set event(value: dependency_4.co.topl.brambl.models.Event.Epoch) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_event() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Epoch.prototype.toObject>;
            }): Epoch {
                const message = new Epoch({});
                if (data.event != null) {
                    message.event = dependency_4.co.topl.brambl.models.Event.Epoch.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Epoch.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_event)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Epoch {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Epoch();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_4.co.topl.brambl.models.Event.Epoch.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Epoch {
                return Epoch.deserialize(bytes);
            }
        }
        export class Header extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                event?: dependency_4.co.topl.brambl.models.Event.Header;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Event.Header, 1) as dependency_4.co.topl.brambl.models.Event.Header;
            }
            set event(value: dependency_4.co.topl.brambl.models.Event.Header) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_event() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Header.prototype.toObject>;
            }): Header {
                const message = new Header({});
                if (data.event != null) {
                    message.event = dependency_4.co.topl.brambl.models.Event.Header.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Header.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_event)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_4.co.topl.brambl.models.Event.Header.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Header {
                return Header.deserialize(bytes);
            }
        }
        export class Root extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                event?: dependency_4.co.topl.brambl.models.Event.Root;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Event.Root, 1) as dependency_4.co.topl.brambl.models.Event.Root;
            }
            set event(value: dependency_4.co.topl.brambl.models.Event.Root) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_event() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Root.prototype.toObject>;
            }): Root {
                const message = new Root({});
                if (data.event != null) {
                    message.event = dependency_4.co.topl.brambl.models.Event.Root.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.Root.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_event)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Root {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Root();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_4.co.topl.brambl.models.Event.Root.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Root {
                return Root.deserialize(bytes);
            }
        }
        export class IoTransaction extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                event?: dependency_4.co.topl.brambl.models.Event.IoTransaction;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Event.IoTransaction, 1) as dependency_4.co.topl.brambl.models.Event.IoTransaction;
            }
            set event(value: dependency_4.co.topl.brambl.models.Event.IoTransaction) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_event() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.IoTransaction.prototype.toObject>;
            }): IoTransaction {
                const message = new IoTransaction({});
                if (data.event != null) {
                    message.event = dependency_4.co.topl.brambl.models.Event.IoTransaction.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.IoTransaction.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_event)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IoTransaction {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IoTransaction();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_4.co.topl.brambl.models.Event.IoTransaction.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): IoTransaction {
                return IoTransaction.deserialize(bytes);
            }
        }
        export class SpentOutput extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                event?: dependency_4.co.topl.brambl.models.Event.SpentTransactionOutput;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Event.SpentTransactionOutput, 1) as dependency_4.co.topl.brambl.models.Event.SpentTransactionOutput;
            }
            set event(value: dependency_4.co.topl.brambl.models.Event.SpentTransactionOutput) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_event() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.SpentTransactionOutput.prototype.toObject>;
            }): SpentOutput {
                const message = new SpentOutput({});
                if (data.event != null) {
                    message.event = dependency_4.co.topl.brambl.models.Event.SpentTransactionOutput.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.SpentTransactionOutput.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_event)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpentOutput {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpentOutput();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_4.co.topl.brambl.models.Event.SpentTransactionOutput.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SpentOutput {
                return SpentOutput.deserialize(bytes);
            }
        }
        export class UnspentOutput extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                event?: dependency_4.co.topl.brambl.models.Event.UnspentTransactionOutput;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.Event.UnspentTransactionOutput, 1) as dependency_4.co.topl.brambl.models.Event.UnspentTransactionOutput;
            }
            set event(value: dependency_4.co.topl.brambl.models.Event.UnspentTransactionOutput) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_event() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.UnspentTransactionOutput.prototype.toObject>;
            }): UnspentOutput {
                const message = new UnspentOutput({});
                if (data.event != null) {
                    message.event = dependency_4.co.topl.brambl.models.Event.UnspentTransactionOutput.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_4.co.topl.brambl.models.Event.UnspentTransactionOutput.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_event)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnspentOutput {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnspentOutput();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_4.co.topl.brambl.models.Event.UnspentTransactionOutput.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UnspentOutput {
                return UnspentOutput.deserialize(bytes);
            }
        }
    }
}
