/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/box/value.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../validate/validate";
import * as dependency_2 from "./../../../scalapb/scalapb";
import * as dependency_3 from "./../../../scalapb/validate";
import * as dependency_4 from "./../../../quivr/models/shared";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models.box {
    export class Value extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            token?: Value.Token;
            asset?: never;
        } | {
            token?: never;
            asset?: Value.Asset;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("asset" in data && data.asset != undefined) {
                    this.asset = data.asset;
                }
            }
        }
        get token() {
            return pb_1.Message.getWrapperField(this, Value.Token, 1) as Value.Token;
        }
        set token(value: Value.Token) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_token() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get asset() {
            return pb_1.Message.getWrapperField(this, Value.Asset, 2) as Value.Asset;
        }
        set asset(value: Value.Asset) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_asset() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "token" | "asset";
            } = {
                0: "none",
                1: "token",
                2: "asset"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            token?: ReturnType<typeof Value.Token.prototype.toObject>;
            asset?: ReturnType<typeof Value.Asset.prototype.toObject>;
        }): Value {
            const message = new Value({});
            if (data.token != null) {
                message.token = Value.Token.fromObject(data.token);
            }
            if (data.asset != null) {
                message.asset = Value.Asset.fromObject(data.asset);
            }
            return message;
        }
        toObject() {
            const data: {
                token?: ReturnType<typeof Value.Token.prototype.toObject>;
                asset?: ReturnType<typeof Value.Asset.prototype.toObject>;
            } = {};
            if (this.token != null) {
                data.token = this.token.toObject();
            }
            if (this.asset != null) {
                data.asset = this.asset.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_token)
                writer.writeMessage(1, this.token, () => this.token.serialize(writer));
            if (this.has_asset)
                writer.writeMessage(2, this.asset, () => this.asset.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Value {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Value();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token, () => message.token = Value.Token.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.asset, () => message.asset = Value.Asset.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Value {
            return Value.deserialize(bytes);
        }
    }
    export namespace Value {
        export class Token extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                quantity?: dependency_4.quivr.models.Int128;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("quantity" in data && data.quantity != undefined) {
                        this.quantity = data.quantity;
                    }
                }
            }
            get quantity() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.Int128, 1) as dependency_4.quivr.models.Int128;
            }
            set quantity(value: dependency_4.quivr.models.Int128) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_quantity() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                quantity?: ReturnType<typeof dependency_4.quivr.models.Int128.prototype.toObject>;
            }): Token {
                const message = new Token({});
                if (data.quantity != null) {
                    message.quantity = dependency_4.quivr.models.Int128.fromObject(data.quantity);
                }
                return message;
            }
            toObject() {
                const data: {
                    quantity?: ReturnType<typeof dependency_4.quivr.models.Int128.prototype.toObject>;
                } = {};
                if (this.quantity != null) {
                    data.quantity = this.quantity.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_quantity)
                    writer.writeMessage(1, this.quantity, () => this.quantity.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Token {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Token();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.quantity, () => message.quantity = dependency_4.quivr.models.Int128.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Token {
                return Token.deserialize(bytes);
            }
        }
        export class Asset extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                label?: string;
                quantity?: dependency_4.quivr.models.Int128;
                metadata?: dependency_4.quivr.models.SmallData;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("label" in data && data.label != undefined) {
                        this.label = data.label;
                    }
                    if ("quantity" in data && data.quantity != undefined) {
                        this.quantity = data.quantity;
                    }
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set label(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get quantity() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.Int128, 2) as dependency_4.quivr.models.Int128;
            }
            set quantity(value: dependency_4.quivr.models.Int128) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_quantity() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get metadata() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.SmallData, 3) as dependency_4.quivr.models.SmallData;
            }
            set metadata(value: dependency_4.quivr.models.SmallData) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_metadata() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                label?: string;
                quantity?: ReturnType<typeof dependency_4.quivr.models.Int128.prototype.toObject>;
                metadata?: ReturnType<typeof dependency_4.quivr.models.SmallData.prototype.toObject>;
            }): Asset {
                const message = new Asset({});
                if (data.label != null) {
                    message.label = data.label;
                }
                if (data.quantity != null) {
                    message.quantity = dependency_4.quivr.models.Int128.fromObject(data.quantity);
                }
                if (data.metadata != null) {
                    message.metadata = dependency_4.quivr.models.SmallData.fromObject(data.metadata);
                }
                return message;
            }
            toObject() {
                const data: {
                    label?: string;
                    quantity?: ReturnType<typeof dependency_4.quivr.models.Int128.prototype.toObject>;
                    metadata?: ReturnType<typeof dependency_4.quivr.models.SmallData.prototype.toObject>;
                } = {};
                if (this.label != null) {
                    data.label = this.label;
                }
                if (this.quantity != null) {
                    data.quantity = this.quantity.toObject();
                }
                if (this.metadata != null) {
                    data.metadata = this.metadata.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.label.length)
                    writer.writeString(1, this.label);
                if (this.has_quantity)
                    writer.writeMessage(2, this.quantity, () => this.quantity.serialize(writer));
                if (this.has_metadata)
                    writer.writeMessage(3, this.metadata, () => this.metadata.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Asset {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Asset();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.label = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.quantity, () => message.quantity = dependency_4.quivr.models.Int128.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.metadata, () => message.metadata = dependency_4.quivr.models.SmallData.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Asset {
                return Asset.deserialize(bytes);
            }
        }
    }
}
