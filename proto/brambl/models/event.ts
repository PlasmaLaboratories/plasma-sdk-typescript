/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/event.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../scalapb/scalapb";
import * as dependency_3 from "./../../scalapb/validate";
import * as dependency_4 from "./../../quivr/models/shared";
import * as dependency_5 from "./known_identifier";
import * as dependency_6 from "./transaction/schedule";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8]];
        constructor(data?: any[] | ({} & (({
            eon?: Event.Eon;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            spentTransactionOutput?: never;
            unspentTransactionOutput?: never;
            root?: never;
        } | {
            eon?: never;
            era?: Event.Era;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            spentTransactionOutput?: never;
            unspentTransactionOutput?: never;
            root?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: Event.Epoch;
            header?: never;
            ioTransaction?: never;
            spentTransactionOutput?: never;
            unspentTransactionOutput?: never;
            root?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: Event.Header;
            ioTransaction?: never;
            spentTransactionOutput?: never;
            unspentTransactionOutput?: never;
            root?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: Event.IoTransaction;
            spentTransactionOutput?: never;
            unspentTransactionOutput?: never;
            root?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            spentTransactionOutput?: Event.SpentTransactionOutput;
            unspentTransactionOutput?: never;
            root?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            spentTransactionOutput?: never;
            unspentTransactionOutput?: Event.UnspentTransactionOutput;
            root?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            spentTransactionOutput?: never;
            unspentTransactionOutput?: never;
            root?: Event.Root;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eon" in data && data.eon != undefined) {
                    this.eon = data.eon;
                }
                if ("era" in data && data.era != undefined) {
                    this.era = data.era;
                }
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("ioTransaction" in data && data.ioTransaction != undefined) {
                    this.ioTransaction = data.ioTransaction;
                }
                if ("spentTransactionOutput" in data && data.spentTransactionOutput != undefined) {
                    this.spentTransactionOutput = data.spentTransactionOutput;
                }
                if ("unspentTransactionOutput" in data && data.unspentTransactionOutput != undefined) {
                    this.unspentTransactionOutput = data.unspentTransactionOutput;
                }
                if ("root" in data && data.root != undefined) {
                    this.root = data.root;
                }
            }
        }
        get eon() {
            return pb_1.Message.getWrapperField(this, Event.Eon, 1) as Event.Eon;
        }
        set eon(value: Event.Eon) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_eon() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get era() {
            return pb_1.Message.getWrapperField(this, Event.Era, 2) as Event.Era;
        }
        set era(value: Event.Era) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_era() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get epoch() {
            return pb_1.Message.getWrapperField(this, Event.Epoch, 3) as Event.Epoch;
        }
        set epoch(value: Event.Epoch) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_epoch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get header() {
            return pb_1.Message.getWrapperField(this, Event.Header, 4) as Event.Header;
        }
        set header(value: Event.Header) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ioTransaction() {
            return pb_1.Message.getWrapperField(this, Event.IoTransaction, 5) as Event.IoTransaction;
        }
        set ioTransaction(value: Event.IoTransaction) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_ioTransaction() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get spentTransactionOutput() {
            return pb_1.Message.getWrapperField(this, Event.SpentTransactionOutput, 6) as Event.SpentTransactionOutput;
        }
        set spentTransactionOutput(value: Event.SpentTransactionOutput) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_spentTransactionOutput() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get unspentTransactionOutput() {
            return pb_1.Message.getWrapperField(this, Event.UnspentTransactionOutput, 7) as Event.UnspentTransactionOutput;
        }
        set unspentTransactionOutput(value: Event.UnspentTransactionOutput) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_unspentTransactionOutput() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get root() {
            return pb_1.Message.getWrapperField(this, Event.Root, 8) as Event.Root;
        }
        set root(value: Event.Root) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_root() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "eon" | "era" | "epoch" | "header" | "ioTransaction" | "spentTransactionOutput" | "unspentTransactionOutput" | "root";
            } = {
                0: "none",
                1: "eon",
                2: "era",
                3: "epoch",
                4: "header",
                5: "ioTransaction",
                6: "spentTransactionOutput",
                7: "unspentTransactionOutput",
                8: "root"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8])];
        }
        static fromObject(data: {
            eon?: ReturnType<typeof Event.Eon.prototype.toObject>;
            era?: ReturnType<typeof Event.Era.prototype.toObject>;
            epoch?: ReturnType<typeof Event.Epoch.prototype.toObject>;
            header?: ReturnType<typeof Event.Header.prototype.toObject>;
            ioTransaction?: ReturnType<typeof Event.IoTransaction.prototype.toObject>;
            spentTransactionOutput?: ReturnType<typeof Event.SpentTransactionOutput.prototype.toObject>;
            unspentTransactionOutput?: ReturnType<typeof Event.UnspentTransactionOutput.prototype.toObject>;
            root?: ReturnType<typeof Event.Root.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.eon != null) {
                message.eon = Event.Eon.fromObject(data.eon);
            }
            if (data.era != null) {
                message.era = Event.Era.fromObject(data.era);
            }
            if (data.epoch != null) {
                message.epoch = Event.Epoch.fromObject(data.epoch);
            }
            if (data.header != null) {
                message.header = Event.Header.fromObject(data.header);
            }
            if (data.ioTransaction != null) {
                message.ioTransaction = Event.IoTransaction.fromObject(data.ioTransaction);
            }
            if (data.spentTransactionOutput != null) {
                message.spentTransactionOutput = Event.SpentTransactionOutput.fromObject(data.spentTransactionOutput);
            }
            if (data.unspentTransactionOutput != null) {
                message.unspentTransactionOutput = Event.UnspentTransactionOutput.fromObject(data.unspentTransactionOutput);
            }
            if (data.root != null) {
                message.root = Event.Root.fromObject(data.root);
            }
            return message;
        }
        toObject() {
            const data: {
                eon?: ReturnType<typeof Event.Eon.prototype.toObject>;
                era?: ReturnType<typeof Event.Era.prototype.toObject>;
                epoch?: ReturnType<typeof Event.Epoch.prototype.toObject>;
                header?: ReturnType<typeof Event.Header.prototype.toObject>;
                ioTransaction?: ReturnType<typeof Event.IoTransaction.prototype.toObject>;
                spentTransactionOutput?: ReturnType<typeof Event.SpentTransactionOutput.prototype.toObject>;
                unspentTransactionOutput?: ReturnType<typeof Event.UnspentTransactionOutput.prototype.toObject>;
                root?: ReturnType<typeof Event.Root.prototype.toObject>;
            } = {};
            if (this.eon != null) {
                data.eon = this.eon.toObject();
            }
            if (this.era != null) {
                data.era = this.era.toObject();
            }
            if (this.epoch != null) {
                data.epoch = this.epoch.toObject();
            }
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.ioTransaction != null) {
                data.ioTransaction = this.ioTransaction.toObject();
            }
            if (this.spentTransactionOutput != null) {
                data.spentTransactionOutput = this.spentTransactionOutput.toObject();
            }
            if (this.unspentTransactionOutput != null) {
                data.unspentTransactionOutput = this.unspentTransactionOutput.toObject();
            }
            if (this.root != null) {
                data.root = this.root.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_eon)
                writer.writeMessage(1, this.eon, () => this.eon.serialize(writer));
            if (this.has_era)
                writer.writeMessage(2, this.era, () => this.era.serialize(writer));
            if (this.has_epoch)
                writer.writeMessage(3, this.epoch, () => this.epoch.serialize(writer));
            if (this.has_header)
                writer.writeMessage(4, this.header, () => this.header.serialize(writer));
            if (this.has_ioTransaction)
                writer.writeMessage(5, this.ioTransaction, () => this.ioTransaction.serialize(writer));
            if (this.has_spentTransactionOutput)
                writer.writeMessage(6, this.spentTransactionOutput, () => this.spentTransactionOutput.serialize(writer));
            if (this.has_unspentTransactionOutput)
                writer.writeMessage(7, this.unspentTransactionOutput, () => this.unspentTransactionOutput.serialize(writer));
            if (this.has_root)
                writer.writeMessage(8, this.root, () => this.root.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.eon, () => message.eon = Event.Eon.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.era, () => message.era = Event.Era.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.epoch, () => message.epoch = Event.Epoch.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.header, () => message.header = Event.Header.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.ioTransaction, () => message.ioTransaction = Event.IoTransaction.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.spentTransactionOutput, () => message.spentTransactionOutput = Event.SpentTransactionOutput.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.unspentTransactionOutput, () => message.unspentTransactionOutput = Event.UnspentTransactionOutput.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.root, () => message.root = Event.Root.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export namespace Event {
        export class Eon extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                beginSlot?: number;
                height?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("beginSlot" in data && data.beginSlot != undefined) {
                        this.beginSlot = data.beginSlot;
                    }
                    if ("height" in data && data.height != undefined) {
                        this.height = data.height;
                    }
                }
            }
            get beginSlot() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set beginSlot(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get height() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set height(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                beginSlot?: number;
                height?: number;
            }): Eon {
                const message = new Eon({});
                if (data.beginSlot != null) {
                    message.beginSlot = data.beginSlot;
                }
                if (data.height != null) {
                    message.height = data.height;
                }
                return message;
            }
            toObject() {
                const data: {
                    beginSlot?: number;
                    height?: number;
                } = {};
                if (this.beginSlot != null) {
                    data.beginSlot = this.beginSlot;
                }
                if (this.height != null) {
                    data.height = this.height;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.beginSlot != 0)
                    writer.writeUint64(1, this.beginSlot);
                if (this.height != 0)
                    writer.writeUint64(2, this.height);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Eon {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Eon();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.beginSlot = reader.readUint64();
                            break;
                        case 2:
                            message.height = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Eon {
                return Eon.deserialize(bytes);
            }
        }
        export class Era extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                beginSlot?: number;
                height?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("beginSlot" in data && data.beginSlot != undefined) {
                        this.beginSlot = data.beginSlot;
                    }
                    if ("height" in data && data.height != undefined) {
                        this.height = data.height;
                    }
                }
            }
            get beginSlot() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set beginSlot(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get height() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set height(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                beginSlot?: number;
                height?: number;
            }): Era {
                const message = new Era({});
                if (data.beginSlot != null) {
                    message.beginSlot = data.beginSlot;
                }
                if (data.height != null) {
                    message.height = data.height;
                }
                return message;
            }
            toObject() {
                const data: {
                    beginSlot?: number;
                    height?: number;
                } = {};
                if (this.beginSlot != null) {
                    data.beginSlot = this.beginSlot;
                }
                if (this.height != null) {
                    data.height = this.height;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.beginSlot != 0)
                    writer.writeUint64(1, this.beginSlot);
                if (this.height != 0)
                    writer.writeUint64(2, this.height);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Era {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Era();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.beginSlot = reader.readUint64();
                            break;
                        case 2:
                            message.height = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Era {
                return Era.deserialize(bytes);
            }
        }
        export class Epoch extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                beginSlot?: number;
                height?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("beginSlot" in data && data.beginSlot != undefined) {
                        this.beginSlot = data.beginSlot;
                    }
                    if ("height" in data && data.height != undefined) {
                        this.height = data.height;
                    }
                }
            }
            get beginSlot() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set beginSlot(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get height() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set height(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                beginSlot?: number;
                height?: number;
            }): Epoch {
                const message = new Epoch({});
                if (data.beginSlot != null) {
                    message.beginSlot = data.beginSlot;
                }
                if (data.height != null) {
                    message.height = data.height;
                }
                return message;
            }
            toObject() {
                const data: {
                    beginSlot?: number;
                    height?: number;
                } = {};
                if (this.beginSlot != null) {
                    data.beginSlot = this.beginSlot;
                }
                if (this.height != null) {
                    data.height = this.height;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.beginSlot != 0)
                    writer.writeUint64(1, this.beginSlot);
                if (this.height != 0)
                    writer.writeUint64(2, this.height);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Epoch {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Epoch();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.beginSlot = reader.readUint64();
                            break;
                        case 2:
                            message.height = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Epoch {
                return Epoch.deserialize(bytes);
            }
        }
        export class Header extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                height?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("height" in data && data.height != undefined) {
                        this.height = data.height;
                    }
                }
            }
            get height() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set height(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                height?: number;
            }): Header {
                const message = new Header({});
                if (data.height != null) {
                    message.height = data.height;
                }
                return message;
            }
            toObject() {
                const data: {
                    height?: number;
                } = {};
                if (this.height != null) {
                    data.height = this.height;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.height != 0)
                    writer.writeUint64(1, this.height);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.height = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Header {
                return Header.deserialize(bytes);
            }
        }
        export class IoTransaction extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                schedule?: dependency_6.co.topl.brambl.models.transaction.Schedule;
                references32?: dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32[];
                references64?: dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64[];
                metadata?: dependency_4.quivr.models.SmallData;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("schedule" in data && data.schedule != undefined) {
                        this.schedule = data.schedule;
                    }
                    if ("references32" in data && data.references32 != undefined) {
                        this.references32 = data.references32;
                    }
                    if ("references64" in data && data.references64 != undefined) {
                        this.references64 = data.references64;
                    }
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
            }
            get schedule() {
                return pb_1.Message.getWrapperField(this, dependency_6.co.topl.brambl.models.transaction.Schedule, 1) as dependency_6.co.topl.brambl.models.transaction.Schedule;
            }
            set schedule(value: dependency_6.co.topl.brambl.models.transaction.Schedule) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_schedule() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get references32() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32, 2) as dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32[];
            }
            set references32(value: dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get references64() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64, 3) as dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64[];
            }
            set references64(value: dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get metadata() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.SmallData, 4) as dependency_4.quivr.models.SmallData;
            }
            set metadata(value: dependency_4.quivr.models.SmallData) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_metadata() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                schedule?: ReturnType<typeof dependency_6.co.topl.brambl.models.transaction.Schedule.prototype.toObject>;
                references32?: ReturnType<typeof dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32.prototype.toObject>[];
                references64?: ReturnType<typeof dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64.prototype.toObject>[];
                metadata?: ReturnType<typeof dependency_4.quivr.models.SmallData.prototype.toObject>;
            }): IoTransaction {
                const message = new IoTransaction({});
                if (data.schedule != null) {
                    message.schedule = dependency_6.co.topl.brambl.models.transaction.Schedule.fromObject(data.schedule);
                }
                if (data.references32 != null) {
                    message.references32 = data.references32.map(item => dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32.fromObject(item));
                }
                if (data.references64 != null) {
                    message.references64 = data.references64.map(item => dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64.fromObject(item));
                }
                if (data.metadata != null) {
                    message.metadata = dependency_4.quivr.models.SmallData.fromObject(data.metadata);
                }
                return message;
            }
            toObject() {
                const data: {
                    schedule?: ReturnType<typeof dependency_6.co.topl.brambl.models.transaction.Schedule.prototype.toObject>;
                    references32?: ReturnType<typeof dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32.prototype.toObject>[];
                    references64?: ReturnType<typeof dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64.prototype.toObject>[];
                    metadata?: ReturnType<typeof dependency_4.quivr.models.SmallData.prototype.toObject>;
                } = {};
                if (this.schedule != null) {
                    data.schedule = this.schedule.toObject();
                }
                if (this.references32 != null) {
                    data.references32 = this.references32.map((item: dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32) => item.toObject());
                }
                if (this.references64 != null) {
                    data.references64 = this.references64.map((item: dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64) => item.toObject());
                }
                if (this.metadata != null) {
                    data.metadata = this.metadata.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_schedule)
                    writer.writeMessage(1, this.schedule, () => this.schedule.serialize(writer));
                if (this.references32.length)
                    writer.writeRepeatedMessage(2, this.references32, (item: dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32) => item.serialize(writer));
                if (this.references64.length)
                    writer.writeRepeatedMessage(3, this.references64, (item: dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64) => item.serialize(writer));
                if (this.has_metadata)
                    writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IoTransaction {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IoTransaction();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.schedule, () => message.schedule = dependency_6.co.topl.brambl.models.transaction.Schedule.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.references32, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32.deserialize(reader), dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput32));
                            break;
                        case 3:
                            reader.readMessage(message.references64, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64.deserialize(reader), dependency_5.co.topl.brambl.models.KnownIdentifier.TransactionOutput64));
                            break;
                        case 4:
                            reader.readMessage(message.metadata, () => message.metadata = dependency_4.quivr.models.SmallData.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): IoTransaction {
                return IoTransaction.deserialize(bytes);
            }
        }
        export class SpentTransactionOutput extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                metadata?: dependency_4.quivr.models.SmallData;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
            }
            get metadata() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.SmallData, 1) as dependency_4.quivr.models.SmallData;
            }
            set metadata(value: dependency_4.quivr.models.SmallData) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_metadata() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                metadata?: ReturnType<typeof dependency_4.quivr.models.SmallData.prototype.toObject>;
            }): SpentTransactionOutput {
                const message = new SpentTransactionOutput({});
                if (data.metadata != null) {
                    message.metadata = dependency_4.quivr.models.SmallData.fromObject(data.metadata);
                }
                return message;
            }
            toObject() {
                const data: {
                    metadata?: ReturnType<typeof dependency_4.quivr.models.SmallData.prototype.toObject>;
                } = {};
                if (this.metadata != null) {
                    data.metadata = this.metadata.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_metadata)
                    writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpentTransactionOutput {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpentTransactionOutput();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.metadata, () => message.metadata = dependency_4.quivr.models.SmallData.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SpentTransactionOutput {
                return SpentTransactionOutput.deserialize(bytes);
            }
        }
        export class UnspentTransactionOutput extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                metadata?: dependency_4.quivr.models.SmallData;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
            }
            get metadata() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.SmallData, 1) as dependency_4.quivr.models.SmallData;
            }
            set metadata(value: dependency_4.quivr.models.SmallData) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_metadata() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                metadata?: ReturnType<typeof dependency_4.quivr.models.SmallData.prototype.toObject>;
            }): UnspentTransactionOutput {
                const message = new UnspentTransactionOutput({});
                if (data.metadata != null) {
                    message.metadata = dependency_4.quivr.models.SmallData.fromObject(data.metadata);
                }
                return message;
            }
            toObject() {
                const data: {
                    metadata?: ReturnType<typeof dependency_4.quivr.models.SmallData.prototype.toObject>;
                } = {};
                if (this.metadata != null) {
                    data.metadata = this.metadata.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_metadata)
                    writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnspentTransactionOutput {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnspentTransactionOutput();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.metadata, () => message.metadata = dependency_4.quivr.models.SmallData.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UnspentTransactionOutput {
                return UnspentTransactionOutput.deserialize(bytes);
            }
        }
        export class Root extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                value?: dependency_4.quivr.models.Root;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                }
            }
            get value() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.Root, 1) as dependency_4.quivr.models.Root;
            }
            set value(value: dependency_4.quivr.models.Root) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_value() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                value?: ReturnType<typeof dependency_4.quivr.models.Root.prototype.toObject>;
            }): Root {
                const message = new Root({});
                if (data.value != null) {
                    message.value = dependency_4.quivr.models.Root.fromObject(data.value);
                }
                return message;
            }
            toObject() {
                const data: {
                    value?: ReturnType<typeof dependency_4.quivr.models.Root.prototype.toObject>;
                } = {};
                if (this.value != null) {
                    data.value = this.value.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_value)
                    writer.writeMessage(1, this.value, () => this.value.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Root {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Root();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.value, () => message.value = dependency_4.quivr.models.Root.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Root {
                return Root.deserialize(bytes);
            }
        }
    }
}
