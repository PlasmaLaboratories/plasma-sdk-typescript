/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/evidence.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../scalapb/scalapb";
import * as dependency_3 from "./../../scalapb/validate";
import * as dependency_4 from "./../../quivr/models/shared";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models {
    export class Evidence extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            sized32?: Evidence.Sized32;
            sized64?: never;
        } | {
            sized32?: never;
            sized64?: Evidence.Sized64;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sized32" in data && data.sized32 != undefined) {
                    this.sized32 = data.sized32;
                }
                if ("sized64" in data && data.sized64 != undefined) {
                    this.sized64 = data.sized64;
                }
            }
        }
        get sized32() {
            return pb_1.Message.getWrapperField(this, Evidence.Sized32, 1) as Evidence.Sized32;
        }
        set sized32(value: Evidence.Sized32) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_sized32() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sized64() {
            return pb_1.Message.getWrapperField(this, Evidence.Sized64, 2) as Evidence.Sized64;
        }
        set sized64(value: Evidence.Sized64) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_sized64() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "sized32" | "sized64";
            } = {
                0: "none",
                1: "sized32",
                2: "sized64"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            sized32?: ReturnType<typeof Evidence.Sized32.prototype.toObject>;
            sized64?: ReturnType<typeof Evidence.Sized64.prototype.toObject>;
        }): Evidence {
            const message = new Evidence({});
            if (data.sized32 != null) {
                message.sized32 = Evidence.Sized32.fromObject(data.sized32);
            }
            if (data.sized64 != null) {
                message.sized64 = Evidence.Sized64.fromObject(data.sized64);
            }
            return message;
        }
        toObject() {
            const data: {
                sized32?: ReturnType<typeof Evidence.Sized32.prototype.toObject>;
                sized64?: ReturnType<typeof Evidence.Sized64.prototype.toObject>;
            } = {};
            if (this.sized32 != null) {
                data.sized32 = this.sized32.toObject();
            }
            if (this.sized64 != null) {
                data.sized64 = this.sized64.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_sized32)
                writer.writeMessage(1, this.sized32, () => this.sized32.serialize(writer));
            if (this.has_sized64)
                writer.writeMessage(2, this.sized64, () => this.sized64.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Evidence {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Evidence();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sized32, () => message.sized32 = Evidence.Sized32.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.sized64, () => message.sized64 = Evidence.Sized64.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Evidence {
            return Evidence.deserialize(bytes);
        }
    }
    export namespace Evidence {
        export class Sized32 extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                digest?: dependency_4.quivr.models.Digest.Digest32;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("digest" in data && data.digest != undefined) {
                        this.digest = data.digest;
                    }
                }
            }
            get digest() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.Digest.Digest32, 1) as dependency_4.quivr.models.Digest.Digest32;
            }
            set digest(value: dependency_4.quivr.models.Digest.Digest32) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_digest() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                digest?: ReturnType<typeof dependency_4.quivr.models.Digest.Digest32.prototype.toObject>;
            }): Sized32 {
                const message = new Sized32({});
                if (data.digest != null) {
                    message.digest = dependency_4.quivr.models.Digest.Digest32.fromObject(data.digest);
                }
                return message;
            }
            toObject() {
                const data: {
                    digest?: ReturnType<typeof dependency_4.quivr.models.Digest.Digest32.prototype.toObject>;
                } = {};
                if (this.digest != null) {
                    data.digest = this.digest.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_digest)
                    writer.writeMessage(1, this.digest, () => this.digest.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Sized32 {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Sized32();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.digest, () => message.digest = dependency_4.quivr.models.Digest.Digest32.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Sized32 {
                return Sized32.deserialize(bytes);
            }
        }
        export class Sized64 extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                digest?: dependency_4.quivr.models.Digest.Digest64;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("digest" in data && data.digest != undefined) {
                        this.digest = data.digest;
                    }
                }
            }
            get digest() {
                return pb_1.Message.getWrapperField(this, dependency_4.quivr.models.Digest.Digest64, 1) as dependency_4.quivr.models.Digest.Digest64;
            }
            set digest(value: dependency_4.quivr.models.Digest.Digest64) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_digest() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                digest?: ReturnType<typeof dependency_4.quivr.models.Digest.Digest64.prototype.toObject>;
            }): Sized64 {
                const message = new Sized64({});
                if (data.digest != null) {
                    message.digest = dependency_4.quivr.models.Digest.Digest64.fromObject(data.digest);
                }
                return message;
            }
            toObject() {
                const data: {
                    digest?: ReturnType<typeof dependency_4.quivr.models.Digest.Digest64.prototype.toObject>;
                } = {};
                if (this.digest != null) {
                    data.digest = this.digest.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_digest)
                    writer.writeMessage(1, this.digest, () => this.digest.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Sized64 {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Sized64();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.digest, () => message.digest = dependency_4.quivr.models.Digest.Digest64.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Sized64 {
                return Sized64.deserialize(bytes);
            }
        }
    }
}
