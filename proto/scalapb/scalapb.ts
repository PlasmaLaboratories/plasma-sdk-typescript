/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: scalapb/scalapb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export namespace scalapb {
    export enum MatchType {
        CONTAINS = 0,
        EXACT = 1,
        PRESENCE = 2
    }
    export class ScalaPbOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            package_name?: string;
            flat_package?: boolean;
            import: string[];
            preamble: string[];
            single_file?: boolean;
            no_primitive_wrappers?: boolean;
            primitive_wrappers?: boolean;
            collection_type?: string;
            preserve_unknown_fields?: boolean;
            object_name?: string;
            scope?: ScalaPbOptions.OptionsScope;
            lenses?: boolean;
            retain_source_code_info?: boolean;
            map_type?: string;
            no_default_values_in_constructor?: boolean;
            enum_value_naming?: ScalaPbOptions.EnumValueNaming;
            enum_strip_prefix?: boolean;
            bytes_type?: string;
            java_conversions?: boolean;
            aux_message_options: ScalaPbOptions.AuxMessageOptions[];
            aux_field_options: ScalaPbOptions.AuxFieldOptions[];
            aux_enum_options: ScalaPbOptions.AuxEnumOptions[];
            aux_enum_value_options: ScalaPbOptions.AuxEnumValueOptions[];
            preprocessors: string[];
            field_transformations: FieldTransformation[];
            ignore_all_transformations?: boolean;
            getters?: boolean;
            test_only_no_java_conversions?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 18, 19, 20, 22, 24, 25], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("package_name" in data && data.package_name != undefined) {
                    this.package_name = data.package_name;
                }
                if ("flat_package" in data && data.flat_package != undefined) {
                    this.flat_package = data.flat_package;
                }
                this.import = data.import;
                this.preamble = data.preamble;
                if ("single_file" in data && data.single_file != undefined) {
                    this.single_file = data.single_file;
                }
                if ("no_primitive_wrappers" in data && data.no_primitive_wrappers != undefined) {
                    this.no_primitive_wrappers = data.no_primitive_wrappers;
                }
                if ("primitive_wrappers" in data && data.primitive_wrappers != undefined) {
                    this.primitive_wrappers = data.primitive_wrappers;
                }
                if ("collection_type" in data && data.collection_type != undefined) {
                    this.collection_type = data.collection_type;
                }
                if ("preserve_unknown_fields" in data && data.preserve_unknown_fields != undefined) {
                    this.preserve_unknown_fields = data.preserve_unknown_fields;
                }
                if ("object_name" in data && data.object_name != undefined) {
                    this.object_name = data.object_name;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
                if ("lenses" in data && data.lenses != undefined) {
                    this.lenses = data.lenses;
                }
                if ("retain_source_code_info" in data && data.retain_source_code_info != undefined) {
                    this.retain_source_code_info = data.retain_source_code_info;
                }
                if ("map_type" in data && data.map_type != undefined) {
                    this.map_type = data.map_type;
                }
                if ("no_default_values_in_constructor" in data && data.no_default_values_in_constructor != undefined) {
                    this.no_default_values_in_constructor = data.no_default_values_in_constructor;
                }
                if ("enum_value_naming" in data && data.enum_value_naming != undefined) {
                    this.enum_value_naming = data.enum_value_naming;
                }
                if ("enum_strip_prefix" in data && data.enum_strip_prefix != undefined) {
                    this.enum_strip_prefix = data.enum_strip_prefix;
                }
                if ("bytes_type" in data && data.bytes_type != undefined) {
                    this.bytes_type = data.bytes_type;
                }
                if ("java_conversions" in data && data.java_conversions != undefined) {
                    this.java_conversions = data.java_conversions;
                }
                this.aux_message_options = data.aux_message_options;
                this.aux_field_options = data.aux_field_options;
                this.aux_enum_options = data.aux_enum_options;
                this.aux_enum_value_options = data.aux_enum_value_options;
                this.preprocessors = data.preprocessors;
                this.field_transformations = data.field_transformations;
                if ("ignore_all_transformations" in data && data.ignore_all_transformations != undefined) {
                    this.ignore_all_transformations = data.ignore_all_transformations;
                }
                if ("getters" in data && data.getters != undefined) {
                    this.getters = data.getters;
                }
                if ("test_only_no_java_conversions" in data && data.test_only_no_java_conversions != undefined) {
                    this.test_only_no_java_conversions = data.test_only_no_java_conversions;
                }
            }
        }
        get package_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set package_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_package_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get flat_package() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set flat_package(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_flat_package() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get import() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set import(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get preamble() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set preamble(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get single_file() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set single_file(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_single_file() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get no_primitive_wrappers() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set no_primitive_wrappers(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_no_primitive_wrappers() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get primitive_wrappers() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set primitive_wrappers(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_primitive_wrappers() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get collection_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set collection_type(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_collection_type() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get preserve_unknown_fields() {
            return pb_1.Message.getFieldWithDefault(this, 9, true) as boolean;
        }
        set preserve_unknown_fields(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_preserve_unknown_fields() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get object_name() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set object_name(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_object_name() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 11, ScalaPbOptions.OptionsScope.FILE) as ScalaPbOptions.OptionsScope;
        }
        set scope(value: ScalaPbOptions.OptionsScope) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_scope() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get lenses() {
            return pb_1.Message.getFieldWithDefault(this, 12, true) as boolean;
        }
        set lenses(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_lenses() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get retain_source_code_info() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set retain_source_code_info(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_retain_source_code_info() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get map_type() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set map_type(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_map_type() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get no_default_values_in_constructor() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set no_default_values_in_constructor(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_no_default_values_in_constructor() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get enum_value_naming() {
            return pb_1.Message.getFieldWithDefault(this, 16, ScalaPbOptions.EnumValueNaming.AS_IN_PROTO) as ScalaPbOptions.EnumValueNaming;
        }
        set enum_value_naming(value: ScalaPbOptions.EnumValueNaming) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_enum_value_naming() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get enum_strip_prefix() {
            return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
        }
        set enum_strip_prefix(value: boolean) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_enum_strip_prefix() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get bytes_type() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set bytes_type(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_bytes_type() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get java_conversions() {
            return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
        }
        set java_conversions(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get has_java_conversions() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get aux_message_options() {
            return pb_1.Message.getRepeatedWrapperField(this, ScalaPbOptions.AuxMessageOptions, 18) as ScalaPbOptions.AuxMessageOptions[];
        }
        set aux_message_options(value: ScalaPbOptions.AuxMessageOptions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 18, value);
        }
        get aux_field_options() {
            return pb_1.Message.getRepeatedWrapperField(this, ScalaPbOptions.AuxFieldOptions, 19) as ScalaPbOptions.AuxFieldOptions[];
        }
        set aux_field_options(value: ScalaPbOptions.AuxFieldOptions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 19, value);
        }
        get aux_enum_options() {
            return pb_1.Message.getRepeatedWrapperField(this, ScalaPbOptions.AuxEnumOptions, 20) as ScalaPbOptions.AuxEnumOptions[];
        }
        set aux_enum_options(value: ScalaPbOptions.AuxEnumOptions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 20, value);
        }
        get aux_enum_value_options() {
            return pb_1.Message.getRepeatedWrapperField(this, ScalaPbOptions.AuxEnumValueOptions, 22) as ScalaPbOptions.AuxEnumValueOptions[];
        }
        set aux_enum_value_options(value: ScalaPbOptions.AuxEnumValueOptions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 22, value);
        }
        get preprocessors() {
            return pb_1.Message.getFieldWithDefault(this, 24, []) as string[];
        }
        set preprocessors(value: string[]) {
            pb_1.Message.setField(this, 24, value);
        }
        get field_transformations() {
            return pb_1.Message.getRepeatedWrapperField(this, FieldTransformation, 25) as FieldTransformation[];
        }
        set field_transformations(value: FieldTransformation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 25, value);
        }
        get ignore_all_transformations() {
            return pb_1.Message.getFieldWithDefault(this, 26, false) as boolean;
        }
        set ignore_all_transformations(value: boolean) {
            pb_1.Message.setField(this, 26, value);
        }
        get has_ignore_all_transformations() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get getters() {
            return pb_1.Message.getFieldWithDefault(this, 27, true) as boolean;
        }
        set getters(value: boolean) {
            pb_1.Message.setField(this, 27, value);
        }
        get has_getters() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get test_only_no_java_conversions() {
            return pb_1.Message.getFieldWithDefault(this, 999, false) as boolean;
        }
        set test_only_no_java_conversions(value: boolean) {
            pb_1.Message.setField(this, 999, value);
        }
        get has_test_only_no_java_conversions() {
            return pb_1.Message.getField(this, 999) != null;
        }
        static fromObject(data: {
            package_name?: string;
            flat_package?: boolean;
            import: string[];
            preamble: string[];
            single_file?: boolean;
            no_primitive_wrappers?: boolean;
            primitive_wrappers?: boolean;
            collection_type?: string;
            preserve_unknown_fields?: boolean;
            object_name?: string;
            scope?: ScalaPbOptions.OptionsScope;
            lenses?: boolean;
            retain_source_code_info?: boolean;
            map_type?: string;
            no_default_values_in_constructor?: boolean;
            enum_value_naming?: ScalaPbOptions.EnumValueNaming;
            enum_strip_prefix?: boolean;
            bytes_type?: string;
            java_conversions?: boolean;
            aux_message_options?: ReturnType<typeof ScalaPbOptions.AuxMessageOptions.prototype.toObject>[];
            aux_field_options?: ReturnType<typeof ScalaPbOptions.AuxFieldOptions.prototype.toObject>[];
            aux_enum_options?: ReturnType<typeof ScalaPbOptions.AuxEnumOptions.prototype.toObject>[];
            aux_enum_value_options?: ReturnType<typeof ScalaPbOptions.AuxEnumValueOptions.prototype.toObject>[];
            preprocessors: string[];
            field_transformations?: ReturnType<typeof FieldTransformation.prototype.toObject>[];
            ignore_all_transformations?: boolean;
            getters?: boolean;
            test_only_no_java_conversions?: boolean;
        }): ScalaPbOptions {
            const message = new ScalaPbOptions({
                import: data.import,
                preamble: data.preamble,
                aux_message_options: data.aux_message_options.map(item => ScalaPbOptions.AuxMessageOptions.fromObject(item)),
                aux_field_options: data.aux_field_options.map(item => ScalaPbOptions.AuxFieldOptions.fromObject(item)),
                aux_enum_options: data.aux_enum_options.map(item => ScalaPbOptions.AuxEnumOptions.fromObject(item)),
                aux_enum_value_options: data.aux_enum_value_options.map(item => ScalaPbOptions.AuxEnumValueOptions.fromObject(item)),
                preprocessors: data.preprocessors,
                field_transformations: data.field_transformations.map(item => FieldTransformation.fromObject(item))
            });
            if (data.package_name != null) {
                message.package_name = data.package_name;
            }
            if (data.flat_package != null) {
                message.flat_package = data.flat_package;
            }
            if (data.single_file != null) {
                message.single_file = data.single_file;
            }
            if (data.no_primitive_wrappers != null) {
                message.no_primitive_wrappers = data.no_primitive_wrappers;
            }
            if (data.primitive_wrappers != null) {
                message.primitive_wrappers = data.primitive_wrappers;
            }
            if (data.collection_type != null) {
                message.collection_type = data.collection_type;
            }
            if (data.preserve_unknown_fields != null) {
                message.preserve_unknown_fields = data.preserve_unknown_fields;
            }
            if (data.object_name != null) {
                message.object_name = data.object_name;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            if (data.lenses != null) {
                message.lenses = data.lenses;
            }
            if (data.retain_source_code_info != null) {
                message.retain_source_code_info = data.retain_source_code_info;
            }
            if (data.map_type != null) {
                message.map_type = data.map_type;
            }
            if (data.no_default_values_in_constructor != null) {
                message.no_default_values_in_constructor = data.no_default_values_in_constructor;
            }
            if (data.enum_value_naming != null) {
                message.enum_value_naming = data.enum_value_naming;
            }
            if (data.enum_strip_prefix != null) {
                message.enum_strip_prefix = data.enum_strip_prefix;
            }
            if (data.bytes_type != null) {
                message.bytes_type = data.bytes_type;
            }
            if (data.java_conversions != null) {
                message.java_conversions = data.java_conversions;
            }
            if (data.ignore_all_transformations != null) {
                message.ignore_all_transformations = data.ignore_all_transformations;
            }
            if (data.getters != null) {
                message.getters = data.getters;
            }
            if (data.test_only_no_java_conversions != null) {
                message.test_only_no_java_conversions = data.test_only_no_java_conversions;
            }
            return message;
        }
        toObject() {
            const data: {
                package_name?: string;
                flat_package?: boolean;
                import: string[];
                preamble: string[];
                single_file?: boolean;
                no_primitive_wrappers?: boolean;
                primitive_wrappers?: boolean;
                collection_type?: string;
                preserve_unknown_fields?: boolean;
                object_name?: string;
                scope?: ScalaPbOptions.OptionsScope;
                lenses?: boolean;
                retain_source_code_info?: boolean;
                map_type?: string;
                no_default_values_in_constructor?: boolean;
                enum_value_naming?: ScalaPbOptions.EnumValueNaming;
                enum_strip_prefix?: boolean;
                bytes_type?: string;
                java_conversions?: boolean;
                aux_message_options?: ReturnType<typeof ScalaPbOptions.AuxMessageOptions.prototype.toObject>[];
                aux_field_options?: ReturnType<typeof ScalaPbOptions.AuxFieldOptions.prototype.toObject>[];
                aux_enum_options?: ReturnType<typeof ScalaPbOptions.AuxEnumOptions.prototype.toObject>[];
                aux_enum_value_options?: ReturnType<typeof ScalaPbOptions.AuxEnumValueOptions.prototype.toObject>[];
                preprocessors: string[];
                field_transformations?: ReturnType<typeof FieldTransformation.prototype.toObject>[];
                ignore_all_transformations?: boolean;
                getters?: boolean;
                test_only_no_java_conversions?: boolean;
            } = {
                import: this.import,
                preamble: this.preamble,
                preprocessors: this.preprocessors
            };
            if (this.package_name != null) {
                data.package_name = this.package_name;
            }
            if (this.flat_package != null) {
                data.flat_package = this.flat_package;
            }
            if (this.single_file != null) {
                data.single_file = this.single_file;
            }
            if (this.no_primitive_wrappers != null) {
                data.no_primitive_wrappers = this.no_primitive_wrappers;
            }
            if (this.primitive_wrappers != null) {
                data.primitive_wrappers = this.primitive_wrappers;
            }
            if (this.collection_type != null) {
                data.collection_type = this.collection_type;
            }
            if (this.preserve_unknown_fields != null) {
                data.preserve_unknown_fields = this.preserve_unknown_fields;
            }
            if (this.object_name != null) {
                data.object_name = this.object_name;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            if (this.lenses != null) {
                data.lenses = this.lenses;
            }
            if (this.retain_source_code_info != null) {
                data.retain_source_code_info = this.retain_source_code_info;
            }
            if (this.map_type != null) {
                data.map_type = this.map_type;
            }
            if (this.no_default_values_in_constructor != null) {
                data.no_default_values_in_constructor = this.no_default_values_in_constructor;
            }
            if (this.enum_value_naming != null) {
                data.enum_value_naming = this.enum_value_naming;
            }
            if (this.enum_strip_prefix != null) {
                data.enum_strip_prefix = this.enum_strip_prefix;
            }
            if (this.bytes_type != null) {
                data.bytes_type = this.bytes_type;
            }
            if (this.java_conversions != null) {
                data.java_conversions = this.java_conversions;
            }
            if (this.aux_message_options != null) {
                data.aux_message_options = this.aux_message_options.map((item: ScalaPbOptions.AuxMessageOptions) => item.toObject());
            }
            if (this.aux_field_options != null) {
                data.aux_field_options = this.aux_field_options.map((item: ScalaPbOptions.AuxFieldOptions) => item.toObject());
            }
            if (this.aux_enum_options != null) {
                data.aux_enum_options = this.aux_enum_options.map((item: ScalaPbOptions.AuxEnumOptions) => item.toObject());
            }
            if (this.aux_enum_value_options != null) {
                data.aux_enum_value_options = this.aux_enum_value_options.map((item: ScalaPbOptions.AuxEnumValueOptions) => item.toObject());
            }
            if (this.field_transformations != null) {
                data.field_transformations = this.field_transformations.map((item: FieldTransformation) => item.toObject());
            }
            if (this.ignore_all_transformations != null) {
                data.ignore_all_transformations = this.ignore_all_transformations;
            }
            if (this.getters != null) {
                data.getters = this.getters;
            }
            if (this.test_only_no_java_conversions != null) {
                data.test_only_no_java_conversions = this.test_only_no_java_conversions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_package_name && this.package_name.length)
                writer.writeString(1, this.package_name);
            if (this.has_flat_package)
                writer.writeBool(2, this.flat_package);
            if (this.import.length)
                writer.writeRepeatedString(3, this.import);
            if (this.preamble.length)
                writer.writeRepeatedString(4, this.preamble);
            if (this.has_single_file)
                writer.writeBool(5, this.single_file);
            if (this.has_no_primitive_wrappers)
                writer.writeBool(7, this.no_primitive_wrappers);
            if (this.has_primitive_wrappers)
                writer.writeBool(6, this.primitive_wrappers);
            if (this.has_collection_type && this.collection_type.length)
                writer.writeString(8, this.collection_type);
            if (this.has_preserve_unknown_fields)
                writer.writeBool(9, this.preserve_unknown_fields);
            if (this.has_object_name && this.object_name.length)
                writer.writeString(10, this.object_name);
            if (this.has_scope)
                writer.writeEnum(11, this.scope);
            if (this.has_lenses)
                writer.writeBool(12, this.lenses);
            if (this.has_retain_source_code_info)
                writer.writeBool(13, this.retain_source_code_info);
            if (this.has_map_type && this.map_type.length)
                writer.writeString(14, this.map_type);
            if (this.has_no_default_values_in_constructor)
                writer.writeBool(15, this.no_default_values_in_constructor);
            if (this.has_enum_value_naming)
                writer.writeEnum(16, this.enum_value_naming);
            if (this.has_enum_strip_prefix)
                writer.writeBool(17, this.enum_strip_prefix);
            if (this.has_bytes_type && this.bytes_type.length)
                writer.writeString(21, this.bytes_type);
            if (this.has_java_conversions)
                writer.writeBool(23, this.java_conversions);
            if (this.aux_message_options.length)
                writer.writeRepeatedMessage(18, this.aux_message_options, (item: ScalaPbOptions.AuxMessageOptions) => item.serialize(writer));
            if (this.aux_field_options.length)
                writer.writeRepeatedMessage(19, this.aux_field_options, (item: ScalaPbOptions.AuxFieldOptions) => item.serialize(writer));
            if (this.aux_enum_options.length)
                writer.writeRepeatedMessage(20, this.aux_enum_options, (item: ScalaPbOptions.AuxEnumOptions) => item.serialize(writer));
            if (this.aux_enum_value_options.length)
                writer.writeRepeatedMessage(22, this.aux_enum_value_options, (item: ScalaPbOptions.AuxEnumValueOptions) => item.serialize(writer));
            if (this.preprocessors.length)
                writer.writeRepeatedString(24, this.preprocessors);
            if (this.field_transformations.length)
                writer.writeRepeatedMessage(25, this.field_transformations, (item: FieldTransformation) => item.serialize(writer));
            if (this.has_ignore_all_transformations)
                writer.writeBool(26, this.ignore_all_transformations);
            if (this.has_getters)
                writer.writeBool(27, this.getters);
            if (this.has_test_only_no_java_conversions)
                writer.writeBool(999, this.test_only_no_java_conversions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScalaPbOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScalaPbOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.package_name = reader.readString();
                        break;
                    case 2:
                        message.flat_package = reader.readBool();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.single_file = reader.readBool();
                        break;
                    case 7:
                        message.no_primitive_wrappers = reader.readBool();
                        break;
                    case 6:
                        message.primitive_wrappers = reader.readBool();
                        break;
                    case 8:
                        message.collection_type = reader.readString();
                        break;
                    case 9:
                        message.preserve_unknown_fields = reader.readBool();
                        break;
                    case 10:
                        message.object_name = reader.readString();
                        break;
                    case 11:
                        message.scope = reader.readEnum();
                        break;
                    case 12:
                        message.lenses = reader.readBool();
                        break;
                    case 13:
                        message.retain_source_code_info = reader.readBool();
                        break;
                    case 14:
                        message.map_type = reader.readString();
                        break;
                    case 15:
                        message.no_default_values_in_constructor = reader.readBool();
                        break;
                    case 16:
                        message.enum_value_naming = reader.readEnum();
                        break;
                    case 17:
                        message.enum_strip_prefix = reader.readBool();
                        break;
                    case 21:
                        message.bytes_type = reader.readString();
                        break;
                    case 23:
                        message.java_conversions = reader.readBool();
                        break;
                    case 18:
                        reader.readMessage(message.aux_message_options, () => pb_1.Message.addToRepeatedWrapperField(message, 18, ScalaPbOptions.AuxMessageOptions.deserialize(reader), ScalaPbOptions.AuxMessageOptions));
                        break;
                    case 19:
                        reader.readMessage(message.aux_field_options, () => pb_1.Message.addToRepeatedWrapperField(message, 19, ScalaPbOptions.AuxFieldOptions.deserialize(reader), ScalaPbOptions.AuxFieldOptions));
                        break;
                    case 20:
                        reader.readMessage(message.aux_enum_options, () => pb_1.Message.addToRepeatedWrapperField(message, 20, ScalaPbOptions.AuxEnumOptions.deserialize(reader), ScalaPbOptions.AuxEnumOptions));
                        break;
                    case 22:
                        reader.readMessage(message.aux_enum_value_options, () => pb_1.Message.addToRepeatedWrapperField(message, 22, ScalaPbOptions.AuxEnumValueOptions.deserialize(reader), ScalaPbOptions.AuxEnumValueOptions));
                        break;
                    case 24:
                        pb_1.Message.addToRepeatedField(message, 24, reader.readString());
                        break;
                    case 25:
                        reader.readMessage(message.field_transformations, () => pb_1.Message.addToRepeatedWrapperField(message, 25, FieldTransformation.deserialize(reader), FieldTransformation));
                        break;
                    case 26:
                        message.ignore_all_transformations = reader.readBool();
                        break;
                    case 27:
                        message.getters = reader.readBool();
                        break;
                    case 999:
                        message.test_only_no_java_conversions = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScalaPbOptions {
            return ScalaPbOptions.deserialize(bytes);
        }
    }
    export namespace ScalaPbOptions {
        export enum OptionsScope {
            FILE = 0,
            PACKAGE = 1
        }
        export enum EnumValueNaming {
            AS_IN_PROTO = 0,
            CAMEL_CASE = 1
        }
        export class AuxMessageOptions extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                target?: string;
                options?: MessageOptions;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("target" in data && data.target != undefined) {
                        this.target = data.target;
                    }
                    if ("options" in data && data.options != undefined) {
                        this.options = data.options;
                    }
                }
            }
            get target() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set target(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_target() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get options() {
                return pb_1.Message.getWrapperField(this, MessageOptions, 2) as MessageOptions;
            }
            set options(value: MessageOptions) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_options() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                target?: string;
                options?: ReturnType<typeof MessageOptions.prototype.toObject>;
            }): AuxMessageOptions {
                const message = new AuxMessageOptions({});
                if (data.target != null) {
                    message.target = data.target;
                }
                if (data.options != null) {
                    message.options = MessageOptions.fromObject(data.options);
                }
                return message;
            }
            toObject() {
                const data: {
                    target?: string;
                    options?: ReturnType<typeof MessageOptions.prototype.toObject>;
                } = {};
                if (this.target != null) {
                    data.target = this.target;
                }
                if (this.options != null) {
                    data.options = this.options.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_target && this.target.length)
                    writer.writeString(1, this.target);
                if (this.has_options)
                    writer.writeMessage(2, this.options, () => this.options.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuxMessageOptions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuxMessageOptions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.target = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.options, () => message.options = MessageOptions.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AuxMessageOptions {
                return AuxMessageOptions.deserialize(bytes);
            }
        }
        export class AuxFieldOptions extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                target?: string;
                options?: FieldOptions;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("target" in data && data.target != undefined) {
                        this.target = data.target;
                    }
                    if ("options" in data && data.options != undefined) {
                        this.options = data.options;
                    }
                }
            }
            get target() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set target(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_target() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get options() {
                return pb_1.Message.getWrapperField(this, FieldOptions, 2) as FieldOptions;
            }
            set options(value: FieldOptions) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_options() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                target?: string;
                options?: ReturnType<typeof FieldOptions.prototype.toObject>;
            }): AuxFieldOptions {
                const message = new AuxFieldOptions({});
                if (data.target != null) {
                    message.target = data.target;
                }
                if (data.options != null) {
                    message.options = FieldOptions.fromObject(data.options);
                }
                return message;
            }
            toObject() {
                const data: {
                    target?: string;
                    options?: ReturnType<typeof FieldOptions.prototype.toObject>;
                } = {};
                if (this.target != null) {
                    data.target = this.target;
                }
                if (this.options != null) {
                    data.options = this.options.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_target && this.target.length)
                    writer.writeString(1, this.target);
                if (this.has_options)
                    writer.writeMessage(2, this.options, () => this.options.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuxFieldOptions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuxFieldOptions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.target = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.options, () => message.options = FieldOptions.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AuxFieldOptions {
                return AuxFieldOptions.deserialize(bytes);
            }
        }
        export class AuxEnumOptions extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                target?: string;
                options?: EnumOptions;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("target" in data && data.target != undefined) {
                        this.target = data.target;
                    }
                    if ("options" in data && data.options != undefined) {
                        this.options = data.options;
                    }
                }
            }
            get target() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set target(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_target() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get options() {
                return pb_1.Message.getWrapperField(this, EnumOptions, 2) as EnumOptions;
            }
            set options(value: EnumOptions) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_options() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                target?: string;
                options?: ReturnType<typeof EnumOptions.prototype.toObject>;
            }): AuxEnumOptions {
                const message = new AuxEnumOptions({});
                if (data.target != null) {
                    message.target = data.target;
                }
                if (data.options != null) {
                    message.options = EnumOptions.fromObject(data.options);
                }
                return message;
            }
            toObject() {
                const data: {
                    target?: string;
                    options?: ReturnType<typeof EnumOptions.prototype.toObject>;
                } = {};
                if (this.target != null) {
                    data.target = this.target;
                }
                if (this.options != null) {
                    data.options = this.options.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_target && this.target.length)
                    writer.writeString(1, this.target);
                if (this.has_options)
                    writer.writeMessage(2, this.options, () => this.options.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuxEnumOptions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuxEnumOptions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.target = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.options, () => message.options = EnumOptions.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AuxEnumOptions {
                return AuxEnumOptions.deserialize(bytes);
            }
        }
        export class AuxEnumValueOptions extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                target?: string;
                options?: EnumValueOptions;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("target" in data && data.target != undefined) {
                        this.target = data.target;
                    }
                    if ("options" in data && data.options != undefined) {
                        this.options = data.options;
                    }
                }
            }
            get target() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set target(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_target() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get options() {
                return pb_1.Message.getWrapperField(this, EnumValueOptions, 2) as EnumValueOptions;
            }
            set options(value: EnumValueOptions) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_options() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                target?: string;
                options?: ReturnType<typeof EnumValueOptions.prototype.toObject>;
            }): AuxEnumValueOptions {
                const message = new AuxEnumValueOptions({});
                if (data.target != null) {
                    message.target = data.target;
                }
                if (data.options != null) {
                    message.options = EnumValueOptions.fromObject(data.options);
                }
                return message;
            }
            toObject() {
                const data: {
                    target?: string;
                    options?: ReturnType<typeof EnumValueOptions.prototype.toObject>;
                } = {};
                if (this.target != null) {
                    data.target = this.target;
                }
                if (this.options != null) {
                    data.options = this.options.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_target && this.target.length)
                    writer.writeString(1, this.target);
                if (this.has_options)
                    writer.writeMessage(2, this.options, () => this.options.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuxEnumValueOptions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuxEnumValueOptions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.target = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.options, () => message.options = EnumValueOptions.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AuxEnumValueOptions {
                return AuxEnumValueOptions.deserialize(bytes);
            }
        }
    }
    export class MessageOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            extends: string[];
            companion_extends: string[];
            annotations: string[];
            type?: string;
            companion_annotations: string[];
            sealed_oneof_extends: string[];
            no_box?: boolean;
            unknown_fields_annotations: string[];
            no_default_values_in_constructor?: boolean;
            sealed_oneof_companion_extends: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 5, 6, 8, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.extends = data.extends;
                this.companion_extends = data.companion_extends;
                this.annotations = data.annotations;
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                this.companion_annotations = data.companion_annotations;
                this.sealed_oneof_extends = data.sealed_oneof_extends;
                if ("no_box" in data && data.no_box != undefined) {
                    this.no_box = data.no_box;
                }
                this.unknown_fields_annotations = data.unknown_fields_annotations;
                if ("no_default_values_in_constructor" in data && data.no_default_values_in_constructor != undefined) {
                    this.no_default_values_in_constructor = data.no_default_values_in_constructor;
                }
                this.sealed_oneof_companion_extends = data.sealed_oneof_companion_extends;
            }
        }
        get extends() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set extends(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get companion_extends() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set companion_extends(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get annotations() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set annotations(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get companion_annotations() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set companion_annotations(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get sealed_oneof_extends() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set sealed_oneof_extends(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get no_box() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set no_box(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_no_box() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get unknown_fields_annotations() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set unknown_fields_annotations(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get no_default_values_in_constructor() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set no_default_values_in_constructor(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_no_default_values_in_constructor() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get sealed_oneof_companion_extends() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set sealed_oneof_companion_extends(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            extends: string[];
            companion_extends: string[];
            annotations: string[];
            type?: string;
            companion_annotations: string[];
            sealed_oneof_extends: string[];
            no_box?: boolean;
            unknown_fields_annotations: string[];
            no_default_values_in_constructor?: boolean;
            sealed_oneof_companion_extends: string[];
        }): MessageOptions {
            const message = new MessageOptions({
                extends: data.extends,
                companion_extends: data.companion_extends,
                annotations: data.annotations,
                companion_annotations: data.companion_annotations,
                sealed_oneof_extends: data.sealed_oneof_extends,
                unknown_fields_annotations: data.unknown_fields_annotations,
                sealed_oneof_companion_extends: data.sealed_oneof_companion_extends
            });
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.no_box != null) {
                message.no_box = data.no_box;
            }
            if (data.no_default_values_in_constructor != null) {
                message.no_default_values_in_constructor = data.no_default_values_in_constructor;
            }
            return message;
        }
        toObject() {
            const data: {
                extends: string[];
                companion_extends: string[];
                annotations: string[];
                type?: string;
                companion_annotations: string[];
                sealed_oneof_extends: string[];
                no_box?: boolean;
                unknown_fields_annotations: string[];
                no_default_values_in_constructor?: boolean;
                sealed_oneof_companion_extends: string[];
            } = {
                extends: this.extends,
                companion_extends: this.companion_extends,
                annotations: this.annotations,
                companion_annotations: this.companion_annotations,
                sealed_oneof_extends: this.sealed_oneof_extends,
                unknown_fields_annotations: this.unknown_fields_annotations,
                sealed_oneof_companion_extends: this.sealed_oneof_companion_extends
            };
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.no_box != null) {
                data.no_box = this.no_box;
            }
            if (this.no_default_values_in_constructor != null) {
                data.no_default_values_in_constructor = this.no_default_values_in_constructor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.extends.length)
                writer.writeRepeatedString(1, this.extends);
            if (this.companion_extends.length)
                writer.writeRepeatedString(2, this.companion_extends);
            if (this.annotations.length)
                writer.writeRepeatedString(3, this.annotations);
            if (this.has_type && this.type.length)
                writer.writeString(4, this.type);
            if (this.companion_annotations.length)
                writer.writeRepeatedString(5, this.companion_annotations);
            if (this.sealed_oneof_extends.length)
                writer.writeRepeatedString(6, this.sealed_oneof_extends);
            if (this.has_no_box)
                writer.writeBool(7, this.no_box);
            if (this.unknown_fields_annotations.length)
                writer.writeRepeatedString(8, this.unknown_fields_annotations);
            if (this.has_no_default_values_in_constructor)
                writer.writeBool(9, this.no_default_values_in_constructor);
            if (this.sealed_oneof_companion_extends.length)
                writer.writeRepeatedString(10, this.sealed_oneof_companion_extends);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.type = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.no_box = reader.readBool();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.no_default_values_in_constructor = reader.readBool();
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageOptions {
            return MessageOptions.deserialize(bytes);
        }
    }
    export class Collection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            non_empty?: boolean;
            adapter?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("non_empty" in data && data.non_empty != undefined) {
                    this.non_empty = data.non_empty;
                }
                if ("adapter" in data && data.adapter != undefined) {
                    this.adapter = data.adapter;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get non_empty() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set non_empty(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_non_empty() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get adapter() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set adapter(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_adapter() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            type?: string;
            non_empty?: boolean;
            adapter?: string;
        }): Collection {
            const message = new Collection({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.non_empty != null) {
                message.non_empty = data.non_empty;
            }
            if (data.adapter != null) {
                message.adapter = data.adapter;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                non_empty?: boolean;
                adapter?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.non_empty != null) {
                data.non_empty = this.non_empty;
            }
            if (this.adapter != null) {
                data.adapter = this.adapter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_type && this.type.length)
                writer.writeString(1, this.type);
            if (this.has_non_empty)
                writer.writeBool(2, this.non_empty);
            if (this.has_adapter && this.adapter.length)
                writer.writeString(3, this.adapter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Collection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Collection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.non_empty = reader.readBool();
                        break;
                    case 3:
                        message.adapter = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Collection {
            return Collection.deserialize(bytes);
        }
    }
    export class FieldOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            scala_name?: string;
            collection_type?: string;
            collection?: Collection;
            key_type?: string;
            value_type?: string;
            annotations: string[];
            map_type?: string;
            no_default_value_in_constructor?: boolean;
            no_box?: boolean;
            required?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("scala_name" in data && data.scala_name != undefined) {
                    this.scala_name = data.scala_name;
                }
                if ("collection_type" in data && data.collection_type != undefined) {
                    this.collection_type = data.collection_type;
                }
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("key_type" in data && data.key_type != undefined) {
                    this.key_type = data.key_type;
                }
                if ("value_type" in data && data.value_type != undefined) {
                    this.value_type = data.value_type;
                }
                this.annotations = data.annotations;
                if ("map_type" in data && data.map_type != undefined) {
                    this.map_type = data.map_type;
                }
                if ("no_default_value_in_constructor" in data && data.no_default_value_in_constructor != undefined) {
                    this.no_default_value_in_constructor = data.no_default_value_in_constructor;
                }
                if ("no_box" in data && data.no_box != undefined) {
                    this.no_box = data.no_box;
                }
                if ("required" in data && data.required != undefined) {
                    this.required = data.required;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get scala_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scala_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_scala_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get collection_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set collection_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_collection_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get collection() {
            return pb_1.Message.getWrapperField(this, Collection, 8) as Collection;
        }
        set collection(value: Collection) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_collection() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get key_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set key_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_key_type() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get value_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set value_type(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_value_type() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get annotations() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set annotations(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get map_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set map_type(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_map_type() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get no_default_value_in_constructor() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set no_default_value_in_constructor(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_no_default_value_in_constructor() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get no_box() {
            return pb_1.Message.getFieldWithDefault(this, 30, false) as boolean;
        }
        set no_box(value: boolean) {
            pb_1.Message.setField(this, 30, value);
        }
        get has_no_box() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get required() {
            return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
        }
        set required(value: boolean) {
            pb_1.Message.setField(this, 31, value);
        }
        get has_required() {
            return pb_1.Message.getField(this, 31) != null;
        }
        static fromObject(data: {
            type?: string;
            scala_name?: string;
            collection_type?: string;
            collection?: ReturnType<typeof Collection.prototype.toObject>;
            key_type?: string;
            value_type?: string;
            annotations: string[];
            map_type?: string;
            no_default_value_in_constructor?: boolean;
            no_box?: boolean;
            required?: boolean;
        }): FieldOptions {
            const message = new FieldOptions({
                annotations: data.annotations
            });
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.scala_name != null) {
                message.scala_name = data.scala_name;
            }
            if (data.collection_type != null) {
                message.collection_type = data.collection_type;
            }
            if (data.collection != null) {
                message.collection = Collection.fromObject(data.collection);
            }
            if (data.key_type != null) {
                message.key_type = data.key_type;
            }
            if (data.value_type != null) {
                message.value_type = data.value_type;
            }
            if (data.map_type != null) {
                message.map_type = data.map_type;
            }
            if (data.no_default_value_in_constructor != null) {
                message.no_default_value_in_constructor = data.no_default_value_in_constructor;
            }
            if (data.no_box != null) {
                message.no_box = data.no_box;
            }
            if (data.required != null) {
                message.required = data.required;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                scala_name?: string;
                collection_type?: string;
                collection?: ReturnType<typeof Collection.prototype.toObject>;
                key_type?: string;
                value_type?: string;
                annotations: string[];
                map_type?: string;
                no_default_value_in_constructor?: boolean;
                no_box?: boolean;
                required?: boolean;
            } = {
                annotations: this.annotations
            };
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.scala_name != null) {
                data.scala_name = this.scala_name;
            }
            if (this.collection_type != null) {
                data.collection_type = this.collection_type;
            }
            if (this.collection != null) {
                data.collection = this.collection.toObject();
            }
            if (this.key_type != null) {
                data.key_type = this.key_type;
            }
            if (this.value_type != null) {
                data.value_type = this.value_type;
            }
            if (this.map_type != null) {
                data.map_type = this.map_type;
            }
            if (this.no_default_value_in_constructor != null) {
                data.no_default_value_in_constructor = this.no_default_value_in_constructor;
            }
            if (this.no_box != null) {
                data.no_box = this.no_box;
            }
            if (this.required != null) {
                data.required = this.required;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_type && this.type.length)
                writer.writeString(1, this.type);
            if (this.has_scala_name && this.scala_name.length)
                writer.writeString(2, this.scala_name);
            if (this.has_collection_type && this.collection_type.length)
                writer.writeString(3, this.collection_type);
            if (this.has_collection)
                writer.writeMessage(8, this.collection, () => this.collection.serialize(writer));
            if (this.has_key_type && this.key_type.length)
                writer.writeString(4, this.key_type);
            if (this.has_value_type && this.value_type.length)
                writer.writeString(5, this.value_type);
            if (this.annotations.length)
                writer.writeRepeatedString(6, this.annotations);
            if (this.has_map_type && this.map_type.length)
                writer.writeString(7, this.map_type);
            if (this.has_no_default_value_in_constructor)
                writer.writeBool(9, this.no_default_value_in_constructor);
            if (this.has_no_box)
                writer.writeBool(30, this.no_box);
            if (this.has_required)
                writer.writeBool(31, this.required);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.scala_name = reader.readString();
                        break;
                    case 3:
                        message.collection_type = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.collection, () => message.collection = Collection.deserialize(reader));
                        break;
                    case 4:
                        message.key_type = reader.readString();
                        break;
                    case 5:
                        message.value_type = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.map_type = reader.readString();
                        break;
                    case 9:
                        message.no_default_value_in_constructor = reader.readBool();
                        break;
                    case 30:
                        message.no_box = reader.readBool();
                        break;
                    case 31:
                        message.required = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldOptions {
            return FieldOptions.deserialize(bytes);
        }
    }
    export class EnumOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            extends: string[];
            companion_extends: string[];
            type?: string;
            base_annotations: string[];
            recognized_annotations: string[];
            unrecognized_annotations: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.extends = data.extends;
                this.companion_extends = data.companion_extends;
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                this.base_annotations = data.base_annotations;
                this.recognized_annotations = data.recognized_annotations;
                this.unrecognized_annotations = data.unrecognized_annotations;
            }
        }
        get extends() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set extends(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get companion_extends() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set companion_extends(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get base_annotations() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set base_annotations(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get recognized_annotations() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set recognized_annotations(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get unrecognized_annotations() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set unrecognized_annotations(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            extends: string[];
            companion_extends: string[];
            type?: string;
            base_annotations: string[];
            recognized_annotations: string[];
            unrecognized_annotations: string[];
        }): EnumOptions {
            const message = new EnumOptions({
                extends: data.extends,
                companion_extends: data.companion_extends,
                base_annotations: data.base_annotations,
                recognized_annotations: data.recognized_annotations,
                unrecognized_annotations: data.unrecognized_annotations
            });
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                extends: string[];
                companion_extends: string[];
                type?: string;
                base_annotations: string[];
                recognized_annotations: string[];
                unrecognized_annotations: string[];
            } = {
                extends: this.extends,
                companion_extends: this.companion_extends,
                base_annotations: this.base_annotations,
                recognized_annotations: this.recognized_annotations,
                unrecognized_annotations: this.unrecognized_annotations
            };
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.extends.length)
                writer.writeRepeatedString(1, this.extends);
            if (this.companion_extends.length)
                writer.writeRepeatedString(2, this.companion_extends);
            if (this.has_type && this.type.length)
                writer.writeString(3, this.type);
            if (this.base_annotations.length)
                writer.writeRepeatedString(4, this.base_annotations);
            if (this.recognized_annotations.length)
                writer.writeRepeatedString(5, this.recognized_annotations);
            if (this.unrecognized_annotations.length)
                writer.writeRepeatedString(6, this.unrecognized_annotations);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnumOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnumOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnumOptions {
            return EnumOptions.deserialize(bytes);
        }
    }
    export class EnumValueOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            extends: string[];
            scala_name?: string;
            annotations: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.extends = data.extends;
                if ("scala_name" in data && data.scala_name != undefined) {
                    this.scala_name = data.scala_name;
                }
                this.annotations = data.annotations;
            }
        }
        get extends() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set extends(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get scala_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scala_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_scala_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get annotations() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set annotations(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            extends: string[];
            scala_name?: string;
            annotations: string[];
        }): EnumValueOptions {
            const message = new EnumValueOptions({
                extends: data.extends,
                annotations: data.annotations
            });
            if (data.scala_name != null) {
                message.scala_name = data.scala_name;
            }
            return message;
        }
        toObject() {
            const data: {
                extends: string[];
                scala_name?: string;
                annotations: string[];
            } = {
                extends: this.extends,
                annotations: this.annotations
            };
            if (this.scala_name != null) {
                data.scala_name = this.scala_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.extends.length)
                writer.writeRepeatedString(1, this.extends);
            if (this.has_scala_name && this.scala_name.length)
                writer.writeString(2, this.scala_name);
            if (this.annotations.length)
                writer.writeRepeatedString(3, this.annotations);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnumValueOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnumValueOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.scala_name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnumValueOptions {
            return EnumValueOptions.deserialize(bytes);
        }
    }
    export class OneofOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            extends: string[];
            scala_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.extends = data.extends;
                if ("scala_name" in data && data.scala_name != undefined) {
                    this.scala_name = data.scala_name;
                }
            }
        }
        get extends() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set extends(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get scala_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scala_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_scala_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            extends: string[];
            scala_name?: string;
        }): OneofOptions {
            const message = new OneofOptions({
                extends: data.extends
            });
            if (data.scala_name != null) {
                message.scala_name = data.scala_name;
            }
            return message;
        }
        toObject() {
            const data: {
                extends: string[];
                scala_name?: string;
            } = {
                extends: this.extends
            };
            if (this.scala_name != null) {
                data.scala_name = this.scala_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.extends.length)
                writer.writeRepeatedString(1, this.extends);
            if (this.has_scala_name && this.scala_name.length)
                writer.writeString(2, this.scala_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OneofOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OneofOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.scala_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OneofOptions {
            return OneofOptions.deserialize(bytes);
        }
    }
    export class FieldTransformation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            when?: dependency_1.google.protobuf.FieldDescriptorProto;
            match_type?: MatchType;
            set?: dependency_1.google.protobuf.FieldOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("when" in data && data.when != undefined) {
                    this.when = data.when;
                }
                if ("match_type" in data && data.match_type != undefined) {
                    this.match_type = data.match_type;
                }
                if ("set" in data && data.set != undefined) {
                    this.set = data.set;
                }
            }
        }
        get when() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.FieldDescriptorProto, 1) as dependency_1.google.protobuf.FieldDescriptorProto;
        }
        set when(value: dependency_1.google.protobuf.FieldDescriptorProto) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_when() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get match_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, MatchType.CONTAINS) as MatchType;
        }
        set match_type(value: MatchType) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_match_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get set() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.FieldOptions, 3) as dependency_1.google.protobuf.FieldOptions;
        }
        set set(value: dependency_1.google.protobuf.FieldOptions) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_set() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            when?: ReturnType<typeof dependency_1.google.protobuf.FieldDescriptorProto.prototype.toObject>;
            match_type?: MatchType;
            set?: ReturnType<typeof dependency_1.google.protobuf.FieldOptions.prototype.toObject>;
        }): FieldTransformation {
            const message = new FieldTransformation({});
            if (data.when != null) {
                message.when = dependency_1.google.protobuf.FieldDescriptorProto.fromObject(data.when);
            }
            if (data.match_type != null) {
                message.match_type = data.match_type;
            }
            if (data.set != null) {
                message.set = dependency_1.google.protobuf.FieldOptions.fromObject(data.set);
            }
            return message;
        }
        toObject() {
            const data: {
                when?: ReturnType<typeof dependency_1.google.protobuf.FieldDescriptorProto.prototype.toObject>;
                match_type?: MatchType;
                set?: ReturnType<typeof dependency_1.google.protobuf.FieldOptions.prototype.toObject>;
            } = {};
            if (this.when != null) {
                data.when = this.when.toObject();
            }
            if (this.match_type != null) {
                data.match_type = this.match_type;
            }
            if (this.set != null) {
                data.set = this.set.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_when)
                writer.writeMessage(1, this.when, () => this.when.serialize(writer));
            if (this.has_match_type)
                writer.writeEnum(2, this.match_type);
            if (this.has_set)
                writer.writeMessage(3, this.set, () => this.set.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldTransformation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldTransformation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.when, () => message.when = dependency_1.google.protobuf.FieldDescriptorProto.deserialize(reader));
                        break;
                    case 2:
                        message.match_type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.set, () => message.set = dependency_1.google.protobuf.FieldOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldTransformation {
            return FieldTransformation.deserialize(bytes);
        }
    }
    export class PreprocessorOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            options_by_file: Map<string, ScalaPbOptions>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.options_by_file = data.options_by_file;
            }
            if (!this.options_by_file)
                this.options_by_file = new Map();
        }
        get options_by_file() {
            return pb_1.Message.getField(this, 1) as any as Map<string, ScalaPbOptions>;
        }
        set options_by_file(value: Map<string, ScalaPbOptions>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            options_by_file?: {
                [key: string]: ReturnType<typeof ScalaPbOptions.prototype.toObject>;
            };
        }): PreprocessorOutput {
            const message = new PreprocessorOutput({
                options_by_file: new Map(Object.entries(data.options_by_file).map(([key, value]) => [key, ScalaPbOptions.fromObject(value)]))
            });
            return message;
        }
        toObject() {
            const data: {
                options_by_file?: {
                    [key: string]: ReturnType<typeof ScalaPbOptions.prototype.toObject>;
                };
            } = {};
            if (this.options_by_file != null) {
                data.options_by_file = (Object.fromEntries)((Array.from)(this.options_by_file).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.options_by_file) {
                writer.writeMessage(1, this.options_by_file, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreprocessorOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreprocessorOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.options_by_file as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = ScalaPbOptions.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PreprocessorOutput {
            return PreprocessorOutput.deserialize(bytes);
        }
    }
}
