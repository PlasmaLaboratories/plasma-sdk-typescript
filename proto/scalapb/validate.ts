/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: scalapb/validate.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./scalapb";
import * as dependency_2 from "./../validate/validate";
import * as pb_1 from "google-protobuf";
export namespace scalapb.validate {
    export class FileValidationOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            insert_validator_instance?: boolean;
            validate_at_construction?: boolean;
            unique_to_set?: boolean;
            cats_transforms?: boolean;
            skip?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("insert_validator_instance" in data && data.insert_validator_instance != undefined) {
                    this.insert_validator_instance = data.insert_validator_instance;
                }
                if ("validate_at_construction" in data && data.validate_at_construction != undefined) {
                    this.validate_at_construction = data.validate_at_construction;
                }
                if ("unique_to_set" in data && data.unique_to_set != undefined) {
                    this.unique_to_set = data.unique_to_set;
                }
                if ("cats_transforms" in data && data.cats_transforms != undefined) {
                    this.cats_transforms = data.cats_transforms;
                }
                if ("skip" in data && data.skip != undefined) {
                    this.skip = data.skip;
                }
            }
        }
        get insert_validator_instance() {
            return pb_1.Message.getFieldWithDefault(this, 1, true) as boolean;
        }
        set insert_validator_instance(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_insert_validator_instance() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get validate_at_construction() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set validate_at_construction(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_validate_at_construction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get unique_to_set() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set unique_to_set(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_unique_to_set() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get cats_transforms() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cats_transforms(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_cats_transforms() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get skip() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set skip(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_skip() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            insert_validator_instance?: boolean;
            validate_at_construction?: boolean;
            unique_to_set?: boolean;
            cats_transforms?: boolean;
            skip?: boolean;
        }): FileValidationOptions {
            const message = new FileValidationOptions({});
            if (data.insert_validator_instance != null) {
                message.insert_validator_instance = data.insert_validator_instance;
            }
            if (data.validate_at_construction != null) {
                message.validate_at_construction = data.validate_at_construction;
            }
            if (data.unique_to_set != null) {
                message.unique_to_set = data.unique_to_set;
            }
            if (data.cats_transforms != null) {
                message.cats_transforms = data.cats_transforms;
            }
            if (data.skip != null) {
                message.skip = data.skip;
            }
            return message;
        }
        toObject() {
            const data: {
                insert_validator_instance?: boolean;
                validate_at_construction?: boolean;
                unique_to_set?: boolean;
                cats_transforms?: boolean;
                skip?: boolean;
            } = {};
            if (this.insert_validator_instance != null) {
                data.insert_validator_instance = this.insert_validator_instance;
            }
            if (this.validate_at_construction != null) {
                data.validate_at_construction = this.validate_at_construction;
            }
            if (this.unique_to_set != null) {
                data.unique_to_set = this.unique_to_set;
            }
            if (this.cats_transforms != null) {
                data.cats_transforms = this.cats_transforms;
            }
            if (this.skip != null) {
                data.skip = this.skip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_insert_validator_instance)
                writer.writeBool(1, this.insert_validator_instance);
            if (this.has_validate_at_construction)
                writer.writeBool(2, this.validate_at_construction);
            if (this.has_unique_to_set)
                writer.writeBool(3, this.unique_to_set);
            if (this.has_cats_transforms)
                writer.writeBool(4, this.cats_transforms);
            if (this.has_skip)
                writer.writeBool(5, this.skip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileValidationOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileValidationOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.insert_validator_instance = reader.readBool();
                        break;
                    case 2:
                        message.validate_at_construction = reader.readBool();
                        break;
                    case 3:
                        message.unique_to_set = reader.readBool();
                        break;
                    case 4:
                        message.cats_transforms = reader.readBool();
                        break;
                    case 5:
                        message.skip = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileValidationOptions {
            return FileValidationOptions.deserialize(bytes);
        }
    }
    export class MessageValidationOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            insert_validator_instance?: boolean;
            validate_at_construction?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("insert_validator_instance" in data && data.insert_validator_instance != undefined) {
                    this.insert_validator_instance = data.insert_validator_instance;
                }
                if ("validate_at_construction" in data && data.validate_at_construction != undefined) {
                    this.validate_at_construction = data.validate_at_construction;
                }
            }
        }
        get insert_validator_instance() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set insert_validator_instance(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_insert_validator_instance() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get validate_at_construction() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set validate_at_construction(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_validate_at_construction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            insert_validator_instance?: boolean;
            validate_at_construction?: boolean;
        }): MessageValidationOptions {
            const message = new MessageValidationOptions({});
            if (data.insert_validator_instance != null) {
                message.insert_validator_instance = data.insert_validator_instance;
            }
            if (data.validate_at_construction != null) {
                message.validate_at_construction = data.validate_at_construction;
            }
            return message;
        }
        toObject() {
            const data: {
                insert_validator_instance?: boolean;
                validate_at_construction?: boolean;
            } = {};
            if (this.insert_validator_instance != null) {
                data.insert_validator_instance = this.insert_validator_instance;
            }
            if (this.validate_at_construction != null) {
                data.validate_at_construction = this.validate_at_construction;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_insert_validator_instance)
                writer.writeBool(1, this.insert_validator_instance);
            if (this.has_validate_at_construction)
                writer.writeBool(2, this.validate_at_construction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageValidationOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageValidationOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.insert_validator_instance = reader.readBool();
                        break;
                    case 2:
                        message.validate_at_construction = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageValidationOptions {
            return MessageValidationOptions.deserialize(bytes);
        }
    }
    export class FieldValidationOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            skip_unique_check?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("skip_unique_check" in data && data.skip_unique_check != undefined) {
                    this.skip_unique_check = data.skip_unique_check;
                }
            }
        }
        get skip_unique_check() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set skip_unique_check(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_skip_unique_check() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            skip_unique_check?: boolean;
        }): FieldValidationOptions {
            const message = new FieldValidationOptions({});
            if (data.skip_unique_check != null) {
                message.skip_unique_check = data.skip_unique_check;
            }
            return message;
        }
        toObject() {
            const data: {
                skip_unique_check?: boolean;
            } = {};
            if (this.skip_unique_check != null) {
                data.skip_unique_check = this.skip_unique_check;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_skip_unique_check)
                writer.writeBool(1, this.skip_unique_check);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldValidationOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldValidationOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.skip_unique_check = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldValidationOptions {
            return FieldValidationOptions.deserialize(bytes);
        }
    }
    export class Dummy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dummy?: dependency_2.validate.FieldRules;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dummy" in data && data.dummy != undefined) {
                    this.dummy = data.dummy;
                }
            }
        }
        get dummy() {
            return pb_1.Message.getWrapperField(this, dependency_2.validate.FieldRules, 1) as dependency_2.validate.FieldRules;
        }
        set dummy(value: dependency_2.validate.FieldRules) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_dummy() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            dummy?: ReturnType<typeof dependency_2.validate.FieldRules.prototype.toObject>;
        }): Dummy {
            const message = new Dummy({});
            if (data.dummy != null) {
                message.dummy = dependency_2.validate.FieldRules.fromObject(data.dummy);
            }
            return message;
        }
        toObject() {
            const data: {
                dummy?: ReturnType<typeof dependency_2.validate.FieldRules.prototype.toObject>;
            } = {};
            if (this.dummy != null) {
                data.dummy = this.dummy.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_dummy)
                writer.writeMessage(1, this.dummy, () => this.dummy.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Dummy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Dummy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.dummy, () => message.dummy = dependency_2.validate.FieldRules.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Dummy {
            return Dummy.deserialize(bytes);
        }
    }
}
